"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[89294],{49805:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>r,default:()=>k,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=a(83117),i=(a(67294),a(3905));const l={},r="Pool",o={unversionedId:"contracts/v4/reference/core/libraries/Pool",id:"contracts/v4/reference/core/libraries/Pool",title:"Pool",description:"Git Source - Generated with forge doc",source:"@site/docs/contracts/v4/reference/core/libraries/Pool.md",sourceDirName:"contracts/v4/reference/core/libraries",slug:"/contracts/v4/reference/core/libraries/Pool",permalink:"/docs/contracts/v4/reference/core/libraries/Pool",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v4/reference/core/libraries/Pool.md",tags:[],version:"current",frontMatter:{},sidebar:"contractsSidebar",previous:{title:"ParseBytes",permalink:"/docs/contracts/v4/reference/core/libraries/ParseBytes"},next:{title:"Position",permalink:"/docs/contracts/v4/reference/core/libraries/Position"}},p={},d=[{value:"Functions",id:"functions",level:2},{value:"checkTicks",id:"checkticks",level:3},{value:"initialize",id:"initialize",level:3},{value:"setProtocolFee",id:"setprotocolfee",level:3},{value:"setLPFee",id:"setlpfee",level:3},{value:"modifyLiquidity",id:"modifyliquidity",level:3},{value:"swap",id:"swap",level:3},{value:"donate",id:"donate",level:3},{value:"getFeeGrowthInside",id:"getfeegrowthinside",level:3},{value:"updateTick",id:"updatetick",level:3},{value:"tickSpacingToMaxLiquidityPerTick",id:"tickspacingtomaxliquiditypertick",level:3},{value:"checkPoolInitialized",id:"checkpoolinitialized",level:3},{value:"clearTick",id:"cleartick",level:3},{value:"crossTick",id:"crosstick",level:3},{value:"Errors",id:"errors",level:2},{value:"TicksMisordered",id:"ticksmisordered",level:3},{value:"TickLowerOutOfBounds",id:"tickloweroutofbounds",level:3},{value:"TickUpperOutOfBounds",id:"tickupperoutofbounds",level:3},{value:"TickLiquidityOverflow",id:"tickliquidityoverflow",level:3},{value:"PoolAlreadyInitialized",id:"poolalreadyinitialized",level:3},{value:"PoolNotInitialized",id:"poolnotinitialized",level:3},{value:"PriceLimitAlreadyExceeded",id:"pricelimitalreadyexceeded",level:3},{value:"PriceLimitOutOfBounds",id:"pricelimitoutofbounds",level:3},{value:"NoLiquidityToReceiveFees",id:"noliquiditytoreceivefees",level:3},{value:"InvalidFeeForExactOut",id:"invalidfeeforexactout",level:3},{value:"Structs",id:"structs",level:2},{value:"TickInfo",id:"tickinfo",level:3},{value:"State",id:"state",level:3},{value:"ModifyLiquidityParams",id:"modifyliquidityparams",level:3},{value:"ModifyLiquidityState",id:"modifyliquiditystate",level:3},{value:"SwapResult",id:"swapresult",level:3},{value:"StepComputations",id:"stepcomputations",level:3},{value:"SwapParams",id:"swapparams",level:3}],u={toc:d};function k(t){let{components:e,...a}=t;return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pool"},"Pool"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/uniswap/v4-core/blob/80311e34080fee64b6fc6c916e9a51a437d0e482/src/libraries/Pool.sol"},"Git Source")," - Generated with ",(0,i.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/reference/forge/forge-doc"},"forge doc")),(0,i.kt)("p",null,"a library with all actions that can be performed on a pool"),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"checkticks"},"checkTicks"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Common checks for valid tick inputs.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function checkTicks(int24 tickLower, int24 tickUpper) private pure;\n")),(0,i.kt)("h3",{id:"initialize"},"initialize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize(State storage self, uint160 sqrtPriceX96, uint24 lpFee) internal returns (int24 tick);\n")),(0,i.kt)("h3",{id:"setprotocolfee"},"setProtocolFee"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setProtocolFee(State storage self, uint24 protocolFee) internal;\n")),(0,i.kt)("h3",{id:"setlpfee"},"setLPFee"),(0,i.kt)("p",null,"Only dynamic fee pools may update the lp fee."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function setLPFee(State storage self, uint24 lpFee) internal;\n")),(0,i.kt)("h3",{id:"modifyliquidity"},"modifyLiquidity"),(0,i.kt)("p",null,"Effect changes to a position in a pool"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"PoolManager checks that the pool is initialized before calling")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function modifyLiquidity(State storage self, ModifyLiquidityParams memory params)\n    internal\n    returns (BalanceDelta delta, BalanceDelta feeDelta);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"self")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"State")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"params")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ModifyLiquidityParams")),(0,i.kt)("td",{parentName:"tr",align:null},"the position details and the change to the position's liquidity to effect")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"delta")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"BalanceDelta")),(0,i.kt)("td",{parentName:"tr",align:null},"the deltas of the token balances of the pool, from the liquidity change")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"feeDelta")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"BalanceDelta")),(0,i.kt)("td",{parentName:"tr",align:null},"the fees generated by the liquidity range")))),(0,i.kt)("h3",{id:"swap"},"swap"),(0,i.kt)("p",null,"Executes a swap against the state, and returns the amount deltas of the pool"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"PoolManager checks that the pool is initialized before calling")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function swap(State storage self, SwapParams memory params)\n    internal\n    returns (BalanceDelta swapDelta, uint256 amountToProtocol, uint24 swapFee, SwapResult memory result);\n")),(0,i.kt)("h3",{id:"donate"},"donate"),(0,i.kt)("p",null,"Donates the given amount of currency0 and currency1 to the pool"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function donate(State storage state, uint256 amount0, uint256 amount1) internal returns (BalanceDelta delta);\n")),(0,i.kt)("h3",{id:"getfeegrowthinside"},"getFeeGrowthInside"),(0,i.kt)("p",null,"Retrieves fee growth data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function getFeeGrowthInside(State storage self, int24 tickLower, int24 tickUpper)\n    internal\n    view\n    returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"self")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"State")),(0,i.kt)("td",{parentName:"tr",align:null},"The Pool state struct")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tickLower")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"The lower tick boundary of the position")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tickUpper")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"The upper tick boundary of the position")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"feeGrowthInside0X128")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"uint256")),(0,i.kt)("td",{parentName:"tr",align:null},"The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"feeGrowthInside1X128")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"uint256")),(0,i.kt)("td",{parentName:"tr",align:null},"The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries")))),(0,i.kt)("h3",{id:"updatetick"},"updateTick"),(0,i.kt)("p",null,"Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function updateTick(State storage self, int24 tick, int128 liquidityDelta, bool upper)\n    internal\n    returns (bool flipped, uint128 liquidityGrossAfter);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"self")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"State")),(0,i.kt)("td",{parentName:"tr",align:null},"The mapping containing all tick information for initialized ticks")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tick")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"The tick that will be updated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"liquidityDelta")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int128")),(0,i.kt)("td",{parentName:"tr",align:null},"A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"upper")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:null},"true for updating a position's upper tick, or false for updating a position's lower tick")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"flipped")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"bool")),(0,i.kt)("td",{parentName:"tr",align:null},"Whether the tick was flipped from initialized to uninitialized, or vice versa")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"liquidityGrossAfter")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"uint128")),(0,i.kt)("td",{parentName:"tr",align:null},"The total amount of liquidity for all positions that references the tick after the update")))),(0,i.kt)("h3",{id:"tickspacingtomaxliquiditypertick"},"tickSpacingToMaxLiquidityPerTick"),(0,i.kt)("p",null,"Derives max liquidity per tick from given tick spacing"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Executed when adding liquidity")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128 result);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tickSpacing")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"The amount of required tick separation, realized in multiples of ",(0,i.kt)("inlineCode",{parentName:"td"},"tickSpacing")," e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"result")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"uint128")),(0,i.kt)("td",{parentName:"tr",align:null},"The max liquidity per tick")))),(0,i.kt)("h3",{id:"checkpoolinitialized"},"checkPoolInitialized"),(0,i.kt)("p",null,"Reverts if the given pool has not been initialized"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function checkPoolInitialized(State storage self) internal view;\n")),(0,i.kt)("h3",{id:"cleartick"},"clearTick"),(0,i.kt)("p",null,"Clears tick data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function clearTick(State storage self, int24 tick) internal;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"self")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"State")),(0,i.kt)("td",{parentName:"tr",align:null},"The mapping containing all initialized tick information for initialized ticks")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tick")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"The tick that will be cleared")))),(0,i.kt)("h3",{id:"crosstick"},"crossTick"),(0,i.kt)("p",null,"Transitions to next tick as needed by price movement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"function crossTick(State storage self, int24 tick, uint256 feeGrowthGlobal0X128, uint256 feeGrowthGlobal1X128)\n    internal\n    returns (int128 liquidityNet);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"self")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"State")),(0,i.kt)("td",{parentName:"tr",align:null},"The Pool state struct")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tick")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"The destination tick of the transition")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"feeGrowthGlobal0X128")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"uint256")),(0,i.kt)("td",{parentName:"tr",align:null},"The all-time global fee growth, per unit of liquidity, in token0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"feeGrowthGlobal1X128")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"uint256")),(0,i.kt)("td",{parentName:"tr",align:null},"The all-time global fee growth, per unit of liquidity, in token1")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"liquidityNet")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int128")),(0,i.kt)("td",{parentName:"tr",align:null},"The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)")))),(0,i.kt)("h2",{id:"errors"},"Errors"),(0,i.kt)("h3",{id:"ticksmisordered"},"TicksMisordered"),(0,i.kt)("p",null,"Thrown when tickLower is not below tickUpper"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error TicksMisordered(int24 tickLower, int24 tickUpper);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tickLower")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"The invalid tickLower")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tickUpper")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"The invalid tickUpper")))),(0,i.kt)("h3",{id:"tickloweroutofbounds"},"TickLowerOutOfBounds"),(0,i.kt)("p",null,"Thrown when tickLower is less than min tick"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error TickLowerOutOfBounds(int24 tickLower);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tickLower")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"The invalid tickLower")))),(0,i.kt)("h3",{id:"tickupperoutofbounds"},"TickUpperOutOfBounds"),(0,i.kt)("p",null,"Thrown when tickUpper exceeds max tick"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error TickUpperOutOfBounds(int24 tickUpper);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tickUpper")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"The invalid tickUpper")))),(0,i.kt)("h3",{id:"tickliquidityoverflow"},"TickLiquidityOverflow"),(0,i.kt)("p",null,"For the tick spacing, the tick has too much liquidity"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error TickLiquidityOverflow(int24 tick);\n")),(0,i.kt)("h3",{id:"poolalreadyinitialized"},"PoolAlreadyInitialized"),(0,i.kt)("p",null,"Thrown when trying to initialize an already initialized pool"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error PoolAlreadyInitialized();\n")),(0,i.kt)("h3",{id:"poolnotinitialized"},"PoolNotInitialized"),(0,i.kt)("p",null,"Thrown when trying to interact with a non-initialized pool"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error PoolNotInitialized();\n")),(0,i.kt)("h3",{id:"pricelimitalreadyexceeded"},"PriceLimitAlreadyExceeded"),(0,i.kt)("p",null,"Thrown when sqrtPriceLimitX96 on a swap has already exceeded its limit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error PriceLimitAlreadyExceeded(uint160 sqrtPriceCurrentX96, uint160 sqrtPriceLimitX96);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"sqrtPriceCurrentX96")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"uint160")),(0,i.kt)("td",{parentName:"tr",align:null},"The invalid, already surpassed sqrtPriceLimitX96")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"sqrtPriceLimitX96")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"uint160")),(0,i.kt)("td",{parentName:"tr",align:null},"The surpassed price limit")))),(0,i.kt)("h3",{id:"pricelimitoutofbounds"},"PriceLimitOutOfBounds"),(0,i.kt)("p",null,"Thrown when sqrtPriceLimitX96 lies outside of valid tick/price range"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error PriceLimitOutOfBounds(uint160 sqrtPriceLimitX96);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"sqrtPriceLimitX96")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"uint160")),(0,i.kt)("td",{parentName:"tr",align:null},"The invalid, out-of-bounds sqrtPriceLimitX96")))),(0,i.kt)("h3",{id:"noliquiditytoreceivefees"},"NoLiquidityToReceiveFees"),(0,i.kt)("p",null,"Thrown by donate if there is currently 0 liquidity, since the fees will not go to any liquidity providers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error NoLiquidityToReceiveFees();\n")),(0,i.kt)("h3",{id:"invalidfeeforexactout"},"InvalidFeeForExactOut"),(0,i.kt)("p",null,"Thrown when trying to swap with max lp fee and specifying an output amount"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"error InvalidFeeForExactOut();\n")),(0,i.kt)("h2",{id:"structs"},"Structs"),(0,i.kt)("h3",{id:"tickinfo"},"TickInfo"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct TickInfo {\n    uint128 liquidityGross;\n    int128 liquidityNet;\n    uint256 feeGrowthOutside0X128;\n    uint256 feeGrowthOutside1X128;\n}\n")),(0,i.kt)("h3",{id:"state"},"State"),(0,i.kt)("p",null,"The state of a pool"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note that feeGrowthGlobal can be artificially inflated\nFor pools with a single liquidity position, actors can donate to themselves to freely inflate feeGrowthGlobal\natomically donating and collecting fees in the same unlockCallback may make the inflated value more extreme")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct State {\n    Slot0 slot0;\n    uint256 feeGrowthGlobal0X128;\n    uint256 feeGrowthGlobal1X128;\n    uint128 liquidity;\n    mapping(int24 tick => TickInfo) ticks;\n    mapping(int16 wordPos => uint256) tickBitmap;\n    mapping(bytes32 positionKey => Position.State) positions;\n}\n")),(0,i.kt)("h3",{id:"modifyliquidityparams"},"ModifyLiquidityParams"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct ModifyLiquidityParams {\n    address owner;\n    int24 tickLower;\n    int24 tickUpper;\n    int128 liquidityDelta;\n    int24 tickSpacing;\n    bytes32 salt;\n}\n")),(0,i.kt)("h3",{id:"modifyliquiditystate"},"ModifyLiquidityState"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct ModifyLiquidityState {\n    bool flippedLower;\n    uint128 liquidityGrossAfterLower;\n    bool flippedUpper;\n    uint128 liquidityGrossAfterUpper;\n}\n")),(0,i.kt)("h3",{id:"swapresult"},"SwapResult"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct SwapResult {\n    uint160 sqrtPriceX96;\n    int24 tick;\n    uint128 liquidity;\n}\n")),(0,i.kt)("h3",{id:"stepcomputations"},"StepComputations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct StepComputations {\n    uint160 sqrtPriceStartX96;\n    int24 tickNext;\n    bool initialized;\n    uint160 sqrtPriceNextX96;\n    uint256 amountIn;\n    uint256 amountOut;\n    uint256 feeAmount;\n    uint256 feeGrowthGlobalX128;\n}\n")),(0,i.kt)("h3",{id:"swapparams"},"SwapParams"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"struct SwapParams {\n    int256 amountSpecified;\n    int24 tickSpacing;\n    bool zeroForOne;\n    uint160 sqrtPriceLimitX96;\n    uint24 lpFeeOverride;\n}\n")))}k.isMDXComponent=!0},3905:(t,e,a)=>{a.d(e,{Zo:()=>u,kt:()=>s});var n=a(67294);function i(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function r(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){i(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,i=function(t,e){if(null==t)return{};var a,n,i={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(i[a]=t[a]);return i}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(i[a]=t[a])}return i}var p=n.createContext({}),d=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):r(r({},e),t)),a},u=function(t){var e=d(t.components);return n.createElement(p.Provider,{value:e},t.children)},k={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,i=t.mdxType,l=t.originalType,p=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),m=d(a),s=i,c=m["".concat(p,".").concat(s)]||m[s]||k[s]||l;return a?n.createElement(c,r(r({ref:e},u),{},{components:a})):n.createElement(c,r({ref:e},u))}));function s(t,e){var a=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var l=a.length,r=new Array(l);r[0]=m;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:i,r[1]=o;for(var d=2;d<l;d++)r[d]=a[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);