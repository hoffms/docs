"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[89712],{17078:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(83117),i=(n(67294),n(3905)),o=n(92241),s=n(51402);const r={id:"getting-started",title:"Getting Started with the Swap Widget",sidebar_label:"Getting Started",sidebar_position:1},p="Getting Started with the Swap Widget",l={unversionedId:"sdk/swap-widget/guides/getting-started",id:"sdk/swap-widget/guides/getting-started",title:"Getting Started with the Swap Widget",description:"This guide walks you through the steps to embed the swap widget in your website in 2 minutes \u2014 whether your site is already a decentralized application (dApp) or not. With the swap widget, your users can trade ERC-20 tokens on the Uniswap Protocol without leaving your site!",source:"@site/docs/sdk/swap-widget/guides/swap-widget.mdx",sourceDirName:"sdk/swap-widget/guides",slug:"/sdk/swap-widget/guides/getting-started",permalink:"/docs/sdk/swap-widget/guides/getting-started",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/sdk/swap-widget/guides/swap-widget.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"getting-started",title:"Getting Started with the Swap Widget",sidebar_label:"Getting Started",sidebar_position:1},sidebar:"sdkSidebar",previous:{title:"Overview",permalink:"/docs/sdk/swap-widget/overview"},next:{title:"Example Themes",permalink:"/docs/sdk/swap-widget/guides/examples"}},d={},u=[{value:"Installing the Widgets Library",id:"installing-library",level:2},{value:"Adding the Swap Widget to Your App",id:"adding-the-widget",level:2},{value:"Web3 Provider",id:"web3-provider",level:2},{value:"JSON-RPC Endpoints",id:"json-rpc-endpoint",level:2},{value:"Customizing the Width",id:"customizing-width",level:2},{value:"Customizing the Theme",id:"customizing-theme",level:2},{value:"Overriding Attributes",id:"overriding-attributes",level:3},{value:"Enabling Token Color Extraction",id:"enabling-color-extraction",level:3},{value:"Toggling Light and Dark Mode",id:"toggling-light-dark-mode",level:3},{value:"Matching System Preference for Light and Dark Mode",id:"matching-system-light-dark-mode",level:3},{value:"Extending Themes",id:"extending-themes",level:3},{value:"Customizing the Token Lists",id:"customizing-token-lists",level:2},{value:"Customizing the Default Token List",id:"customizing-default-token-list",level:3},{value:"Customizing the Default Input and Output Tokens",id:"customizing-default-input-output-tokens",level:2},{value:"Understanding the Swap Widget States",id:"understanding-widget-states",level:2}],h={toc:u};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started-with-the-swap-widget"},"Getting Started with the Swap Widget"),(0,i.kt)("p",null,"This guide walks you through the steps to embed the swap widget in your website in 2 minutes \u2014 whether your site is already a decentralized application (dApp) or not. With the swap widget, your users can trade ERC-20 tokens on the Uniswap Protocol without leaving your site!"),(0,i.kt)("p",null,"Here's a live preview of the swap widget."),(0,i.kt)("iframe",{width:"376",height:"376",scrolling:"no",src:"https://widgets-uniswap.vercel.app/_renderer.html?_fixtureId=%7B%22path%22%3A%22src%2Fcosmos%2FSwap.fixture.tsx%22%2C%22name%22%3Anull%7D"}),(0,i.kt)("p",null,"Example use cases include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Building a custom frontend for the Uniswap Protocol"),(0,i.kt)("li",{parentName:"ul"},"Swapping assets in a DeFi application"),(0,i.kt)("li",{parentName:"ul"},"Acquiring a token to participate in your web3 community (e.g. FWB or a gaming token)"),(0,i.kt)("li",{parentName:"ul"},"Converting to the required currency for an NFT purchase (e.g. WETH)")),(0,i.kt)("p",null,"You can make the widget feel like a native part of your app by customizing the colors, font, and token list to match your app theme. This guide will teach you how."),(0,i.kt)("h2",{id:"installing-library"},"Installing the Widgets Library"),(0,i.kt)("p",null,"To get started, install the widgets library using npm or Yarn. If you don't already use it, you'll need to install ",(0,i.kt)("inlineCode",{parentName:"p"},"react-redux")," as well."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:"npm2yarn",npm2yarn:!0},"npm install --save @uniswap/widgets react-redux\n")),(0,i.kt)("h2",{id:"adding-the-widget"},"Adding the Swap Widget to Your App"),(0,i.kt)("p",null,"Next, embed the React component in your application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SwapWidget } from '@uniswap/widgets'\nimport '@uniswap/widgets/fonts.css'\n\nfunction App() {\n  <div className=\"Uniswap\">\n    <SwapWidget />\n  </div>\n}\n")),(0,i.kt)("p",null,"That's it! You should now see a fully functional swap widget on your site. The widget is self-contained and gracefully handles all interactions with the Uniswap Protocol. It leverages the ",(0,i.kt)("a",{parentName:"p",href:"/sdk/v3/guides/swaps/routing"},"Auto Router")," to compute the best price across all Uniswap v2 and v3 pools."),(0,i.kt)("p",null,"See a full implementation of the swap widget in the ",(0,i.kt)("inlineCode",{parentName:"p"},"/cra")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"/nextjs")," branches of the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/widgets-demo"},"widgets-demo")," repo."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Create React App V4")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All code snippets will work seamlessly if you use ",(0,i.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js")," or ",(0,i.kt)("a",{parentName:"p",href:"https://create-react-app.dev/"},"Create React App")," V5. However, if you're using Create React App V4, you'll need to use the following ",(0,i.kt)("inlineCode",{parentName:"p"},"import")," statements instead:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SwapWidget } from '@uniswap/widgets/dist/index.js'\nimport '@uniswap/widgets/dist/fonts.css'\n")))),(0,i.kt)("h1",{id:"recommended-parameters"},"Recommended Parameters"),(0,i.kt)("p",null,"The swap widget is a React component that can be easily imported into any React project. It's designed to work out-of-the-box, with no required parameters or web3 integration necessary. Trading is supported on all networks where the Uniswap Protocol is deployed."),(0,i.kt)("p",null,"Although the widget will work out-of-the-box with no parameters, we highly recommend integrators provide ",(0,i.kt)("a",{parentName:"p",href:"#json-rpc-endpoint"},"JSON-RPC endpoints"),", like from ",(0,i.kt)("a",{parentName:"p",href:"https://www.chainnodes.org"},"Chainnodes"),", Infura or Alchemy. Existing dApps can also provide their existing ",(0,i.kt)("a",{parentName:"p",href:"#web3-provider"},"web3 provider")," to integrate the widget seamlessly into their dApp."),(0,i.kt)("p",null,"Additional ",(0,i.kt)("a",{parentName:"p",href:"/sdk/swap-widget/reference/v2#optional-parameters"},"optional parameters")," are available to customize the appearance and performance of the swap widget to fit your unique use case."),(0,i.kt)("h2",{id:"web3-provider"},"Web3 Provider"),(0,i.kt)("p",null,"The swap widget uses a web3 ",(0,i.kt)("inlineCode",{parentName:"p"},"provider")," prop to allow users to connect their wallets, fetch balances, and submit transactions through the user's connected wallet."),(0,i.kt)("p",null,"If your app does not maintain its own web3 provider, you can omit the ",(0,i.kt)("inlineCode",{parentName:"p"},"provider")," prop. The widget will use built-in wallet connection functionality (for ",(0,i.kt)("a",{parentName:"p",href:"https://walletconnect.com/"},"WalletConnect")," and ",(0,i.kt)("a",{parentName:"p",href:"https://metamask.io/"},"MetaMask"),"), making it easy for you to integrate web3 in your app!"),(0,i.kt)("p",null,"If you already have a web3 provider, you can pass your provider object directly into the ",(0,i.kt)("inlineCode",{parentName:"p"},"provider")," prop. Both ",(0,i.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/api/providers/provider/"},"ethers")," and ",(0,i.kt)("a",{parentName:"p",href:"https://web3js.readthedocs.io/en/v1.5.2/index.html"},"web3.js")," provider objects are compatible with the widget, as is any ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1193"},"EIP-1193")," provider.\nYou can directly use the providers returned from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/web3-react"},"web3-react")," or ",(0,i.kt)("a",{parentName:"p",href:"https://wagmi.sh/"},"wagmi")," (both are ",(0,i.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/api/providers/provider/"},"ethers"),' providers). If it is not connected to a wallet, it will still be used to read data from the chain, but the widget will still prompt the user to "Connect wallet".'),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Be sure to use the wallet-connected provider")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"When using ",(0,i.kt)("a",{parentName:"p",href:"https://wagmi.sh/"},"wagmi@v0.11"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"useProvider()")," will return the fallback provider, ",(0,i.kt)("em",{parentName:"p"},"not")," the wallet-connected provider. You should instead pass ",(0,i.kt)("inlineCode",{parentName:"p"},"useSigner<JsonRpcSigner>().data?.provider")," to reflect the user's connected wallet."))),(0,i.kt)("p",null,"If you maintain a web3 provider on your app, you should also consider intercepting the swap widget's wallet connection flow. Do so by passing a handler returning ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," to the ",(0,i.kt)("a",{parentName:"p",href:"/sdk/swap-widget/reference/v2#onConnectWalletClick"},(0,i.kt)("inlineCode",{parentName:"a"},"onConnectWalletClick")),' prop, which is triggered when the widget\'s "Connect wallet" button is clicked. Check out libraries such as ',(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/web3-react"},"web3-react"),", BlockNative's ",(0,i.kt)("a",{parentName:"p",href:"https://www.blocknative.com/onboard"},"Onboard"),", or Aragon's ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/aragon/use-wallet"},"useWallet()")," to build your own flow. To hide the swap widget's wallet connection flow entirely, pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"hideConnectionUI")," prop."),(0,i.kt)("p",null,"The widget will match the network currently selected by the passed provider. If the user switches networks in your app or in their connected wallet, that change will propagate to the widget as well. If the user connects to a network that is not supported by the swap widget, the widget will gracefully disable itself."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { SwapWidget } from '@uniswap/widgets'\nimport '@uniswap/widgets/fonts.css'\n\n// We recommend you pass a web3 provider.\nimport { provider } from './your/provider'\n\n// We recommend you pass your own JSON-RPC endpoints.\nconst jsonRpcUrlMap = {\n  1: ['https://mainnet.infura.io/v3/<YOUR_INFURA_PROJECT_ID>'],\n  3: ['https://ropsten.infura.io/v3/<YOUR_INFURA_PROJECT_ID>']\n}\n\nfunction App() {\n  <div className=\"Uniswap\">\n    <SwapWidget provider={provider} jsonRpcUrlMap={jsonRpcUrlMap} />\n  </div>\n}\n")),(0,i.kt)("h2",{id:"json-rpc-endpoint"},"JSON-RPC Endpoints"),(0,i.kt)("p",null,"JSON-RPC endpoints are used to read data when no ",(0,i.kt)("inlineCode",{parentName:"p"},"provider")," is connected. We strongly recommend you pass either a Web3 Provider to the ",(0,i.kt)("inlineCode",{parentName:"p"},"provider")," prop, or JSON-RPC endpoint URLs to the ",(0,i.kt)("inlineCode",{parentName:"p"},"jsonRpcUrlMap")," prop."),(0,i.kt)("p",null,"The widget will use these endpoints to fetch on-chain data and submit transactions for signature. If the user connects a MetaMask wallet, the widget will use the JSON-RPC provided by MetaMask when possible. ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/widgets/blob/main/src/constants/chains.ts#L4"},"(See a list of all chains supported on widget.)")),(0,i.kt)("p",null,"If you don't yet have JSON-RPC endpoints, you can easily create them with services like ",(0,i.kt)("a",{parentName:"p",href:"https://www.chainnodes.org"},"Chainnodes"),", ",(0,i.kt)("a",{parentName:"p",href:"https://infura.io/product/ethereum"},"Infura")," or ",(0,i.kt)("a",{parentName:"p",href:"https://www.alchemy.com/supernode"},"Alchemy"),"."),(0,i.kt)("p",null,"If you choose not to provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"jsonRpcUrlMap")," prop or are missing endpoints for some chains, the widget uses free public JSON-RPC endpoints to still allow users to interact with the widget and fetch price quotes. However, these public endpoints are NOT recommended for production environment usage, are severely rate-limited, and aren't necessarily as reliable. When possible, we'd recommend providing your own endpoints!"),(0,i.kt)("h1",{id:"customizing-widget"},"Customizing the Swap Widget"),(0,i.kt)("p",null,"You can set ",(0,i.kt)("a",{parentName:"p",href:"/sdk/swap-widget/reference/v2#optional-parameters"},"optional parameters")," to tailor the appearance and functionality of the swap widget to fit your dApp."),(0,i.kt)("h2",{id:"customizing-width"},"Customizing the Width"),(0,i.kt)("p",null,"The swap widget has a fixed height of 360px and a default width of 360px. You cannot modify the height of the widget. You can modify the width up to a minimum width of 300px."),(0,i.kt)("p",null,"You can customize the width by passing a number (of pixels) or a valid CSS width to the ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," prop of the widget."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { SwapWidget } from '@uniswap/widgets'\nimport '@uniswap/widgets/fonts.css'\n\nfunction App() {\n  <div className=\"Uniswap\">\n    <SwapWidget\n      width={360} // Custom width in pixels\n    />\n  </div>\n}\n")),(0,i.kt)("p",null,"For example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"width={360}")," sets the width to 360 pixels"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'width="100%"')," sets the width to dynamically fill 100% of the parent container"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'width="20em"')," sets the width to 20 * 16 = 320 pixels because 16px is the base font-size of the widget")),(0,i.kt)("p",null,"The recommended and default width is 360 pixels."),(0,i.kt)("h2",{id:"customizing-theme"},"Customizing the Theme"),(0,i.kt)("p",null,"You can customize the colors, font, and border radius of the swap widget to match the look and feel of your dApp. You can also toggle between light and dark modes. This section explains how to customize each attribute of the widget with your own ",(0,i.kt)("inlineCode",{parentName:"p"},"theme"),"."),(0,i.kt)("p",null,"All attributes below are color codes, except ",(0,i.kt)("inlineCode",{parentName:"p"},"fontFamily")," (string), ",(0,i.kt)("inlineCode",{parentName:"p"},"borderRadius")," (number between 0 and 1), and ",(0,i.kt)("inlineCode",{parentName:"p"},"tokenColorExtraction"),"(boolean). The next two sections show code examples using these attributes."),(0,i.kt)("p",null,"Check out ",(0,i.kt)("a",{parentName:"p",href:"/sdk/swap-widget/guides/examples"},"examples")," of the swap widget, and the ",(0,i.kt)("a",{parentName:"p",href:"https://www.figma.com/file/m0pVMlgAgSoaIrXlM3VRUG/Widgets-(External)?node-id=4302%3A18261"},"Figma file")," if you want to mock it up first!"),(0,i.kt)(o.Z,{alt:"Swap Widget Theme Attributes",className:"illustration",sources:{light:(0,s.Z)("/img/widgets/swap-widget-attributes-light.png"),dark:(0,s.Z)("/img/widgets/swap-widget-attributes-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)(o.Z,{alt:"Swap Widget Theme Example",className:"illustration",sources:{light:(0,s.Z)("/img/widgets/swap-widget-example-light.png"),dark:(0,s.Z)("/img/widgets/swap-widget-example-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)("h3",{id:"overriding-attributes"},"Overriding Attributes"),(0,i.kt)("p",null,"You can override specific attributes of the widget by creating a ",(0,i.kt)("inlineCode",{parentName:"p"},"Theme")," object and defining the properties you wish to override. Any properties left undefined will fallback to the default theme. For example, here is a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"Theme")," that removes the border radius and sets a custom font family."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Theme, SwapWidget } from '@uniswap/widgets'\n\n// Define a custom theme to override default attributes\nconst theme: Theme = {\n  borderRadius: 0,\n  fontFamily: '\"Helvetica\"',\n}\n\nfunction App() {\n  <div className=\"Uniswap\">\n    <SwapWidget theme={theme} />\n  </div>\n}\n")),(0,i.kt)("p",null,"Please note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"borderRadius")," attribute is a multiplier from 0 to 1 of how much radius to apply. Since the widget uses different values of border radius (e.g. internal edges have tighter radii than external edges), ",(0,i.kt)("inlineCode",{parentName:"p"},"borderRadius")," will apply your multiplier value on all instances so that the border radii still look proportionally correct."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Importing Fonts")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The swap widget fonts must be imported explicitly with ",(0,i.kt)("inlineCode",{parentName:"p"},"import '@uniswap/widgets/fonts.css'"),". However, if you're overriding the swap widget fonts with your own, or with a default font such as Helvetica in the example above, you can remove this ",(0,i.kt)("inlineCode",{parentName:"p"},"import")," statement."))),(0,i.kt)("h3",{id:"enabling-color-extraction"},"Enabling Token Color Extraction"),(0,i.kt)("p",null,"By default, the background color of the output module will be set by the ",(0,i.kt)("inlineCode",{parentName:"p"},"module")," attribute. You can optionally enable color extraction to flood the output module with the color of the selected output token. In the above example, DAI is the output token so the output module is flooded with DAI yellow."),(0,i.kt)("p",null,"To enable color extraction, set the ",(0,i.kt)("inlineCode",{parentName:"p"},"tokenColorExtraction")," property to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"Theme")," object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Theme, SwapWidget } from '@uniswap/widgets'\nimport '@uniswap/widgets/fonts.css'\n\nconst enableColorExtractionTheme: Theme = {\n  tokenColorExtraction: true, // Enable color extraction of the output token\n}\n\nfunction App() {\n  <div className=\"Uniswap\">\n    <SwapWidget theme={enableColorExtractionTheme} />\n  </div>\n}\n")),(0,i.kt)("h3",{id:"toggling-light-dark-mode"},"Toggling Light and Dark Mode"),(0,i.kt)("p",null,"The swap widget provides a default light theme and dark theme as a starting point. You can import each one and extend it to create your own theme. If your app can toggle between light and dark mode, you can propagate that state down to the widget by following the example below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { darkTheme, lightTheme, Theme, SwapWidget } from '@uniswap/widgets'\nimport '@uniswap/widgets/fonts.css'\n\nlet darkMode = true // Dynamically toggle dark mode on and off\nfunction App() {\n  <div className=\"Uniswap\">\n    <SwapWidget theme={darkMode ? darkTheme : lightTheme} />\n  </div>\n}\n")),(0,i.kt)("h3",{id:"matching-system-light-dark-mode"},"Matching System Preference for Light and Dark Mode"),(0,i.kt)("p",null,"You can match the user's system preference for light/dark mode by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useSystemTheme")," hook. This will return the default widget light or dark theme according to the user's system configuration. You can extend this base theme with further customizations, as you will see in the next section."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { SwapWidget } from '@uniswap/widgets'\nimport '@uniswap/widgets/fonts.css'\n\nfunction useSystemTheme() {\n  // Access\n}\n\nfunction App() {\n  const theme = useSystemTheme() // Get a theme that matches the user system preference\n  <div className=\"Uniswap\">\n    <SwapWidget theme={theme} />\n  </div>\n}\n")),(0,i.kt)("h3",{id:"extending-themes"},"Extending Themes"),(0,i.kt)("p",null,"You can extend any theme with custom attributes. The below example extends the base light and dark themes with custom colors."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { darkTheme, lightTheme, Theme, SwapWidget } from '@uniswap/widgets'\nimport '@uniswap/widgets/fonts.css'\n\nconst myLightTheme: Theme = {\n  ...lightTheme, // Extend the lightTheme\n  accent: '#FF007A',\n  primary: '#000000',\n  secondary: '#565A69',\n}\n\nconst myDarkTheme: Theme = {\n  ...darkTheme, // Extend the darkTheme\n  accent: '#2172E5',\n  primary: '#FFFFFF',\n  secondary: '#888D9B',\n}\n\nlet darkMode = true\nfunction App() {\n  <div className=\"Uniswap\">\n    <SwapWidget theme={darkMode ? myDarkTheme : myLightTheme} />\n  </div>\n}\n")),(0,i.kt)("h2",{id:"customizing-token-lists"},"Customizing the Token Lists"),(0,i.kt)("p",null,"By default, the widget will use the ",(0,i.kt)("a",{parentName:"p",href:"https://tokenlists.org/token-list?url=https://gateway.ipfs.io/ipns/tokens.uniswap.org"},"Uniswap Labs default token list")," in the selector."),(0,i.kt)("h3",{id:"customizing-default-token-list"},"Customizing the Default Token List"),(0,i.kt)("p",null,"If you want to offer a different set of tokens in the widget, you can provide a custom ",(0,i.kt)("inlineCode",{parentName:"p"},"tokenList")," parameter. You can ",(0,i.kt)("a",{parentName:"p",href:"https://tokenlists.org/"},"browse popular token lists")," to find one that suits your needs and then pass the URL as a parameter."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SwapWidget } from '@uniswap/widgets'\nimport '@uniswap/widgets/fonts.css'\n\nconst CMC_TOKEN_LIST = 'https://api.coinmarketcap.com/data-api/v3/uniswap/all.json'\n\nfunction App() {\n  <div className=\"Uniswap\">\n    <SwapWidget\n      tokenList={CMC_TOKEN_LIST} // Use the CoinMarketCap token list\n    />\n  </div>\n}\n")),(0,i.kt)("p",null,"Alternatively, you can create your own token list. There are two ways to provide your own token list for the widget."),(0,i.kt)("p",null,"The first option is to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/token-lists#authoring-token-lists"},"create a full token list"),", host it at your own URI, and pass the URI as a parameter as in the above example. This option is recommended if you want to use the same token list in multiple places throughout your application or community."),(0,i.kt)("p",null,"The second and easiest option is to construct a custom token list inline as an array of tokens. The schema is equivalent to the ",(0,i.kt)("inlineCode",{parentName:"p"},"tokens")," array from the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/token-lists/blob/main/src/tokenlist.schema.json"},"tokenlist JSON schema"),". This option lets you skip deployment, hosting, and versioning of a full URI token list. Here is an example of an inline token list containing only the DAI, USDT, and USDC tokens (in addition to ETH which is always available, regardless of token list)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import { SwapWidget } from \'@uniswap/widgets\'\nimport \'@uniswap/widgets/fonts.css\'\n\n// You can also pass a token list as JSON, as long as it matches the schema\nconst MY_TOKEN_LIST = [\n    {\n    "name": "Dai Stablecoin",\n    "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",\n    "symbol": "DAI",\n    "decimals": 18,\n    "chainId": 1,\n    "logoURI": "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B175474E89094C44Da98b954EedeAC495271d0F/logo.png"\n  },\n    {\n    "name": "Tether USD",\n    "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",\n    "symbol": "USDT",\n    "decimals": 6,\n    "chainId": 1,\n    "logoURI": "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png"\n  },\n  {\n    "name": "USD Coin",\n    "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",\n    "symbol": "USDC",\n    "decimals": 6,\n    "chainId": 1,\n    "logoURI": "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png"\n  },\n]\n\nfunction App() {\n  <div className="Uniswap">\n    <SwapWidget tokenList={MY_TOKEN_LIST} />\n  </div>\n}\n')),(0,i.kt)("p",null,"Please note that the swap widget only enforces metadata validation on remotely hosted token lists, not on token list data passed as a literal value to the widget like in this example."),(0,i.kt)("p",null,"If you want to add Layer 2 tokens to the token list, you can add an extension field. See this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/token-lists/issues/51#issuecomment-952268629"},"GitHub issue")," for details."),(0,i.kt)("h2",{id:"customizing-default-input-output-tokens"},"Customizing the Default Input and Output Tokens"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultInputTokenAddress"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultInputAmount"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultOutputTokenAddress"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultOutputAmount")," to pre-populate the input and output token fields respectively. This is useful when the widget appears in a context where you know which tokens the user is evaluating to trade. For example, if the widget appears on a page that displays the WBTC price chart, it would be helpful to pre-select WBTC as the output token in the widget."),(0,i.kt)("p",null,"If your page does not need any particular defaults, then the recommended default input token is the native asset of the active network (e.g. ETH) and no default output token is recommended. Since ETH does not have an address, you can pass ",(0,i.kt)("inlineCode",{parentName:"p"},"'NATIVE'")," as the parameter to set it as the default input or output token."),(0,i.kt)("p",null,"The following example sets the default input to 2 ETH and the default output token to WBTC."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { SwapWidget } from '@uniswap/widgets'\nimport '@uniswap/widgets/fonts.css'\n\n// Default token list from Uniswap\nconst UNISWAP_TOKEN_LIST = 'https://gateway.ipfs.io/ipns/tokens.uniswap.org'\n\n// Use the native token of the connected chain as the default input token\nconst NATIVE = 'NATIVE' // Special address for native token\n\n// WBTC as the default output token\nconst WBTC = '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599'\n\nfunction App() {\n  <div className=\"Uniswap\">\n    <SwapWidget\n      tokenList={UNISWAP_TOKEN_LIST}\n      defaultInputTokenAddress={NATIVE}\n      defaultInputAmount={2}\n      defaultOutputTokenAddress={WBTC}\n    />\n  </div>\n}\n")),(0,i.kt)("h2",{id:"understanding-widget-states"},"Understanding the Swap Widget States"),(0,i.kt)("p",null,"The widget has two main connectivity states depending on if the user has connected a wallet."),(0,i.kt)(o.Z,{alt:"Swap Widget States",className:"illustration",sources:{light:(0,s.Z)("/img/widgets/swap-widget-states-light.png"),dark:(0,s.Z)("/img/widgets/swap-widget-states-dark.png")},mdxType:"ThemedImage"}),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Before wallet connection"),", the widget will use the JSON-RPC endpoint to fetch token price data and provide trade quotes, but submitting transactions will be disabled."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"After wallet connection"),", the widget will be fully functional. The user will be able to fetch trade quotes and submit swap transactions using the JSON-RPC endpoint and web3 provider from their connected wallet.")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Questions?")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Join the ",(0,i.kt)("a",{parentName:"p",href:"https://discord.com/invite/sherry"},"Discord channel")," to ask questions and get support from the Uniswap community."))))}m.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),h=l(n),m=i,c=h["".concat(p,".").concat(m)]||h[m]||u[m]||o;return n?a.createElement(c,s(s({ref:t},d),{},{components:n})):a.createElement(c,s({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=h;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);