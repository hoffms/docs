"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[5838],{10040:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var n=t(83117),i=(t(67294),t(3905));const r={id:"metadata",title:"Metadata Validation",sidebar_position:3},o=void 0,l={unversionedId:"concepts/protocol/metadata",id:"concepts/protocol/metadata",title:"Metadata Validation",description:"Introduction",source:"@site/docs/concepts/protocol/metadata.md",sourceDirName:"concepts/protocol",slug:"/concepts/protocol/metadata",permalink:"/docs/concepts/protocol/metadata",editUrl:"https://github.com/hoffms/docs/tree/main/docs/concepts/protocol/metadata.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"metadata",title:"Metadata Validation",sidebar_position:3},sidebar:"conceptsSidebar",previous:{title:"Actions and Parameters",permalink:"/docs/concepts/protocol/actions"},next:{title:"Supported Chains",permalink:"/docs/concepts/protocol/chains"}},d={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Validation Functions",id:"validation-functions",level:2},{value:"<code>createMetadata(metadata: Metadata): ValidatedMetadata</code>",id:"createmetadatametadata-metadata-validatedmetadata",level:3},{value:"<code>validateMetadata(metadata: Metadata): ValidationResult</code>",id:"validatemetadatametadata-metadata-validationresult",level:3},{value:"What Gets Validated?",id:"what-gets-validated",level:2},{value:"Metadata Structure",id:"metadata-structure",level:3},{value:"Action Validation",id:"action-validation",level:3},{value:"BlockchainAction Validation",id:"blockchainaction-validation",level:4},{value:"TransferAction Validation",id:"transferaction-validation",level:4},{value:"HttpAction Validation",id:"httpaction-validation",level:4},{value:"DynamicAction Validation",id:"dynamicaction-validation",level:4},{value:"ActionFlow Validation",id:"actionflow-validation",level:4},{value:"Parameter Validation",id:"parameter-validation",level:3},{value:"Chain Validation",id:"chain-validation",level:3},{value:"Validation Examples",id:"validation-examples",level:2},{value:"Valid Metadata",id:"valid-metadata",level:3},{value:"Common Validation Errors",id:"common-validation-errors",level:3},{value:"Missing Required Fields",id:"missing-required-fields",level:4},{value:"Parameter Mismatch",id:"parameter-mismatch",level:4},{value:"Invalid Chain Configuration",id:"invalid-chain-configuration",level:4},{value:"Missing BaseUrl for Dynamic Action",id:"missing-baseurl-for-dynamic-action",level:4},{value:"Error Handling Best Practices",id:"error-handling-best-practices",level:2},{value:"1. Always Validate During Development",id:"1-always-validate-during-development",level:3},{value:"2. Use Try-Catch for Error Handling",id:"2-use-try-catch-for-error-handling",level:3},{value:"3. Provide Detailed Error Information in Development",id:"3-provide-detailed-error-information-in-development",level:3},{value:"4. Use validateMetadata for Detailed Debugging",id:"4-use-validatemetadata-for-detailed-debugging",level:3},{value:"Integration with Development Tools",id:"integration-with-development-tools",level:2},{value:"Sherry Debugger",id:"sherry-debugger",level:3},{value:"IDE Integration",id:"ide-integration",level:3},{value:"Unit Testing",id:"unit-testing",level:3}],c={toc:s};function p(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Trigger metadata defines how your dApp behaves, what actions it supports, and how users interact with it. Ensuring this metadata is valid is critical for delivering a reliable and consistent experience. "),(0,i.kt)("p",null,"This guide explains how to validate metadata, what gets validated, and how to debug common issues during development."),(0,i.kt)("p",null,"Validation ensures your Trigger dApp is correctly structured and prevents runtime errors."),(0,i.kt)("h2",{id:"validation-functions"},"Validation Functions"),(0,i.kt)("p",null,"The SDK exports two main functions for validation:"),(0,i.kt)("h3",{id:"createmetadatametadata-metadata-validatedmetadata"},(0,i.kt)("inlineCode",{parentName:"h3"},"createMetadata(metadata: Metadata): ValidatedMetadata")),(0,i.kt)("p",null,"Takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"Metadata")," object, validates it completely, and returns a processed ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidatedMetadata")," object."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Validates"),": Structure, action types, parameters, chains, ABI compatibility"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Processes"),": Infers parameter types from ABI, adds validation metadata"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Throws"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"SherryValidationError")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"InvalidMetadataError")," if validation fails"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"ValidatedMetadata")," with additional processed information")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createMetadata, Metadata } from '@sherrylinks/sdk';\n\nconst metadata: Metadata = {\n  url: 'https://myapp.example',\n  icon: 'https://example.com/icon.png',\n  title: 'My Mini App',\n  description: 'An awesome Web3 mini-app',\n  actions: [\n    {\n      type: 'blockchain',\n      label: 'Mint NFT',\n      address: '0x...',\n      abi: nftAbi,\n      functionName: 'safeMint',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'to',\n          label: 'Recipient',\n          type: 'address',\n          required: true,\n        },\n      ],\n    },\n  ],\n};\n\ntry {\n  const validatedMetadata = createMetadata(metadata);\n  console.log('\u2705 Metadata is valid and processed!');\n  // Use validatedMetadata for your mini-app\n} catch (error) {\n  console.error('\u274c Validation failed:', error.message);\n  // Handle validation errors\n}\n")),(0,i.kt)("h3",{id:"validatemetadatametadata-metadata-validationresult"},(0,i.kt)("inlineCode",{parentName:"h3"},"validateMetadata(metadata: Metadata): ValidationResult")),(0,i.kt)("p",null,"Validates metadata without throwing errors, returning a detailed result object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ValidationResult =\n  | { isValid: true; type: 'ValidatedMetadata'; data: ValidatedMetadata }\n  | { isValid: false; type: 'ValidationError'; errors: ValidationErrorInfo[] };\n\ninterface ValidationErrorInfo {\n  path: string;    // Path to the error (e.g., \"actions[0].params[1].name\")\n  message: string; // Descriptive error message\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { validateMetadata } from '@sherrylinks/sdk';\n\nconst result = validateMetadata(metadata);\n\nif (result.isValid) {\n  console.log('\u2705 Metadata is valid:', result.data);\n  // Use result.data\n} else {\n  console.error('\u274c Validation errors found:');\n  result.errors.forEach(error => {\n    console.error(`- ${error.path}: ${error.message}`);\n  });\n}\n")),(0,i.kt)("h2",{id:"what-gets-validated"},"What Gets Validated?"),(0,i.kt)("h3",{id:"metadata-structure"},"Metadata Structure"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"\u2705 Required fields: url, icon, title, description, actions\n\u2705 Field types: string validation for text fields\n\u2705 Actions array: non-empty, max 4 actions\n\u2705 BaseUrl format: valid URL if provided\n")),(0,i.kt)("h3",{id:"action-validation"},"Action Validation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"\u2705 Action types: 'blockchain', 'transfer', 'http', 'dynamic', 'flow'\n\u2705 Required properties per action type\n\u2705 Chain configuration validity\n\u2705 Cross-action consistency\n")),(0,i.kt)("h4",{id:"blockchainaction-validation"},"BlockchainAction Validation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"\u2705 Contract address: valid Ethereum address format\n\u2705 ABI structure: valid array of ABI objects\n\u2705 Function existence: functionName exists in ABI\n\u2705 Parameter compatibility: params match ABI inputs\n\u2705 Parameter order: matches ABI function signature\n\u2705 Amount field: only for payable functions\n\u2705 Type compatibility: parameter types match ABI types\n")),(0,i.kt)("h4",{id:"transferaction-validation"},"TransferAction Validation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"\u2705 Recipient address: valid if provided directly\n\u2705 Amount: positive number if provided directly\n\u2705 Chain support: valid source and destination chains\n\u2705 Configuration objects: recipient and amountConfig structure\n\u2705 Selection options: valid options for select/radio types\n")),(0,i.kt)("h4",{id:"httpaction-validation"},"HttpAction Validation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"\u2705 Path URL: valid URL format\n\u2705 Parameter structure: name, label, type validation\n\u2705 Option arrays: non-empty for select/radio parameters\n\u2705 Type-specific validation: email format, URL format, etc.\n")),(0,i.kt)("h4",{id:"dynamicaction-validation"},"DynamicAction Validation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"\u2705 Path validation: absolute URL or relative with baseUrl\n\u2705 BaseUrl dependency: relative paths require baseUrl in metadata\n\u2705 Parameter structure: same as other action types\n\u2705 Chain configuration: valid source chain\n")),(0,i.kt)("h4",{id:"actionflow-validation"},"ActionFlow Validation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"\u2705 Initial action: initialActionId exists in actions array\n\u2705 Unique IDs: no duplicate action IDs within flow\n\u2705 Reference integrity: all nextActionId references exist\n\u2705 Graph connectivity: all actions reachable from initial action\n\u2705 Nested action validation: each action validates according to its type\n\u2705 Completion actions: no nextActions allowed\n\u2705 Decision options: valid nextActionId for each option\n")),(0,i.kt)("h3",{id:"parameter-validation"},"Parameter Validation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"\u2705 Required fields: name, label, type\n\u2705 Type compatibility: UI types vs ABI types for blockchain actions\n\u2705 Constraint validation: min/max, minLength/maxLength\n\u2705 Pattern validation: regex patterns are valid\n\u2705 Option validation: non-empty arrays for select/radio\n\u2705 Value compatibility: default/fixed values match expected types\n\u2705 Selection consistency: values exist in options for select/radio\n")),(0,i.kt)("h3",{id:"chain-validation"},"Chain Validation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"\u2705 Supported chains: 'fuji', 'avalanche', 'alfajores', 'celo', 'ethereum', 'sepolia'\n\u2705 Source chain: always required\n\u2705 Destination chain: optional, valid if provided\n\u2705 Cross-chain logic: proper source/destination combination\n")),(0,i.kt)("h2",{id:"validation-examples"},"Validation Examples"),(0,i.kt)("h3",{id:"valid-metadata"},"Valid Metadata"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const validMetadata: Metadata = {\n  url: 'https://myapp.example/api/mint',\n  icon: 'https://myapp.example/icon.png',\n  title: 'NFT Minter',\n  description: 'Mint your unique NFT',\n  actions: [\n    {\n      type: 'blockchain',\n      label: 'Mint NFT',\n      address: '0x5ee75a1B1648C023e885E58bD3735Ae273f2cc52',\n      abi: [\n        {\n          name: 'safeMint',\n          type: 'function',\n          stateMutability: 'payable',\n          inputs: [\n            { name: 'to', type: 'address' },\n            { name: 'tokenURI', type: 'string' },\n          ],\n          outputs: [{ name: 'tokenId', type: 'uint256' }],\n        },\n      ],\n      functionName: 'safeMint',\n      chains: { source: 'avalanche' },\n      amount: 0.1,\n      params: [\n        {\n          name: 'to',\n          label: 'Recipient Address',\n          type: 'address',\n          required: true,\n        },\n        {\n          name: 'tokenURI',\n          label: 'Token URI',\n          type: 'string',\n          required: true,\n          value: 'ipfs://QmHash',\n          fixed: true,\n        },\n      ],\n    },\n  ],\n};\n\n// This will validate successfully\nconst validated = createMetadata(validMetadata);\n")),(0,i.kt)("h3",{id:"common-validation-errors"},"Common Validation Errors"),(0,i.kt)("h4",{id:"missing-required-fields"},"Missing Required Fields"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const invalidMetadata = {\n  // Missing required fields\n  title: 'My App',\n  actions: [],\n};\n\n// Error: \"Metadata missing required 'url' field\"\n// Error: \"Metadata missing required 'icon' field\"\n// Error: \"Metadata missing required 'description' field\"\n// Error: \"Metadata must include at least one action\"\n")),(0,i.kt)("h4",{id:"parameter-mismatch"},"Parameter Mismatch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const invalidAction = {\n  type: 'blockchain',\n  label: 'Transfer',\n  address: '0x...',\n  abi: [\n    {\n      name: 'transfer',\n      inputs: [\n        { name: 'to', type: 'address' },\n        { name: 'amount', type: 'uint256' },\n      ],\n    },\n  ],\n  functionName: 'transfer',\n  chains: { source: 'avalanche' },\n  params: [\n    // Wrong order! Should be 'to' first, then 'amount'\n    {\n      name: 'amount',\n      label: 'Amount',\n      type: 'uint256',\n    },\n    {\n      name: 'to',\n      label: 'Recipient',\n      type: 'address',\n    },\n  ],\n};\n\n// Error: \"Parameter name mismatch at index 0. Expected 'to', received 'amount'\"\n")),(0,i.kt)("h4",{id:"invalid-chain-configuration"},"Invalid Chain Configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const invalidChain = {\n  type: 'transfer',\n  label: 'Send Tokens',\n  chains: { source: 'invalid-chain' }, // Invalid chain\n  amount: 0.1,\n};\n\n// Error: \"Invalid source chain: invalid-chain\"\n")),(0,i.kt)("h4",{id:"missing-baseurl-for-dynamic-action"},"Missing BaseUrl for Dynamic Action"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const invalidDynamic: Metadata = {\n  url: 'https://myapp.example',\n  icon: 'https://example.com/icon.png',\n  title: 'Dynamic App',\n  description: 'App with dynamic action',\n  // Missing baseUrl!\n  actions: [\n    {\n      type: 'dynamic',\n      label: 'Dynamic Action',\n      path: '/api/dynamic', // Relative path but no baseUrl\n      chains: { source: 'avalanche' },\n    },\n  ],\n};\n\n// Error: \"Dynamic action has a relative path '/api/dynamic' but no baseUrl is provided\"\n")),(0,i.kt)("h2",{id:"error-handling-best-practices"},"Error Handling Best Practices"),(0,i.kt)("h3",{id:"1-always-validate-during-development"},"1. Always Validate During Development"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createMetadata } from '@sherrylinks/sdk';\n\n// Validate early in development\nconst metadata = createMetadata(myMetadata);\n")),(0,i.kt)("h3",{id:"2-use-try-catch-for-error-handling"},"2. Use Try-Catch for Error Handling"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"try {\n  const validated = createMetadata(metadata);\n  return NextResponse.json(validated);\n} catch (error) {\n  console.error('Validation error:', error);\n  return NextResponse.json({ error: 'Invalid metadata configuration' }, { status: 500 });\n}\n")),(0,i.kt)("h3",{id:"3-provide-detailed-error-information-in-development"},"3. Provide Detailed Error Information in Development"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"if (process.env.NODE_ENV === 'development') {\n  try {\n    const validated = createMetadata(metadata);\n    return NextResponse.json(validated);\n  } catch (error) {\n    return NextResponse.json(\n      {\n        error: 'Validation failed',\n        details: error.message,\n        validationErrors: error.validationErrors || [],\n      },\n      { status: 500 },\n    );\n  }\n}\n")),(0,i.kt)("h3",{id:"4-use-validatemetadata-for-detailed-debugging"},"4. Use validateMetadata for Detailed Debugging"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = validateMetadata(metadata);\nif (!result.isValid) {\n  console.log('Validation errors:');\n  result.errors.forEach(error => {\n    console.log(`\u274c ${error.path}: ${error.message}`);\n  });\n}\n")),(0,i.kt)("h2",{id:"integration-with-development-tools"},"Integration with Development Tools"),(0,i.kt)("h3",{id:"sherry-debugger"},"Sherry Debugger"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://app.sherry.social/debugger"},"Sherry Debugger")," provides visual validation:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"URL Mode"),": Test your deployed endpoint"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"JSON Mode"),": Paste metadata JSON directly"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"TypeScript Mode"),": Validate your metadata code")),(0,i.kt)("h3",{id:"ide-integration"},"IDE Integration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Use TypeScript for compile-time validation\nimport { Metadata } from '@sherrylinks/sdk';\n\nconst metadata: Metadata = {\n  // TypeScript will catch missing required fields\n  url: 'https://myapp.example',\n  icon: 'https://example.com/icon.png',\n  title: 'My App',\n  description: 'Description',\n  actions: [\n    // TypeScript will validate action structure\n  ],\n};\n")),(0,i.kt)("h3",{id:"unit-testing"},"Unit Testing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { validateMetadata, createMetadata } from '@sherrylinks/sdk';\n\ndescribe('Metadata Validation', () => {\n  test('valid metadata should pass validation', () => {\n    const result = validateMetadata(validMetadata);\n    expect(result.isValid).toBe(true);\n  });\n\n  test('invalid metadata should fail validation', () => {\n    const result = validateMetadata(invalidMetadata);\n    expect(result.isValid).toBe(false);\n    expect(result.errors.length).toBeGreaterThan(0);\n  });\n\n  test('createMetadata should throw on invalid input', () => {\n    expect(() => createMetadata(invalidMetadata)).toThrow();\n  });\n});\n")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Proper validation ensures your Trigger dApps work reliably across all platforms and provides clear feedback during development. Always validate your metadata before deployment!"))}p.isMDXComponent=!0},3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>u});var n=t(67294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=n.createContext({}),s=function(e){var a=n.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},c=function(e){var a=s(e.components);return n.createElement(d.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),u=i,v=m["".concat(d,".").concat(u)]||m[u]||p[u]||r;return t?n.createElement(v,o(o({ref:a},c),{},{components:t})):n.createElement(v,o({ref:a},c))}));function u(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var d in a)hasOwnProperty.call(a,d)&&(l[d]=a[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);