"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[25665],{66587:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(83117),i=(n(67294),n(3905));const o={title:"Flash Accounting"},r="Flash Accounting",l={unversionedId:"contracts/v4/concepts/flash-accounting",id:"contracts/v4/concepts/flash-accounting",title:"Flash Accounting",description:"In previous versions of Uniswap, every time a swap was made - including multi-hop swap - tokens were transferred between Pool contracts for intermediate steps.",source:"@site/docs/contracts/v4/concepts/02-flash-accounting.mdx",sourceDirName:"contracts/v4/concepts",slug:"/contracts/v4/concepts/flash-accounting",permalink:"/docs/contracts/v4/concepts/flash-accounting",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v4/concepts/02-flash-accounting.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Flash Accounting"},sidebar:"contractsSidebar",previous:{title:"v4 vs v3",permalink:"/docs/contracts/v4/concepts/v4-vs-v3"},next:{title:"ERC-6909",permalink:"/docs/contracts/v4/concepts/erc6909"}},p={},s=[{value:"Mechanism",id:"mechanism",level:2},{value:"Locking",id:"locking",level:3},{value:"Balance Delta",id:"balance-delta",level:3},{value:"Swapping",id:"swapping",level:2},{value:"Previously on v3",id:"previously-on-v3",level:3},{value:"Now on v4",id:"now-on-v4",level:3},{value:"Liquidity Management",id:"liquidity-management",level:2},{value:"Developer Resources",id:"developer-resources",level:2}],c={toc:s};function d(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"flash-accounting"},"Flash Accounting"),(0,i.kt)("p",null,"In previous versions of Uniswap, every time a swap was made - including multi-hop swap - tokens were transferred between Pool contracts for intermediate steps."),(0,i.kt)("p",null,"This design incurred inefficiencies because transferring tokens with external calls to their smart contracts - especially in a multi-hop swap - is quite expensive. This design was required since each pool was its own contract and token transfers were required to maintain accounting and solvency."),(0,i.kt)("p",null,"With the singleton architecture, a better design was possible and is referred to as ",(0,i.kt)("em",{parentName:"p"},"Flash Accounting"),". The design became practical with gas efficiencies of ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1153"},"Transient Storage"),". ",(0,i.kt)("em",{parentName:"p"},"Flash Accounting")," further reduces the gas cost of trades that cross multiple pools and supports more complex integrations with Uniswap v4."),(0,i.kt)("p",null,"With ",(0,i.kt)("em",{parentName:"p"},"flash accounting"),", each balance-changing operation (e.g. swap and liquidity modification) updates an internal net balance known as ",(0,i.kt)("inlineCode",{parentName:"p"},"delta"),". Only the final balance-changes require token transfers."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Flash Accounting Step 1",src:n(99395).Z,width:"1656",height:"621"}),"\n",(0,i.kt)("img",{loading:"lazy",alt:"Flash Accounting Step 2",src:n(68872).Z,width:"1656",height:"621"})),(0,i.kt)("p",null,"For example from the above diagrams - let's say you have 20 ",(0,i.kt)("inlineCode",{parentName:"p"},"USDC")," and 20 ",(0,i.kt)("inlineCode",{parentName:"p"},"USDT")," but you want to add liquidity with 15 ",(0,i.kt)("inlineCode",{parentName:"p"},"USDC")," and 25 ",(0,i.kt)("inlineCode",{parentName:"p"},"USDT"),". Previously this would require multiple external calls as tokens were transferred between Pool contracts when swapping from ",(0,i.kt)("inlineCode",{parentName:"p"},"USDC")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"USDT"),". But now with v4's Flash Accounting we only need to keep track of ",(0,i.kt)("inlineCode",{parentName:"p"},"delta")," - thus we can ",(0,i.kt)("inlineCode",{parentName:"p"},"swap")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"modifyLiquidity")," in a single call and only the final balance-changes involve actual token transfers."),(0,i.kt)("p",null,"In the above example, we are swapping 5 USDC to 5 USDT to create liquidity with 15 USDC and 25 USDT. In between the operations (",(0,i.kt)("em",{parentName:"p"},"swap, modifyLiquidity"),"), no token transfers are made"),(0,i.kt)("h2",{id:"mechanism"},"Mechanism"),(0,i.kt)("h3",{id:"locking"},"Locking"),(0,i.kt)("p",null,"To ensure correctness and atomicity in complex operations like a multi-hop swap - v4 uses a locking mechanism. Anytime key actions need to take place within the ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolManager")," - e.g. swaps and liquidity modification - a periphery contract must ",(0,i.kt)("inlineCode",{parentName:"p"},"unlock")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolManager")," first. Then integrators implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"unlockCallback")," and proceed with any of the following actions on the pools:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"swap"),(0,i.kt)("li",{parentName:"ul"},"modifyLiquidity"),(0,i.kt)("li",{parentName:"ul"},"donate"),(0,i.kt)("li",{parentName:"ul"},"take"),(0,i.kt)("li",{parentName:"ul"},"settle"),(0,i.kt)("li",{parentName:"ul"},"mint"),(0,i.kt)("li",{parentName:"ul"},"burn"),(0,i.kt)("li",{parentName:"ul"},"sync")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note that pool initialization can happen outside the context of unlocking the ",(0,i.kt)("inlineCode",{parentName:"em"},"PoolManager"),", as there are no balance-changing operations associated with pool creation.")),(0,i.kt)("p",null,"The following diagrams visualize how the above steps will be implemented:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"unlock")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolManager"),"\n",(0,i.kt)("img",{loading:"lazy",alt:"Flash Accounting Locking Mechanism Step 1",src:n(13036).Z,width:"1656",height:"1069"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Implement ",(0,i.kt)("inlineCode",{parentName:"p"},"unlockCallback")," and proceed with any desired pool actions\n",(0,i.kt)("img",{loading:"lazy",alt:"Flash Accounting Locking Mechanism Step 2",src:n(25405).Z,width:"1656",height:"1069"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The actual token transfer happens at the end and the ",(0,i.kt)("em",{parentName:"p"},"delta")," should be resolved\n",(0,i.kt)("img",{loading:"lazy",alt:"Flash Accounting Locking Mechanism Step 3",src:n(5938).Z,width:"1656",height:"1069"})))),(0,i.kt)("h3",{id:"balance-delta"},"Balance Delta"),(0,i.kt)("p",null,"Inside ",(0,i.kt)("inlineCode",{parentName:"p"},"unlockCallback"),", a periphery contract performs balance-changing operations i.e. conduct swaps, modify positions, etc. After returning execution context back to ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolManager"),", the core contract checks that balances are resolved - nothing is owed to or from the ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolManager"),"."),(0,i.kt)("p",null,"The balances resolved above is what we refer as the ",(0,i.kt)("inlineCode",{parentName:"p"},"delta"),", a field held in the ",(0,i.kt)("em",{parentName:"p"},"transient")," state. The value(s) represent the ",(0,i.kt)("em",{parentName:"p"},"debts")," and ",(0,i.kt)("em",{parentName:"p"},"credits")," of assets owed to or from the ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolManager"),"."),(0,i.kt)("h2",{id:"swapping"},"Swapping"),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Multi-hop swaps on V3 vs V4",src:n(68623).Z,width:"1656",height:"1389"})),(0,i.kt)("p",null,"As shown in the above diagram, for example - let's say you want to swap ",(0,i.kt)("inlineCode",{parentName:"p"},"ETH")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"DAI"),". Assuming this requires a multi-hop swap going from ",(0,i.kt)("inlineCode",{parentName:"p"},"ETH")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"USDC")," and then from ",(0,i.kt)("inlineCode",{parentName:"p"},"USDC")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"DAI"),"."),(0,i.kt)("h3",{id:"previously-on-v3"},"Previously on v3"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ETH")," is transferred to ",(0,i.kt)("inlineCode",{parentName:"p"},"ETH <> USDC")," pool contract")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"USDC")," is withdrawn from ",(0,i.kt)("inlineCode",{parentName:"p"},"ETH <> USDC")," contract and transferred to ",(0,i.kt)("inlineCode",{parentName:"p"},"USDC <> DAI")," contract")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"DAI")," is withdrawn from ",(0,i.kt)("inlineCode",{parentName:"p"},"USDC <> DAI")," contract and transferred to the user"))),(0,i.kt)("h3",{id:"now-on-v4"},"Now on v4"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"swap()")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"ETH <> USDC"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"swap()")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"USDC <> DAI"),", with the credit of USDC from above being used as the input amount")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"User ",(0,i.kt)("em",{parentName:"p"},"resolves deltas")," by paying ETH and receiving DAI"))),(0,i.kt)("p",null,"Therefore we can skip the step of actually calling ",(0,i.kt)("inlineCode",{parentName:"p"},"transfer()")," on the USDC contract."),(0,i.kt)("p",null,"The optimization scales infinitely, any number of arbitrary hops only requires two token transfers - input and output tokens."),(0,i.kt)("h2",{id:"liquidity-management"},"Liquidity Management"),(0,i.kt)("p",null,"The optimization becomes more evident for complex liquidity operations"),(0,i.kt)("p",null,"For example, a user wanted to add liquidity to ",(0,i.kt)("inlineCode",{parentName:"p"},"ETH <> DAI")," but does not have DAI. The user can swap some ",(0,i.kt)("inlineCode",{parentName:"p"},"ETH")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"DAI")," in order to add liquidity with both tokens. In addition, the user can multi-hop swap going from ",(0,i.kt)("inlineCode",{parentName:"p"},"ETH")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"USDC")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"DAI"),". If properly integrated, the user would only need to transfer ETH ",(0,i.kt)("em",{parentName:"p"},"once"),"."),(0,i.kt)("h2",{id:"developer-resources"},"Developer Resources"),(0,i.kt)("p",null,"To see how unlock callback and delta work in a smart contract read ",(0,i.kt)("a",{parentName:"p",href:"/contracts/v4/guides/unlock-callback"},"Unlock Callback & Deltas"),"."))}d.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,k=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(k,r(r({ref:t},c),{},{components:n})):a.createElement(k,r({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},99395:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Uniswap_V4_Flash_Accounting_Step_1-71d64338384cb73364925587396d8d5f.png"},68872:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Uniswap_V4_Flash_Accounting_Step_2-770f0dca21de8c10ee7f06e1ee612221.png"},13036:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Uniswap_V4_Locking_Mechanism_Step_1-b43f0f771bd96d5f27408f50163b647d.png"},25405:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Uniswap_V4_Locking_Mechanism_Step_2-604a919c08b4a3b1aa007eddc8b93e15.png"},5938:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Uniswap_V4_Locking_Mechanism_Step_3-2b14380fa2ba26d5a8b30bd357a8b340.png"},68623:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Uniswap_V4_Multihop_Swaps-fdb63a2ba35f069c05357c78be817fe1.png"}}]);