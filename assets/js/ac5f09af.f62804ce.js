"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[459],{47394:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var n=a(83117),i=(a(67294),a(3905));const r={title:"Create Pool"},l=void 0,o={unversionedId:"contracts/v4/quickstart/create-pool",id:"contracts/v4/quickstart/create-pool",title:"Create Pool",description:"Context",source:"@site/docs/contracts/v4/quickstart/01-create-pool.mdx",sourceDirName:"contracts/v4/quickstart",slug:"/contracts/v4/quickstart/create-pool",permalink:"/docs/contracts/v4/quickstart/create-pool",editUrl:"https://github.com/hoffms/docs/tree/main/docs/contracts/v4/quickstart/01-create-pool.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Create Pool"},sidebar:"contractsSidebar",previous:{title:"Integrated Routing with UniswapX",permalink:"/docs/contracts/v4/concepts/integrated-routing-uniswap-x"},next:{title:"Setup",permalink:"/docs/contracts/v4/quickstart/manage-liquidity/setup-liquidity"}},p={},s=[{value:"Context",id:"context",level:2},{value:"Setup",id:"setup",level:3},{value:"Guide: Create a Pool Only",id:"guide-create-a-pool-only",level:2},{value:"1. Configure the Pool",id:"1-configure-the-pool",level:3},{value:"2. Call <code>initialize</code>",id:"2-call-initialize",level:3},{value:"Guide: Create a Pool &amp; Add Liquidity",id:"guide-create-a-pool--add-liquidity",level:2},{value:"1. Initialize the parameters provided to <code>multicall()</code>",id:"1-initialize-the-parameters-provided-to-multicall",level:3},{value:"2. Configure the pool",id:"2-configure-the-pool",level:3},{value:"3. Encode the <code>initializePool</code> parameters",id:"3-encode-the-initializepool-parameters",level:3},{value:"4. Initialize the <em>mint-liquidity</em> parameters",id:"4-initialize-the-mint-liquidity-parameters",level:3},{value:"5. Encode the <code>MINT_POSITION</code> parameters",id:"5-encode-the-mint_position-parameters",level:3},{value:"6. Encode the <code>SETTLE_PAIR</code> parameters",id:"6-encode-the-settle_pair-parameters",level:3},{value:"7. Encode the <code>modifyLiquidites</code> call",id:"7-encode-the-modifyliquidites-call",level:3},{value:"8. Approve the tokens",id:"8-approve-the-tokens",level:3},{value:"9. Execute the multicall",id:"9-execute-the-multicall",level:3}],c={toc:s};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"context"},"Context"),(0,i.kt)("p",null,"Creating a pool on Uniswap v4 is permissionless and enables the trading of an asset. Uniswap v4 is a popular destination for creating markets due to its:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Proven track record and battle-tested codebase"),(0,i.kt)("li",{parentName:"ul"},"Concentrated liquidity, unlocking capital efficiency"),(0,i.kt)("li",{parentName:"ul"},"Flexibile pool design through dynamic fees and hooks"),(0,i.kt)("li",{parentName:"ul"},"Gas-efficient architecture"),(0,i.kt)("li",{parentName:"ul"},"Integrations with alternative trading venues")),(0,i.kt)("p",null,"For more information, developers should see ",(0,i.kt)("a",{parentName:"p",href:"/contracts/v4/overview"},"Uniswap v4 Overview")),(0,i.kt)("p",null,"The guide covers two approaches to creating a pool:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a pool only"),(0,i.kt)("li",{parentName:"ol"},"Create a pool and add initial liquidity, with one transaction")),(0,i.kt)("h3",{id:"setup"},"Setup"),(0,i.kt)("p",null,"Developing with Uniswap v4 ",(0,i.kt)("em",{parentName:"p"},"requires ",(0,i.kt)("a",{parentName:"em",href:"https://book.getfoundry.sh"},"foundry"))),(0,i.kt)("p",null,"Install the dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"forge install uniswap/v4-core\nforge install uniswap/v4-periphery\n")),(0,i.kt)("h2",{id:"guide-create-a-pool-only"},"Guide: Create a Pool Only"),(0,i.kt)("p",null,"To initialize a Uniswap v4 Pool ",(0,i.kt)("em",{parentName:"p"},"without initial liquidity"),", developers should call ",(0,i.kt)("a",{parentName:"p",href:"/contracts/v4/reference/core/interfaces/IPoolManager#initialize"},(0,i.kt)("inlineCode",{parentName:"a"},"PoolManager.initialize()"))),(0,i.kt)("p",null,'Creating a pool without liquidity may be useful for "reserving" a pool for future use, when initial liquidity is not available, or when external market makers would provide the starting liquidity'),(0,i.kt)("h3",{id:"1-configure-the-pool"},"1. Configure the Pool"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'import {PoolKey} from "v4-core/src/types/PoolKey.sol";\n\nPoolKey memory pool = PoolKey({\n    currency0: currency0,\n    currency1: currency1,\n    fee: lpFee,\n    tickSpacing: tickSpacing,\n    hooks: hookContract\n});\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"For native token pairs (Ether), use ",(0,i.kt)("inlineCode",{parentName:"p"},"CurrencyLibrary.ADDRESS_ZERO")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"currency0"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/contracts/v4/reference/core/types/PoolKey"},"PoolKey")," uniquely identifies a pool"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Currencies")," should be sorted, ",(0,i.kt)("inlineCode",{parentName:"li"},"uint160(currency0) < uint160(currency1)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"lpFee")," is the fee expressed in pips, i.e. 3000 = 0.30%"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"tickSpacing")," is the granularity of the pool. Lower values are more precise but may be more expensive to trade on"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"hookContract")," is the address of the hook contract")),(0,i.kt)("p",null,"A note on ",(0,i.kt)("inlineCode",{parentName:"p"},"tickSpacing"),":"),(0,i.kt)("p",null,"Lower tick spacing provides improved price precision; however, smaller tick spaces will cause swaps to cross ticks more often, incurring higher gas costs"),(0,i.kt)("p",null,"As a reference, Uniswap v3 pools are configured with:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Fee"),(0,i.kt)("th",{parentName:"tr",align:null},"Fee Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Tick Spacing"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0.01%"),(0,i.kt)("td",{parentName:"tr",align:null},"100"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0.05%"),(0,i.kt)("td",{parentName:"tr",align:null},"500"),(0,i.kt)("td",{parentName:"tr",align:null},"10")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0.30%"),(0,i.kt)("td",{parentName:"tr",align:null},"3000"),(0,i.kt)("td",{parentName:"tr",align:null},"60")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1.00%"),(0,i.kt)("td",{parentName:"tr",align:null},"10_000"),(0,i.kt)("td",{parentName:"tr",align:null},"200")))),(0,i.kt)("h3",{id:"2-call-initialize"},"2. Call ",(0,i.kt)("inlineCode",{parentName:"h3"},"initialize")),(0,i.kt)("p",null,"Pools are initialized with a starting price"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"IPoolManager(manager).initialize(pool, startingPrice);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("em",{parentName:"li"},"startingPrice")," is expressed as sqrtPriceX96: ",(0,i.kt)("inlineCode",{parentName:"li"},"floor(sqrt(token1 / token0) * 2^96)"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"i.e. ",(0,i.kt)("inlineCode",{parentName:"li"},"79228162514264337593543950336")," is the starting price for a 1:1 pool")))),(0,i.kt)("h2",{id:"guide-create-a-pool--add-liquidity"},"Guide: Create a Pool & Add Liquidity"),(0,i.kt)("p",null,"Uniswap v4's ",(0,i.kt)("a",{parentName:"p",href:"/contracts/v4/reference/periphery/PositionManager"},"PositionManager")," supports atomic creation of a pool and initial liquidity using ",(0,i.kt)("a",{parentName:"p",href:"/contracts/v4/reference/periphery/base/Multicall_v4"},(0,i.kt)("em",{parentName:"a"},"multicall")),". Developers can create a trading pool, with liquidity, in a single transaction:"),(0,i.kt)("h3",{id:"1-initialize-the-parameters-provided-to-multicall"},"1. Initialize the parameters provided to ",(0,i.kt)("inlineCode",{parentName:"h3"},"multicall()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes[] memory params = new bytes[](2);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The first call, ",(0,i.kt)("inlineCode",{parentName:"li"},"params[0]"),", will encode ",(0,i.kt)("inlineCode",{parentName:"li"},"initializePool")," parameters"),(0,i.kt)("li",{parentName:"ul"},"The second call, ",(0,i.kt)("inlineCode",{parentName:"li"},"params[1]"),", will encode a ",(0,i.kt)("em",{parentName:"li"},"mint")," operation for ",(0,i.kt)("inlineCode",{parentName:"li"},"modifyLiquidities"))),(0,i.kt)("h3",{id:"2-configure-the-pool"},"2. Configure the pool"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"PoolKey memory pool = PoolKey({\n    currency0: currency0,\n    currency1: currency1,\n    fee: lpFee,\n    tickSpacing: tickSpacing,\n    hooks: hookContract\n});\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"For native token pairs (Ether), use ",(0,i.kt)("inlineCode",{parentName:"p"},"CurrencyLibrary.ADDRESS_ZERO")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"currency0"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/contracts/v4/reference/core/types/PoolKey"},"PoolKey")," uniquely identifies a pool"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Currencies")," should be sorted, ",(0,i.kt)("inlineCode",{parentName:"li"},"uint160(currency0) < uint160(currency1)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"lpFee")," is the fee expressed in pips, i.e. 3000 = 0.30%"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"tickSpacing")," is the granularity of the pool. Lower values are more precise but more expensive to trade"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"hookContract")," is the address of the hook contract")),(0,i.kt)("h3",{id:"3-encode-the-initializepool-parameters"},"3. Encode the ",(0,i.kt)("a",{parentName:"h3",href:"/contracts/v4/reference/periphery/base/PoolInitializer"},(0,i.kt)("inlineCode",{parentName:"a"},"initializePool"))," parameters"),(0,i.kt)("p",null,"Pools are initialized with a starting price"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'import {IPoolInitializer_v4} from "v4-periphery/src/interfaces/IPoolInitializer_v4.sol";\n\nparams[0] = abi.encodeWithSelector(\n    IPoolInitializer_v4.initializePool.selector,\n    pool,\n    startingPrice\n);\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("em",{parentName:"li"},"startingPrice")," is expressed as ",(0,i.kt)("em",{parentName:"li"},"sqrtPriceX96"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"floor(sqrt(token1 / token0) * 2^96)"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"79228162514264337593543950336")," is the starting price for a 1:1 pool")))),(0,i.kt)("h3",{id:"4-initialize-the-mint-liquidity-parameters"},"4. Initialize the ",(0,i.kt)("em",{parentName:"h3"},"mint-liquidity")," parameters"),(0,i.kt)("p",null,"PositionManager's ",(0,i.kt)("inlineCode",{parentName:"p"},"modifyLiquidities")," uses an encoded command system"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes memory actions = abi.encodePacked(uint8(Actions.MINT_POSITION), uint8(Actions.SETTLE_PAIR));\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The first command ",(0,i.kt)("inlineCode",{parentName:"li"},"MINT_POSITION")," creates a new liquidity position"),(0,i.kt)("li",{parentName:"ul"},"The second command ",(0,i.kt)("inlineCode",{parentName:"li"},"SETTLE_PAIR")," indicates that tokens are to be paid by the caller, to create the position")),(0,i.kt)("h3",{id:"5-encode-the-mint_position-parameters"},"5. Encode the ",(0,i.kt)("inlineCode",{parentName:"h3"},"MINT_POSITION")," parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes[] memory mintParams = new bytes[](2);\nmintParams[0] = abi.encode(pool, tickLower, tickUpper, liquidity, amount0Max, amount1Max, recipient, hookData);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"pool")," the same ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolKey")," defined above, in pool-creation"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"tickLower")," and ",(0,i.kt)("em",{parentName:"li"},"tickUpper")," are the range of the position, must be a multiple of ",(0,i.kt)("inlineCode",{parentName:"li"},"pool.tickSpacing")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"liquidity")," is the amount of liquidity units to add, see ",(0,i.kt)("inlineCode",{parentName:"li"},"LiquidityAmounts")," for converting token amounts to liquidity units"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"amount0Max")," and ",(0,i.kt)("em",{parentName:"li"},"amount1Max")," are the maximum amounts of token0 and token1 the caller is willing to transfer"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"recipient")," is the address that will receive the liquidity position (ERC-721)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"hookData")," is the optional hook data")),(0,i.kt)("h3",{id:"6-encode-the-settle_pair-parameters"},"6. Encode the ",(0,i.kt)("inlineCode",{parentName:"h3"},"SETTLE_PAIR")," parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Creating a position on a pool requires the caller to transfer `currency0` and `currency1` tokens\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"mintParams[1] = abi.encode(pool.currency0, pool.currency1);\n")),(0,i.kt)("h3",{id:"7-encode-the-modifyliquidites-call"},"7. Encode the ",(0,i.kt)("a",{parentName:"h3",href:"/contracts/v4/reference/periphery/PositionManager#modifyliquidities"},(0,i.kt)("inlineCode",{parentName:"a"},"modifyLiquidites"))," call"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 deadline = block.timestamp + 60;\nparams[1] = abi.encodeWithSelector(\n    posm.modifyLiquidities.selector, abi.encode(actions, mintParams), deadline\n);\n")),(0,i.kt)("h3",{id:"8-approve-the-tokens"},"8. Approve the tokens"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PositionManager")," uses ",(0,i.kt)("inlineCode",{parentName:"p"},"Permit2")," for token transfers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Repeat for both tokens")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// approve permit2 as a spender\nIERC20(token).approve(address(permit2), type(uint256).max);\n\n// approve `PositionManager` as a spender\nIAllowanceTransfer(address(permit2)).approve(token, address(positionManager), type(uint160).max, type(uint48).max);\n")),(0,i.kt)("h3",{id:"9-execute-the-multicall"},"9. Execute the multicall"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"multicall")," is used to execute multiple calls in a single transaction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"PositionManager(posm).multicall(params);\n")),(0,i.kt)("p",null,"For pools paired with native tokens (Ether), provide ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," in the contract call"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"PositionManager(posm).multicall{value: ethToSend}(params);\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Excess Ether is ",(0,i.kt)("strong",{parentName:"p"},"NOT")," refunded unless developers encoded ",(0,i.kt)("inlineCode",{parentName:"p"},"SWEEP")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"actions")," parameter")),(0,i.kt)("p",null,"For a full end-to-end script, developers should see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/uniswapfoundation/v4-template/tree/main/script"},"v4-template's scripts")))}u.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(a),d=i,k=m["".concat(p,".").concat(d)]||m[d]||u[d]||r;return a?n.createElement(k,l(l({ref:t},c),{},{components:a})):n.createElement(k,l({ref:t},c))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);