"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[8856],{24358:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(83117),i=(n(67294),n(3905));const o={title:"StateView"},r="Introduction",l={unversionedId:"contracts/v4/guides/state-view",id:"contracts/v4/guides/state-view",title:"StateView",description:"When building on Uniswap v4, you will often need to read pool state for both onchain and offchain use cases. Onchain contracts can directly invoke the StateLibrary to execute these reads during transactions, but offchain systems\u2014such as frontends or analytics services\u2014require a deployed contract with view functions. This is where StateView comes in.",source:"@site/docs/contracts/v4/guides/12-state-view.mdx",sourceDirName:"contracts/v4/guides",slug:"/contracts/v4/guides/state-view",permalink:"/docs/contracts/v4/guides/state-view",editUrl:"https://github.com/hoffms/docs/tree/main/docs/contracts/v4/guides/12-state-view.mdx",tags:[],version:"current",sidebarPosition:12,frontMatter:{title:"StateView"},sidebar:"contractsSidebar",previous:{title:"Position Manager",permalink:"/docs/contracts/v4/guides/position-manager"},next:{title:"Flash Accounting",permalink:"/docs/contracts/v4/guides/flash-accounting"}},s={},c=[{value:"Comparing onchain and offchain Access",id:"comparing-onchain-and-offchain-access",level:2},{value:"Setting Up With Viem",id:"setting-up-with-viem",level:2},{value:"Handling Errors and Invalid Pool IDs",id:"handling-errors-and-invalid-pool-ids",level:3},{value:"Getting Pool State",id:"getting-pool-state",level:2},{value:"Getting Pool Liquidity",id:"getting-pool-liquidity",level:2},{value:"Note on <code>poolId</code> and <code>positionId</code>",id:"note-on-poolid-and-positionid",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"When building on ",(0,i.kt)("strong",{parentName:"p"},"Uniswap v4"),", you will often need to read pool state for both onchain and offchain use cases. Onchain contracts can directly invoke the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/v4-core/blob/main/src/libraries/StateLibrary.sol"},(0,i.kt)("strong",{parentName:"a"},"StateLibrary"))," to execute these reads during transactions, but offchain systems\u2014such as frontends or analytics services\u2014require a deployed contract with view functions. This is where ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/v4-periphery/blob/main/src/lens/StateView.sol"},(0,i.kt)("strong",{parentName:"a"},"StateView"))," comes in."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("em",{parentName:"p"},"In short: Use StateLibrary within onchain contracts and use StateView with an RPC for frontends and analytics."))),(0,i.kt)("p",null,"By providing a dedicated interface for offchain reads, ",(0,i.kt)("strong",{parentName:"p"},"StateView")," helps:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Retrieve pool state without paying gas"),(0,i.kt)("li",{parentName:"ul"},"Simplify integration for frontends, dashboards, and analytics"),(0,i.kt)("li",{parentName:"ul"},"Ensure a clean separation between onchain logic and offchain queries")),(0,i.kt)("h2",{id:"comparing-onchain-and-offchain-access"},"Comparing onchain and offchain Access"),(0,i.kt)("p",null,"If you\u2019re familiar with ",(0,i.kt)("a",{parentName:"p",href:"/contracts/v4/guides/read-pool-state"},"Reading Pool State"),", you already know that Uniswap v4 uses ",(0,i.kt)("strong",{parentName:"p"},"extsload")," for efficient data access. For onchain usage, we rely on ",(0,i.kt)("strong",{parentName:"p"},"StateLibrary")," within contracts. However, offchain clients cannot rely on an onchain library for state reads. "),(0,i.kt)("p",null,"Instead, ",(0,i.kt)("strong",{parentName:"p"},"StateView")," provides these same calls in a single contract designed explicitly for offchain consumption."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("em",{parentName:"p"},"Because StateLibrary operates via onchain function calls, it\u2019s not directly accessible to offchain clients. Hence, StateView provides a simple, gas-free interface designed for frontends and analytics."))),(0,i.kt)("p",null,"For instance, an onchain contract might use the ",(0,i.kt)("inlineCode",{parentName:"p"},"StateLibrary")," as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// Onchain contract using StateLibrary\ncontract MyProtocol {\n    using StateLibrary for IPoolManager;\n\n    function checkPoolPrice(PoolId poolId) external returns (uint160) {\n        (uint160 sqrtPriceX96, , , ) = poolManager.getSlot0(poolId);\n        // ... use the price in contract logic ...\n        return sqrtPriceX96;\n    }\n}\n")),(0,i.kt)("p",null,"By contrast, an offchain frontend or analytics service should interact with ",(0,i.kt)("inlineCode",{parentName:"p"},"StateView"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"// Frontend or analytics client using StateView\nconst stateView = getContract({\n  address: STATE_VIEW_ADDRESS,\n  abi: stateViewABI\n});\n\nconst { sqrtPriceX96 } = await stateView.read.getSlot0([poolId]);\n// ... use the price in your application ...\n")),(0,i.kt)("p",null,"This separation ensures that each context (onchain vs. offchain) uses the most efficient data reading pattern."),(0,i.kt)("h1",{id:"usage-with-frontend-clients"},"Usage With Frontend Clients"),(0,i.kt)("p",null,"Frontend applications frequently display real-time information about pools, positions, and other market data\u2014without incurring transaction costs. ",(0,i.kt)("strong",{parentName:"p"},"StateView")," addresses these requirements by exposing read-only functions tailored for offchain integrations."),(0,i.kt)("h2",{id:"setting-up-with-viem"},"Setting Up With Viem"),(0,i.kt)("p",null,"We\u2019ll use ",(0,i.kt)("a",{parentName:"p",href:"https://viem.sh/"},(0,i.kt)("strong",{parentName:"a"},"viem")),", a TypeScript library for Ethereum, to demonstrate how to connect to ",(0,i.kt)("strong",{parentName:"p"},"StateView"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createPublicClient, http } from 'viem';\nimport { mainnet } from 'viem/chains';\n\n// Initialize the client\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: http()\n});\n\n// Set up StateView contract instance\nconst stateView = getContract({\n  address: STATE_VIEW_ADDRESS,\n  abi: stateViewABI,\n  client\n})\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note:")," ",(0,i.kt)("em",{parentName:"p"},"The stateView object comes from our getContract call above. Make sure you\u2019ve imported stateViewABI correctly before attempting to read from the contract."))),(0,i.kt)("p",null,"With this setup, you can now:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Connect to an Ethereum network")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Call StateView\u2019s read functions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Retrieve pool information offchain at no gas cost"))),(0,i.kt)("h3",{id:"handling-errors-and-invalid-pool-ids"},"Handling Errors and Invalid Pool IDs"),(0,i.kt)("p",null,"When calling ",(0,i.kt)("inlineCode",{parentName:"p"},"stateView.read.<function>([poolId])"),", be mindful that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you pass an invalid ",(0,i.kt)("inlineCode",{parentName:"li"},"poolId")," (typically a ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Uniswap/v4-core/blob/main/src/types/PoolId.sol#L6"},(0,i.kt)("inlineCode",{parentName:"a"},"bytes32"))," in Uniswap v4), the call may revert or return unexpected data."),(0,i.kt)("li",{parentName:"ul"},"Consider adding try-catch (or equivalent error handling in your framework) to gracefully handle failures if the pool does not exist or if the call fails onchain.")),(0,i.kt)("h1",{id:"reading-pool-data"},"Reading Pool Data"),(0,i.kt)("p",null,"Here are common examples of how to retrieve pool data using ",(0,i.kt)("strong",{parentName:"p"},"StateView"),"."),(0,i.kt)("h2",{id:"getting-pool-state"},"Getting Pool State"),(0,i.kt)("p",null,"A pool\u2019s core state, such as its current price or fees, is often necessary for frontends. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"getSlot0"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"// Example: Reading pool price and fees\nconst getPoolState = async (poolId: string) => {\n  // getSlot0 returns:\n  // - Current price (sqrtPriceX96) in Q64.96 fixed-point format\n  // - Active tick\n  // - Protocol and LP fee settings\n  const [\n    sqrtPriceX96,\n    tick,\n    protocolFee,\n    lpFee\n   ] = await stateView.read.getSlot0([poolId]);\n\n  return {\n    price: calculatePrice(sqrtPriceX96), // implement your math logic for Q64.96\n    tick,\n    protocolFee,\n    lpFee\n  };\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"What it Returns:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"sqrtPriceX96")),": The current pool price in Q64.96 fixed-point format."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"tick")),": The current tick in which the pool is operating."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"protocolFee"))," and ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"lpFee")),": Fee parameters for protocol and LP fee tiers.")),(0,i.kt)("h2",{id:"getting-pool-liquidity"},"Getting Pool Liquidity"),(0,i.kt)("p",null,"To understand how much liquidity a pool holds:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"// Example: Reading the total active liquidity of a pool\nconst getPoolLiquidity = async (poolId: string) => {\n  // getLiquidity returns the total liquidity currently active in the pool\n  const liquidity = await stateView.read.getLiquidity([poolId]);\n  return liquidity;\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Why It Matters:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Helps gauge the depth of the pool"),(0,i.kt)("li",{parentName:"ul"},"Influences price impact calculations in trading"),(0,i.kt)("li",{parentName:"ul"},"Provides context for the pool\u2019s capacity to absorb trades")),(0,i.kt)("h1",{id:"core-functions-and-return-types"},"Core Functions and Return Types"),(0,i.kt)("p",null,"While ",(0,i.kt)("strong",{parentName:"p"},"StateView")," exposes many functions, here are several essential calls for most offchain applications. Each function typically takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"poolId")," (of type ",(0,i.kt)("inlineCode",{parentName:"p"},"bytes32"),") as the key input, identifying which pool to query."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"/contracts/v4/reference/periphery/lens/StateView#getslot0"},(0,i.kt)("inlineCode",{parentName:"a"},"getSlot0(poolId)"))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Returns ",(0,i.kt)("inlineCode",{parentName:"li"},"(uint160 sqrtPriceX96, int24 tick, uint8 protocolFee, uint8 lpFee)"),"."),(0,i.kt)("li",{parentName:"ul"},"Essential for displaying real-time price data and fees."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"/contracts/v4/reference/periphery/lens/StateView#getliquidity"},(0,i.kt)("inlineCode",{parentName:"a"},"getLiquidity(poolId)"))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Returns ",(0,i.kt)("inlineCode",{parentName:"li"},"uint128 liquidity")," (the total active pool liquidity)."),(0,i.kt)("li",{parentName:"ul"},"Used to assess trading depth and volatility."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"/contracts/v4/reference/periphery/lens/StateView#getpositioninfo"},(0,i.kt)("inlineCode",{parentName:"a"},"getPositionInfo(poolId, positionId)"))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Returns ",(0,i.kt)("inlineCode",{parentName:"li"},"(uint128 liquidity, uint256 feeGrowthInside0Last, uint256 feeGrowthInside1Last)"),"."),(0,i.kt)("li",{parentName:"ul"},"Critical for tracking user positions, especially to calculate earned fees over time."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"/contracts/v4/reference/periphery/lens/StateView#getfeegrowthglobals"},(0,i.kt)("inlineCode",{parentName:"a"},"getFeeGrowthGlobals(poolId)"))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Returns ",(0,i.kt)("inlineCode",{parentName:"li"},"(uint256 feeGrowthGlobal0, uint256 feeGrowthGlobal1)"),"."),(0,i.kt)("li",{parentName:"ul"},"Useful for analytics around total fee accumulation in the pool.")))),(0,i.kt)("h3",{id:"note-on-poolid-and-positionid"},"Note on ",(0,i.kt)("inlineCode",{parentName:"h3"},"poolId")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"positionId")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("strong",{parentName:"li"},"Uniswap v4"),", a ",(0,i.kt)("inlineCode",{parentName:"li"},"poolId")," is typically a ",(0,i.kt)("inlineCode",{parentName:"li"},"bytes32")," that is derived by calling\n",(0,i.kt)("inlineCode",{parentName:"li"},"keccak256(abi.encode(poolKey))")," where poolKey contains:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"currency0: The lower currency address of the pool"),(0,i.kt)("li",{parentName:"ul"},"currency1: The higher currency address of the pool"),(0,i.kt)("li",{parentName:"ul"},"fee: The pool LP fee (uint24)"),(0,i.kt)("li",{parentName:"ul"},"tickSpacing: The tick spacing value (int24)"),(0,i.kt)("li",{parentName:"ul"},"hooks: The hooks contract address"))),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"positionId")," may also be a ",(0,i.kt)("inlineCode",{parentName:"li"},"bytes32")," or other unique identifier that references a specific position.")),(0,i.kt)("h1",{id:"security-and-gas-considerations"},"Security and Gas Considerations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Offchain Reads"),": Calls to ",(0,i.kt)("inlineCode",{parentName:"li"},"StateView")," are purely read-only, so they cost no gas. This makes them ideal for frequently refreshing UI/analytics data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Onchain vs. Offchain"),": Remember that if you need to integrate pool data into a live transaction, you must use ",(0,i.kt)("inlineCode",{parentName:"li"},"StateLibrary")," within your smart contract."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Edge Cases"),": Always verify the returned data before using it in your application. Network or contract errors could lead to unexpected values.")),(0,i.kt)("h1",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"StateView")," is a powerful and efficient way to read Uniswap v4 pool data offchain. By separating onchain logic (using ",(0,i.kt)("inlineCode",{parentName:"p"},"StateLibrary"),") and offchain reads (using ",(0,i.kt)("inlineCode",{parentName:"p"},"StateView"),"), Uniswap ensures the best developer experience for both contexts."),(0,i.kt)("p",null,"To recap:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Setup"),": Use libraries like ",(0,i.kt)("inlineCode",{parentName:"li"},"viem")," to connect to the Ethereum network."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Read"),": Call ",(0,i.kt)("inlineCode",{parentName:"li"},"getSlot0"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"getLiquidity"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"getPositionInfo"),", and other methods for crucial state data."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Handle Errors"),": Implement basic checks for invalid ",(0,i.kt)("inlineCode",{parentName:"li"},"poolId")," or connection failures.")))}u.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);