"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[74149],{35206:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=r(83117),o=(r(67294),r(3905));const l={},a="Slot0",i={unversionedId:"contracts/v4/reference/core/types/Slot0",id:"contracts/v4/reference/core/types/Slot0",title:"Slot0",description:"Git Source - Generated with forge doc",source:"@site/docs/contracts/v4/reference/core/types/Slot0.md",sourceDirName:"contracts/v4/reference/core/types",slug:"/contracts/v4/reference/core/types/Slot0",permalink:"/docs/contracts/v4/reference/core/types/Slot0",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v4/reference/core/types/Slot0.md",tags:[],version:"current",frontMatter:{},sidebar:"contractsSidebar",previous:{title:"PoolKey",permalink:"/docs/contracts/v4/reference/core/types/PoolKey"},next:{title:"BalanceDelta Guide",permalink:"/docs/contracts/v4/reference/core/types/balancedelta-guide"}},c={},s=[{value:"State Variables",id:"state-variables",level:2},{value:"MASK_160_BITS",id:"mask_160_bits",level:3},{value:"MASK_24_BITS",id:"mask_24_bits",level:3},{value:"TICK_OFFSET",id:"tick_offset",level:3},{value:"PROTOCOL_FEE_OFFSET",id:"protocol_fee_offset",level:3},{value:"LP_FEE_OFFSET",id:"lp_fee_offset",level:3},{value:"Functions",id:"functions",level:2},{value:"sqrtPriceX96",id:"sqrtpricex96",level:3},{value:"tick",id:"tick",level:3},{value:"protocolFee",id:"protocolfee",level:3},{value:"lpFee",id:"lpfee",level:3},{value:"setSqrtPriceX96",id:"setsqrtpricex96",level:3},{value:"setTick",id:"settick",level:3},{value:"setProtocolFee",id:"setprotocolfee",level:3},{value:"setLpFee",id:"setlpfee",level:3}],p={toc:s};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"slot0"},"Slot0"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/uniswap/v4-core/blob/80311e34080fee64b6fc6c916e9a51a437d0e482/src/types/Slot0.sol"},"Git Source")," - Generated with ",(0,o.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/reference/forge/forge-doc"},"forge doc")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Slot0 is a packed version of solidity structure.\nUsing the packaged version saves gas by not storing the structure fields in memory slots.\nLayout:\n24 bits empty | 24 bits lpFee | 12 bits protocolFee 1->0 | 12 bits protocolFee 0->1 | 24 bits tick | 160 bits sqrtPriceX96\nFields in the direction from the least significant bit:\nThe current price\nuint160 sqrtPriceX96;\nThe current tick\nint24 tick;\nProtocol fee, expressed in hundredths of a bip, upper 12 bits are for 1->0, and the lower 12 are for 0->1\nthe maximum is 1000 - meaning the maximum protocol fee is 0.1%\nthe protocolFee is taken from the input first, then the lpFee is taken from the remaining input\nuint24 protocolFee;\nThe current LP fee of the pool. If the pool is dynamic, this does not include the dynamic fee flag.\nuint24 lpFee;")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"type Slot0 is bytes32;\n")),(0,o.kt)("h1",{id:"slot0library"},"Slot0Library"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/uniswap/v4-core/blob/80311e34080fee64b6fc6c916e9a51a437d0e482/src/types/Slot0.sol"},"Git Source")),(0,o.kt)("p",null,"Library for getting and setting values in the Slot0 type"),(0,o.kt)("h2",{id:"state-variables"},"State Variables"),(0,o.kt)("h3",{id:"mask_160_bits"},"MASK_160_BITS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"uint160 internal constant MASK_160_BITS = 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n")),(0,o.kt)("h3",{id:"mask_24_bits"},"MASK_24_BITS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"uint24 internal constant MASK_24_BITS = 0xFFFFFF;\n")),(0,o.kt)("h3",{id:"tick_offset"},"TICK_OFFSET"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"uint8 internal constant TICK_OFFSET = 160;\n")),(0,o.kt)("h3",{id:"protocol_fee_offset"},"PROTOCOL_FEE_OFFSET"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"uint8 internal constant PROTOCOL_FEE_OFFSET = 184;\n")),(0,o.kt)("h3",{id:"lp_fee_offset"},"LP_FEE_OFFSET"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"uint8 internal constant LP_FEE_OFFSET = 208;\n")),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"sqrtpricex96"},"sqrtPriceX96"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function sqrtPriceX96(Slot0 _packed) internal pure returns (uint160 _sqrtPriceX96);\n")),(0,o.kt)("h3",{id:"tick"},"tick"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function tick(Slot0 _packed) internal pure returns (int24 _tick);\n")),(0,o.kt)("h3",{id:"protocolfee"},"protocolFee"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function protocolFee(Slot0 _packed) internal pure returns (uint24 _protocolFee);\n")),(0,o.kt)("h3",{id:"lpfee"},"lpFee"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function lpFee(Slot0 _packed) internal pure returns (uint24 _lpFee);\n")),(0,o.kt)("h3",{id:"setsqrtpricex96"},"setSqrtPriceX96"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function setSqrtPriceX96(Slot0 _packed, uint160 _sqrtPriceX96) internal pure returns (Slot0 _result);\n")),(0,o.kt)("h3",{id:"settick"},"setTick"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function setTick(Slot0 _packed, int24 _tick) internal pure returns (Slot0 _result);\n")),(0,o.kt)("h3",{id:"setprotocolfee"},"setProtocolFee"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function setProtocolFee(Slot0 _packed, uint24 _protocolFee) internal pure returns (Slot0 _result);\n")),(0,o.kt)("h3",{id:"setlpfee"},"setLpFee"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"function setLpFee(Slot0 _packed, uint24 _lpFee) internal pure returns (Slot0 _result);\n")))}u.isMDXComponent=!0},3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(r),f=o,k=d["".concat(c,".").concat(f)]||d[f]||u[f]||l;return r?n.createElement(k,a(a({ref:t},p),{},{components:r})):n.createElement(k,a({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var s=2;s<l;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);