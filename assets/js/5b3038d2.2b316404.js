"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[2933],{38272:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var n=a(83117),i=(a(67294),a(3905));const o={title:"PoolManager"},l=void 0,r={unversionedId:"contracts/v4/concepts/PoolManager",id:"contracts/v4/concepts/PoolManager",title:"PoolManager",description:"In Uniswap v3, each liquidity pool was represented by a separate smart contract deployed through the Uniswapv3Factory contract. While this approach provided flexibility, it also led to increased gas costs for pool creation and multi-hop swaps.",source:"@site/docs/contracts/v4/concepts/06-PoolManager.mdx",sourceDirName:"contracts/v4/concepts",slug:"/contracts/v4/concepts/PoolManager",permalink:"/docs/contracts/v4/concepts/PoolManager",editUrl:"https://github.com/hoffms/docs/tree/main/docs/contracts/v4/concepts/06-PoolManager.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"PoolManager"},sidebar:"contractsSidebar",previous:{title:"Subscribers",permalink:"/docs/contracts/v4/concepts/subscribers"},next:{title:"Dynamic Fees",permalink:"/docs/contracts/v4/concepts/dynamic-fees"}},s={},p=[{value:"Singleton Design",id:"singleton-design",level:2},{value:"Locking Mechanism",id:"locking-mechanism",level:2},{value:"Pool State",id:"pool-state",level:2},{value:"Libraries",id:"libraries",level:2},{value:"Pool Creation",id:"pool-creation",level:2},{value:"Swaps",id:"swaps",level:2},{value:"Liquidity Management",id:"liquidity-management",level:2},{value:"Flash Accounting",id:"flash-accounting",level:2}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In Uniswap v3, each liquidity pool was represented by a separate smart contract deployed through the Uniswapv3Factory contract. While this approach provided flexibility, it also led to increased gas costs for pool creation and multi-hop swaps."),(0,i.kt)("p",null,"Uniswap v4 addresses this issue by introducing the Singleton design pattern. The PoolManager contract now serves as a single entry point for all liquidity pools. Instead of deploying separate contracts for each pool, the pool state and logic are encapsulated within the PoolManager itself."),(0,i.kt)("h1",{id:"purpose"},"Purpose"),(0,i.kt)("p",null,"The primary purpose of the ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolManager")," is to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Efficiently manage liquidity pools"),(0,i.kt)("li",{parentName:"ul"},"Facilitate token swaps"),(0,i.kt)("li",{parentName:"ul"},"Reduce gas costs compared to the factory-based approach in Uniswap v3"),(0,i.kt)("li",{parentName:"ul"},"Enable extensibility through hooks")),(0,i.kt)("h1",{id:"architecture"},"Architecture"),(0,i.kt)("h2",{id:"singleton-design"},"Singleton Design"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Uniswap v4 uses a Singleton design pattern for the ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")),(0,i.kt)("li",{parentName:"ul"},"All pool state and logic are encapsulated within the ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")," contract")),(0,i.kt)("h2",{id:"locking-mechanism"},"Locking Mechanism"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")," uses a locking mechanism to allow for ",(0,i.kt)("em",{parentName:"li"},"flash accounting")," (also known as deferred balance accounting)"),(0,i.kt)("li",{parentName:"ul"},"When unlocked, the calling contract can perform various operations and zero-out outstanding balances before returning control to the ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")," for final solvency checks")),(0,i.kt)("h2",{id:"pool-state"},"Pool State"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"Pool.State")," struct contains information such as:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Current price"),(0,i.kt)("li",{parentName:"ul"},"Liquidity"),(0,i.kt)("li",{parentName:"ul"},"Tick bitmap"),(0,i.kt)("li",{parentName:"ul"},"Fee growth"),(0,i.kt)("li",{parentName:"ul"},"Position information")))),(0,i.kt)("h2",{id:"libraries"},"Libraries"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The pool logic is implemented using Solidity libraries to keep the ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")," contract modular and gas-efficient"),(0,i.kt)("li",{parentName:"ul"},"These libraries are:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Pool"),": Contains core pool functionality, such as swaps and liquidity management"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Hooks"),": Handles the execution of hook functions"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Position"),": Manages liquidity positions within a pool")))),(0,i.kt)("h1",{id:"core-functionality"},"Core Functionality"),(0,i.kt)("h2",{id:"pool-creation"},"Pool Creation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"New pools are created by calling the ",(0,i.kt)("inlineCode",{parentName:"li"},"initialize")," function on the ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")),(0,i.kt)("li",{parentName:"ul"},"The pool creator specifies the token pair, fee tier, tick spacing, and optional hook contract address"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")," initializes the pool state and associates it with a unique ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolId"))),(0,i.kt)("h2",{id:"swaps"},"Swaps"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Swaps are initiated through the ",(0,i.kt)("inlineCode",{parentName:"li"},"swap")," function on the ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager"),", typically via a swap router contract"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")," executes the following steps:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Checks if the pool is valid and initialized"),(0,i.kt)("li",{parentName:"ol"},"Executes the ",(0,i.kt)("inlineCode",{parentName:"li"},"beforeSwap")," hook, if applicable"),(0,i.kt)("li",{parentName:"ol"},"Performs the actual swap, updating the pool state and charging fees"),(0,i.kt)("li",{parentName:"ol"},"Executes the ",(0,i.kt)("inlineCode",{parentName:"li"},"afterSwap")," hook, if applicable"),(0,i.kt)("li",{parentName:"ol"},"Calculates the net token amounts owed to the user and the pool, represented by the ",(0,i.kt)("inlineCode",{parentName:"li"},"BalanceDelta")," struct"))),(0,i.kt)("li",{parentName:"ul"},"Swaps utilize flash accounting, where tokens are moved into the ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager"),", and only the final output tokens are withdrawn")),(0,i.kt)("h2",{id:"liquidity-management"},"Liquidity Management"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Liquidity providers can add or remove liquidity using the ",(0,i.kt)("inlineCode",{parentName:"li"},"modifyLiquidity")," function on the ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager"),". However, you wouldn't call this directly from your application, you would call this from a periphery contract to handle the locking & unlocking a particular pool. "),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")," executes the following steps:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Checks if the pool is valid and initialized"),(0,i.kt)("li",{parentName:"ol"},"Determines if the modification is an addition or removal of liquidity"),(0,i.kt)("li",{parentName:"ol"},"Executes the appropriate ",(0,i.kt)("inlineCode",{parentName:"li"},"beforeAddLiquidity")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"beforeRemoveLiquidity")," hook, if applicable"),(0,i.kt)("li",{parentName:"ol"},"Performs the actual liquidity modification and updates the pool state"),(0,i.kt)("li",{parentName:"ol"},"Emits the ",(0,i.kt)("inlineCode",{parentName:"li"},"ModifyLiquidity")," event"),(0,i.kt)("li",{parentName:"ol"},"Executes the appropriate ",(0,i.kt)("inlineCode",{parentName:"li"},"afterAddLiquidity")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"afterRemoveLiquidity")," hook, if applicable"),(0,i.kt)("li",{parentName:"ol"},"Calculates the balance delta and returns it to the caller")))),(0,i.kt)("h2",{id:"flash-accounting"},"Flash Accounting"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")," employs flash accounting to reduce gas costs and simplify multi-hop swaps"),(0,i.kt)("li",{parentName:"ul"},"Tokens are moved into the ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")," contract, and all subsequent actions are performed within the contract's context"),(0,i.kt)("li",{parentName:"ul"},"Only the final output tokens are withdrawn from the ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")," at the end of the transaction")),(0,i.kt)("h1",{id:"transient-storage"},"Transient Storage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"PoolManager")," utilizes transient storage (EIP-1153) to store temporary data during complex operations"),(0,i.kt)("li",{parentName:"ul"},"Transient storage reduces gas costs by avoiding regular storage operations for data only needed within a single transaction")))}u.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(a),m=i,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(h,l(l({ref:t},c),{},{components:a})):n.createElement(h,l({ref:t},c))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,l=new Array(o);l[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);