"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[9065],{68808:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(83117),i=(n(67294),n(3905));const r={title:"Batch Modify"},o=void 0,l={unversionedId:"contracts/v4/quickstart/manage-liquidity/batch-liquidity",id:"contracts/v4/quickstart/manage-liquidity/batch-liquidity",title:"Batch Modify",description:"Context",source:"@site/docs/contracts/v4/quickstart/02-manage-liquidity/06-batch-liquidity.mdx",sourceDirName:"contracts/v4/quickstart/02-manage-liquidity",slug:"/contracts/v4/quickstart/manage-liquidity/batch-liquidity",permalink:"/docs/contracts/v4/quickstart/manage-liquidity/batch-liquidity",editUrl:"https://github.com/hoffms/docs/tree/main/docs/contracts/v4/quickstart/02-manage-liquidity/06-batch-liquidity.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Batch Modify"},sidebar:"contractsSidebar",previous:{title:"Burn Position",permalink:"/docs/contracts/v4/quickstart/manage-liquidity/burn-liquidity"},next:{title:"Swap",permalink:"/docs/contracts/v4/quickstart/swap"}},s={},c=[{value:"Context",id:"context",level:3},{value:"Setup",id:"setup",level:3},{value:"1. Encoded Actions",id:"1-encoded-actions",level:3},{value:"2. Encoded Parameters",id:"2-encoded-parameters",level:3},{value:"3. Submit Call",id:"3-submit-call",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"context"},"Context"),(0,i.kt)("p",null,"As seen in previous guides, ",(0,i.kt)("inlineCode",{parentName:"p"},"PositionManager")," is a command-based contract. This design is conducive to\nbatching complex liquidity operations. For example, developers can encode efficient logic to move\nliquidity between two positions on entirely different Pools. "),(0,i.kt)("h3",{id:"setup"},"Setup"),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/contracts/v4/quickstart/manage-liquidity/setup-liquidity"},"setup guide")),(0,i.kt)("h1",{id:"guide"},"Guide"),(0,i.kt)("p",null,"Below is a general reference guide for batch-operating on multiple liquidity positions, in ",(0,i.kt)("em",{parentName:"p"},"solidity"),".\nThis guide does ",(0,i.kt)("em",{parentName:"p"},"not")," focus on a specific batch sequence, and is intended to be a general guide for ",(0,i.kt)("inlineCode",{parentName:"p"},"PositionManager"),"'s command-based interface."),(0,i.kt)("h3",{id:"1-encoded-actions"},"1. Encoded Actions"),(0,i.kt)("p",null,"Actions are divided into two types: ",(0,i.kt)("em",{parentName:"p"},"liquidity-operations")," and ",(0,i.kt)("em",{parentName:"p"},"delta-resolving"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"liquidity-operations")," - actions which that incur a ",(0,i.kt)("em",{parentName:"li"},"balance-change"),", a change in the pool's liquidity"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"delta-resolving")," - actions which facilitate token transfers, such as ",(0,i.kt)("em",{parentName:"li"},"settling")," and ",(0,i.kt)("em",{parentName:"li"},"taking"))),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"ordering")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"actions")," determines the sequence of operations. The minimum number of actions is roughly two actions; and the maximum is limited by block gas limit.\nAdditionally, ",(0,i.kt)("em",{parentName:"p"},"liquidity-operations")," do not have to happen prior to ",(0,i.kt)("em",{parentName:"p"},"delta-resolving")," actions. Developers can mix / alternate between\nthe two types of actions."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"However")," is good practice to perform ",(0,i.kt)("em",{parentName:"p"},"liquidity-operations")," before ",(0,i.kt)("em",{parentName:"p"},"delta-resolving")," actions. Minimizing token transfers\nand leveraging ",(0,i.kt)("a",{parentName:"p",href:"/docs/contracts/v4/concepts/flash-accounting"},(0,i.kt)("em",{parentName:"a"},"flash accounting"))," is more gas efficient")),(0,i.kt)("p",null,"Example: ",(0,i.kt)("inlineCode",{parentName:"p"},"Action.Y")," happens after ",(0,i.kt)("inlineCode",{parentName:"p"},"Action.X")," but before ",(0,i.kt)("inlineCode",{parentName:"p"},"Action.Z")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'import {Actions} from "v4-periphery/src/libraries/Actions.sol";\n\nbytes memory actions = abi.encodePacked(uint8(Actions.X), uint8(Actions.Y), uint8(Actions.Z), ...);\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"A Note on Special Actions"),":"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PositionManager")," supports a few ",(0,i.kt)("em",{parentName:"p"},"delta-resolving")," actions beyond the standard ",(0,i.kt)("inlineCode",{parentName:"p"},"SETTLE")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TAKE")," actions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CLOSE_CURRENCY")," - automatically determines if a currency should be settled (paid) or taken. Used for cases where callers may not know the final delta"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CLEAR_OR_TAKE"),"- forfeit tokens if the amount is below a specified threshold, otherwise take the tokens. Used for cases where callers may expect to produce dust"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SWEEP")," - return any excess token balances to a recipient. Used for cases where callers may conversatively overpay tokens")),(0,i.kt)("h3",{id:"2-encoded-parameters"},"2. Encoded Parameters"),(0,i.kt)("p",null,"Each action has its own parameters to encode. Generally:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"liquidity-operations")," - encode tokenIds, liquidity amounts, and slippage")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"delta-resolving")," - encode currencies, amounts, and recipients"))),(0,i.kt)("p",null,'Because actions are ordered, the parameters "zip" with their corresponding actions. The second parameter corresponds to the second action.\nEvery action has its own encoded parameters'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes[] memory params = new bytes[](3);\n\nparams[0] = abi.encode(...); // parameters for the first action\nparams[1] = abi.encode(...); // parameters for the second action\nparams[2] = abi.encode(...); // parameters for the third action\n")),(0,i.kt)("h3",{id:"3-submit-call"},"3. Submit Call"),(0,i.kt)("p",null,"The entrypoint for all liquidity operations is ",(0,i.kt)("inlineCode",{parentName:"p"},"modifyLiquidities()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 deadline = block.timestamp + 60;\n\nposm.modifyLiquidities(\n    abi.encode(actions, params),\n    deadline\n);\n")))}d.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);