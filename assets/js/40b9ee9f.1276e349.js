"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[8892],{59982:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=a(83117),n=(a(67294),a(3905));const r={title:"Dynamic Fees"},o=void 0,s={unversionedId:"contracts/v4/concepts/dynamic-fees",id:"contracts/v4/concepts/dynamic-fees",title:"Dynamic Fees",description:"Uniswap v4 introduces dynamic fees, allowing for flexible and responsive fee structures managed through hooks. This feature enables pools to adapt fees to changing market conditions, potentially improving liquidity provider profitability and overall market efficiency.",source:"@site/docs/contracts/v4/concepts/07-dynamic-fees.mdx",sourceDirName:"contracts/v4/concepts",slug:"/contracts/v4/concepts/dynamic-fees",permalink:"/docs/contracts/v4/concepts/dynamic-fees",editUrl:"https://github.com/hoffms/docs/tree/main/docs/contracts/v4/concepts/07-dynamic-fees.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Dynamic Fees"},sidebar:"contractsSidebar",previous:{title:"PoolManager",permalink:"/docs/contracts/v4/concepts/PoolManager"},next:{title:"Integrated Routing with UniswapX",permalink:"/docs/contracts/v4/concepts/integrated-routing-uniswap-x"}},l={},c=[],p={toc:c};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Uniswap v4 introduces dynamic fees, allowing for flexible and responsive fee structures managed through hooks. This feature enables pools to adapt fees to changing market conditions, potentially improving liquidity provider profitability and overall market efficiency."),(0,n.kt)("h1",{id:"what-are-dynamic-fees"},"What are Dynamic Fees?"),(0,n.kt)("p",null,"Dynamic fees in Uniswap v4 are a specific type of swap fee paid by swappers that directly accrue to liquidity providers. These fees are distinct from protocol fees and hook fees (Optional fees that can be implemented by custom hooks), and represent a significant advancement over the fee structures in previous Uniswap versions."),(0,n.kt)("p",null,"Unlike the static fee tiers in Uniswap v3 (0.05%, 0.30%, 1.0%) or the single fee in v2, dynamic fees in v4 offer much more flexibility. Dynamic fees can:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Adjust in real-time based on various market conditions"),(0,n.kt)("li",{parentName:"ul"},"Change on a per-swap basis"),(0,n.kt)("li",{parentName:"ul"},"Allow for any fee percentage (e.g., 4.9 bips, 10 bips)"),(0,n.kt)("li",{parentName:"ul"},"Be updated at various intervals (yearly, per block, or per transaction)")),(0,n.kt)("p",null,"This dynamic nature allows for more efficient fee pricing, potentially benefiting both liquidity providers and traders by adapting to current market conditions. By allowing fees to fluctuate based on market dynamics, Uniswap v4 aims to optimize liquidity provision and trading across a wide range of market scenarios."),(0,n.kt)("h1",{id:"motivation-and-benefits-of-dynamic-fees"},"Motivation and Benefits of Dynamic Fees"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Improved Pricing of Volatility:")," Adapt fees to market volatility, similar to traditional exchanges adjusting bid-ask spreads."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Order Flow Discrimination:")," Price different types of trades (e.g., arbitrage vs. uninformed) more accurately."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Improved Market Efficiency and Stability:")," Fees can adjust to reflect real-time market conditions, optimizing for both liquidity providers and traders. Dynamic fees could help dampen extreme market movements by adjusting incentives in real-time."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Enhanced Capital Efficiency and Liquidity Provider Returns:")," By optimizing fees, pools can attract more liquidity and facilitate more efficient trading. More accurate fee pricing could lead to better returns for liquidity providers, potentially attracting more capital to pools."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Better Risk Management:")," During high volatility, fees can increase to protect liquidity providers from impermanent loss."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Customizable Strategies:")," Enable complex fee strategies for specific token pairs or market segments.")),(0,n.kt)("h1",{id:"dynamic-fees-use-cases"},"Dynamic Fees Use Cases"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Volatility-Based Fees:")," Adjust fees based on the historical or realized volatility of the asset pair."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Volume-Based Fees:")," Lower fees during high-volume periods to attract more trades, and increase fees during low-volume periods to compensate liquidity providers."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Time-Based Fees:")," Implement different fee structures for different times of day or days of the week, based on historical trading patterns."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Market Depth-Based Fees:")," Adjust fees based on the current liquidity depth in the pool."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Cross-Pool Arbitrage Mitigation:")," Dynamically adjust fees to discourage harmful arbitrage between different pools or exchanges."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Gas Price-Responsive Fees:")," Adjust fees based on network congestion and gas prices to ensure profitability for liquidity providers."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Event-Driven Fees:")," Implement special fee structures during significant market events or token-specific occurrences."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Lookback approach:")," Set the fee to match the most profitable fee tier of external pools with the same asset pair over a recent period."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Price oracle approach:")," Use an external price oracle to determine the correct asset price and adjust fees based on how trades move the pool price relative to this external price."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Price momentum approach:")," Analyze recent price history and asymmetrically adjust fees based on trade direction."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Asset composition approach:")," Lower fees for trades that balance the pool and higher fees for trades that imbalance it."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Transaction-source based approach:")," Provide lower fees for transactions routed through certain aggregators or sources less likely to be arbitrage trades.")),(0,n.kt)("h1",{id:"dynamic-fees-mechanism"},"Dynamic Fees Mechanism"),(0,n.kt)("p",null,"In Uniswap v4, the dynamic fee capability of a pool is determined at pool creation and is immutable. This means that whether a pool uses dynamic fees or not is set when the pool is initially created and cannot be changed afterwards. For pools that do use dynamic fees, Uniswap v4 supports two primary methods for updating the fee:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Periodic Updates via PoolManager:")," Fees can be updated by calling the ",(0,n.kt)("inlineCode",{parentName:"li"},"updateDynamicLPFee")," function on the PoolManager contract at specified intervals."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Per-Swap Updates via beforeSwap Hook:")," Fees can be dynamically set for each swap by returning the fee from the ",(0,n.kt)("inlineCode",{parentName:"li"},"beforeSwap")," hook. This allows hooks to override the LP fee for each swap in dynamic fee pools.")),(0,n.kt)("p",null,"These methods offer flexibility in implementing various fee strategies. For more detailed information on implementing these methods, please refer to our ",(0,n.kt)("a",{parentName:"p",href:"https://uniswap-docs-staging.vercel.app/documentation/featured-guides/hooks/v4/guides-for-solidity-contracts/dynamic-fee-pools"},"Dynamic Fees Implementation Guide"),"."),(0,n.kt)("h1",{id:"considerations-and-best-practices"},"Considerations and Best Practices"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The optimal fee depends on at least two factors: ",(0,n.kt)("strong",{parentName:"li"},"asset volatility")," and ",(0,n.kt)("strong",{parentName:"li"},"volume of uninformed flow.")),(0,n.kt)("li",{parentName:"ul"},"For volatile pairs in systems like Uniswap v3, which don't discriminate between flows, low fee-tier pools are only sensible when uninformed flow is large and asset volatility is relatively low."),(0,n.kt)("li",{parentName:"ul"},"Performance implications of frequent fee updates should be carefully considered."),(0,n.kt)("li",{parentName:"ul"},"Security measures should be implemented to prevent manipulation of fee-setting mechanisms."),(0,n.kt)("li",{parentName:"ul"},"Balance responsiveness with gas costs to optimize for both performance and cost-effectiveness.")),(0,n.kt)("p",null,"For more detailed implementation guidance and best practices, refer to our ",(0,n.kt)("a",{parentName:"p",href:"https://uniswap-docs-staging.vercel.app/documentation/featured-guides/hooks/v4/guides-for-solidity-contracts/dynamic-fee-pools"},"Dynamic Fees Implementation Guide"),"."))}d.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=i.createContext({}),c=function(e){var t=i.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(a),f=n,u=m["".concat(l,".").concat(f)]||m[f]||d[f]||r;return a?i.createElement(u,o(o({ref:t},p),{},{components:a})):i.createElement(u,o({ref:t},p))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);