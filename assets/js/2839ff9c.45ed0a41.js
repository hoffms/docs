"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[92243],{99313:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>u,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var a=t(83117),s=(t(67294),t(3905));const o={id:"connect-to-uniswap",title:"Connect to Uniswap"},u=void 0,p={unversionedId:"contracts/v1/guides/connect-to-uniswap",id:"contracts/v1/guides/connect-to-uniswap",title:"Connect to Uniswap",description:"The Uniswap smart contracts exist on the Ethereum blockchain. Use ethers.js or web3.js to connect your website to Ethereum. Users will need a web3-enabled browser. On desktop this means using the MetaMask extension or something similar. On mobile, web3-compatible browsers include Trust Wallet and Coinbase Wallet. See ethereum.org to learn more.",source:"@site/docs/contracts/v1/guides/01-connect-to-uniswap.md",sourceDirName:"contracts/v1/guides",slug:"/contracts/v1/guides/connect-to-uniswap",permalink:"/docs/contracts/v1/guides/connect-to-uniswap",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v1/guides/01-connect-to-uniswap.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"connect-to-uniswap",title:"Connect to Uniswap"},sidebar:"contractsSidebar",previous:{title:"Overview",permalink:"/docs/contracts/v1/overview"},next:{title:"Pool Liquidity",permalink:"/docs/contracts/v1/guides/pool-liquidity"}},r={},i=[{value:"Factory Address",id:"factory-address",level:2},{value:"Factory Interface",id:"factory-interface",level:3},{value:"Get Exchange Address",id:"get-exchange-address",level:2},{value:"Exchange Interface",id:"exchange-interface",level:2},{value:"Get Token Address",id:"get-token-address",level:2},{value:"Token Interface",id:"token-interface",level:2}],c={toc:i};function d(n){let{components:e,...t}=n;return(0,s.kt)("wrapper",(0,a.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The Uniswap smart contracts exist on the Ethereum blockchain. Use ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/ethers-io/ethers.js/"},"ethers.js")," or ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/ethereum/web3.js"},"web3.js")," to connect your website to Ethereum. Users will need a web3-enabled browser. On desktop this means using the ",(0,s.kt)("a",{parentName:"p",href:"https://metamask.io/"},"MetaMask")," extension or something similar. On mobile, web3-compatible browsers include ",(0,s.kt)("a",{parentName:"p",href:"https://trustwallet.com/"},"Trust Wallet")," and ",(0,s.kt)("a",{parentName:"p",href:"https://wallet.coinbase.com/"},"Coinbase Wallet"),". See ",(0,s.kt)("a",{parentName:"p",href:"https://ethereum.org/use/#_3-what-is-a-wallet-and-which-one-should-i-use"},"ethereum.org")," to learn more."),(0,s.kt)("h1",{id:"factory-contract"},"Factory Contract"),(0,s.kt)("p",null,"The Uniswap ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/uniswap-v1/blob/master/contracts/uniswap_factory.vy"},"factory contract")," can be used to create exchange contracts for any ERC20 token that does not already have one. It also functions as a registry of ERC20 tokens that have been added to the system, and the exchange with which they are associated."),(0,s.kt)("p",null,"The factory contract can be instantiated using the factory address and ABI:"),(0,s.kt)("h2",{id:"factory-address"},(0,s.kt)("a",{parentName:"h2",href:"https://etherscan.io/address/0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95"},"Factory Address")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// mainnet\nconst factory = '0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95'\n\n// testnets\nconst ropsten = '0x9c83dCE8CA20E9aAF9D3efc003b2ea62aBC08351'\nconst rinkeby = '0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36'\nconst kovan = '0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30'\nconst g\xf6rli = '0x6Ce570d02D73d4c384b46135E87f8C592A8c86dA'\n")),(0,s.kt)("h3",{id:"factory-interface"},"Factory Interface"),(0,s.kt)("p",null,"Creating the factory interface in web3 requires the ",(0,s.kt)("strong",{parentName:"p"},"factory address")," and the ",(0,s.kt)("strong",{parentName:"p"},"factory ABI"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const factoryABI = [\n  {\n    name: 'NewExchange',\n    inputs: [\n      { type: 'address', name: 'token', indexed: true },\n      { type: 'address', name: 'exchange', indexed: true },\n    ],\n    anonymous: false,\n    type: 'event',\n  },\n  {\n    name: 'initializeFactory',\n    outputs: [],\n    inputs: [{ type: 'address', name: 'template' }],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 35725,\n  },\n  {\n    name: 'createExchange',\n    outputs: [{ type: 'address', name: 'out' }],\n    inputs: [{ type: 'address', name: 'token' }],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 187911,\n  },\n  {\n    name: 'getExchange',\n    outputs: [{ type: 'address', name: 'out' }],\n    inputs: [{ type: 'address', name: 'token' }],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 715,\n  },\n  {\n    name: 'getToken',\n    outputs: [{ type: 'address', name: 'out' }],\n    inputs: [{ type: 'address', name: 'exchange' }],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 745,\n  },\n  {\n    name: 'getTokenWithId',\n    outputs: [{ type: 'address', name: 'out' }],\n    inputs: [{ type: 'uint256', name: 'token_id' }],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 736,\n  },\n  {\n    name: 'exchangeTemplate',\n    outputs: [{ type: 'address', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 633,\n  },\n  {\n    name: 'tokenCount',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 663,\n  },\n]\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const factoryContract = new web3.eth.Contract(factoryABI, factoryAddress)\n")),(0,s.kt)("h1",{id:"exchange-contracts"},"Exchange Contracts"),(0,s.kt)("h2",{id:"get-exchange-address"},"Get Exchange Address"),(0,s.kt)("p",null,"There is a separate exchange contract for every ERC20 token. The ",(0,s.kt)("inlineCode",{parentName:"p"},"getExchange")," method in the factory contract can be used to find the Ethereum address associated with an ERC20 token address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const exchangeAddress = factoryContract.methods.getExchange(tokenAddress)\n")),(0,s.kt)("p",null,"If the return value is ",(0,s.kt)("inlineCode",{parentName:"p"},"0x0000000000000000000000000000000000000000")," the token does not yet have an exchange."),(0,s.kt)("h2",{id:"exchange-interface"},"Exchange Interface"),(0,s.kt)("p",null,"Creating an exchange interface in web3 requires the ",(0,s.kt)("strong",{parentName:"p"},"exchange address")," and the ",(0,s.kt)("strong",{parentName:"p"},"exchange ABI"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const exchangeABI = [\n  {\n    name: 'TokenPurchase',\n    inputs: [\n      { type: 'address', name: 'buyer', indexed: true },\n      { type: 'uint256', name: 'eth_sold', indexed: true },\n      { type: 'uint256', name: 'tokens_bought', indexed: true },\n    ],\n    anonymous: false,\n    type: 'event',\n  },\n  {\n    name: 'EthPurchase',\n    inputs: [\n      { type: 'address', name: 'buyer', indexed: true },\n      { type: 'uint256', name: 'tokens_sold', indexed: true },\n      { type: 'uint256', name: 'eth_bought', indexed: true },\n    ],\n    anonymous: false,\n    type: 'event',\n  },\n  {\n    name: 'AddLiquidity',\n    inputs: [\n      { type: 'address', name: 'provider', indexed: true },\n      { type: 'uint256', name: 'eth_amount', indexed: true },\n      { type: 'uint256', name: 'token_amount', indexed: true },\n    ],\n    anonymous: false,\n    type: 'event',\n  },\n  {\n    name: 'RemoveLiquidity',\n    inputs: [\n      { type: 'address', name: 'provider', indexed: true },\n      { type: 'uint256', name: 'eth_amount', indexed: true },\n      { type: 'uint256', name: 'token_amount', indexed: true },\n    ],\n    anonymous: false,\n    type: 'event',\n  },\n  {\n    name: 'Transfer',\n    inputs: [\n      { type: 'address', name: '_from', indexed: true },\n      { type: 'address', name: '_to', indexed: true },\n      { type: 'uint256', name: '_value', indexed: false },\n    ],\n    anonymous: false,\n    type: 'event',\n  },\n  {\n    name: 'Approval',\n    inputs: [\n      { type: 'address', name: '_owner', indexed: true },\n      { type: 'address', name: '_spender', indexed: true },\n      { type: 'uint256', name: '_value', indexed: false },\n    ],\n    anonymous: false,\n    type: 'event',\n  },\n  {\n    name: 'setup',\n    outputs: [],\n    inputs: [{ type: 'address', name: 'token_addr' }],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 175875,\n  },\n  {\n    name: 'addLiquidity',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'min_liquidity' },\n      { type: 'uint256', name: 'max_tokens' },\n      { type: 'uint256', name: 'deadline' },\n    ],\n    constant: false,\n    payable: true,\n    type: 'function',\n    gas: 82605,\n  },\n  {\n    name: 'removeLiquidity',\n    outputs: [\n      { type: 'uint256', name: 'out' },\n      { type: 'uint256', name: 'out' },\n    ],\n    inputs: [\n      { type: 'uint256', name: 'amount' },\n      { type: 'uint256', name: 'min_eth' },\n      { type: 'uint256', name: 'min_tokens' },\n      { type: 'uint256', name: 'deadline' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 116814,\n  },\n  {\n    name: '__default__',\n    outputs: [],\n    inputs: [],\n    constant: false,\n    payable: true,\n    type: 'function',\n  },\n  {\n    name: 'ethToTokenSwapInput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'min_tokens' },\n      { type: 'uint256', name: 'deadline' },\n    ],\n    constant: false,\n    payable: true,\n    type: 'function',\n    gas: 12757,\n  },\n  {\n    name: 'ethToTokenTransferInput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'min_tokens' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'recipient' },\n    ],\n    constant: false,\n    payable: true,\n    type: 'function',\n    gas: 12965,\n  },\n  {\n    name: 'ethToTokenSwapOutput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_bought' },\n      { type: 'uint256', name: 'deadline' },\n    ],\n    constant: false,\n    payable: true,\n    type: 'function',\n    gas: 50455,\n  },\n  {\n    name: 'ethToTokenTransferOutput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_bought' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'recipient' },\n    ],\n    constant: false,\n    payable: true,\n    type: 'function',\n    gas: 50663,\n  },\n  {\n    name: 'tokenToEthSwapInput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_sold' },\n      { type: 'uint256', name: 'min_eth' },\n      { type: 'uint256', name: 'deadline' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 47503,\n  },\n  {\n    name: 'tokenToEthTransferInput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_sold' },\n      { type: 'uint256', name: 'min_eth' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'recipient' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 47712,\n  },\n  {\n    name: 'tokenToEthSwapOutput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'eth_bought' },\n      { type: 'uint256', name: 'max_tokens' },\n      { type: 'uint256', name: 'deadline' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 50175,\n  },\n  {\n    name: 'tokenToEthTransferOutput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'eth_bought' },\n      { type: 'uint256', name: 'max_tokens' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'recipient' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 50384,\n  },\n  {\n    name: 'tokenToTokenSwapInput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_sold' },\n      { type: 'uint256', name: 'min_tokens_bought' },\n      { type: 'uint256', name: 'min_eth_bought' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'token_addr' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 51007,\n  },\n  {\n    name: 'tokenToTokenTransferInput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_sold' },\n      { type: 'uint256', name: 'min_tokens_bought' },\n      { type: 'uint256', name: 'min_eth_bought' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'recipient' },\n      { type: 'address', name: 'token_addr' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 51098,\n  },\n  {\n    name: 'tokenToTokenSwapOutput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_bought' },\n      { type: 'uint256', name: 'max_tokens_sold' },\n      { type: 'uint256', name: 'max_eth_sold' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'token_addr' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 54928,\n  },\n  {\n    name: 'tokenToTokenTransferOutput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_bought' },\n      { type: 'uint256', name: 'max_tokens_sold' },\n      { type: 'uint256', name: 'max_eth_sold' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'recipient' },\n      { type: 'address', name: 'token_addr' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 55019,\n  },\n  {\n    name: 'tokenToExchangeSwapInput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_sold' },\n      { type: 'uint256', name: 'min_tokens_bought' },\n      { type: 'uint256', name: 'min_eth_bought' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'exchange_addr' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 49342,\n  },\n  {\n    name: 'tokenToExchangeTransferInput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_sold' },\n      { type: 'uint256', name: 'min_tokens_bought' },\n      { type: 'uint256', name: 'min_eth_bought' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'recipient' },\n      { type: 'address', name: 'exchange_addr' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 49532,\n  },\n  {\n    name: 'tokenToExchangeSwapOutput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_bought' },\n      { type: 'uint256', name: 'max_tokens_sold' },\n      { type: 'uint256', name: 'max_eth_sold' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'exchange_addr' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 53233,\n  },\n  {\n    name: 'tokenToExchangeTransferOutput',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'uint256', name: 'tokens_bought' },\n      { type: 'uint256', name: 'max_tokens_sold' },\n      { type: 'uint256', name: 'max_eth_sold' },\n      { type: 'uint256', name: 'deadline' },\n      { type: 'address', name: 'recipient' },\n      { type: 'address', name: 'exchange_addr' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 53423,\n  },\n  {\n    name: 'getEthToTokenInputPrice',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [{ type: 'uint256', name: 'eth_sold' }],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 5542,\n  },\n  {\n    name: 'getEthToTokenOutputPrice',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [{ type: 'uint256', name: 'tokens_bought' }],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 6872,\n  },\n  {\n    name: 'getTokenToEthInputPrice',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [{ type: 'uint256', name: 'tokens_sold' }],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 5637,\n  },\n  {\n    name: 'getTokenToEthOutputPrice',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [{ type: 'uint256', name: 'eth_bought' }],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 6897,\n  },\n  {\n    name: 'tokenAddress',\n    outputs: [{ type: 'address', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 1413,\n  },\n  {\n    name: 'factoryAddress',\n    outputs: [{ type: 'address', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 1443,\n  },\n  {\n    name: 'balanceOf',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [{ type: 'address', name: '_owner' }],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 1645,\n  },\n  {\n    name: 'transfer',\n    outputs: [{ type: 'bool', name: 'out' }],\n    inputs: [\n      { type: 'address', name: '_to' },\n      { type: 'uint256', name: '_value' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 75034,\n  },\n  {\n    name: 'transferFrom',\n    outputs: [{ type: 'bool', name: 'out' }],\n    inputs: [\n      { type: 'address', name: '_from' },\n      { type: 'address', name: '_to' },\n      { type: 'uint256', name: '_value' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 110907,\n  },\n  {\n    name: 'approve',\n    outputs: [{ type: 'bool', name: 'out' }],\n    inputs: [\n      { type: 'address', name: '_spender' },\n      { type: 'uint256', name: '_value' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 38769,\n  },\n  {\n    name: 'allowance',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'address', name: '_owner' },\n      { type: 'address', name: '_spender' },\n    ],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 1925,\n  },\n  {\n    name: 'name',\n    outputs: [{ type: 'bytes32', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 1623,\n  },\n  {\n    name: 'symbol',\n    outputs: [{ type: 'bytes32', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 1653,\n  },\n  {\n    name: 'decimals',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 1683,\n  },\n  {\n    name: 'totalSupply',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 1713,\n  },\n]\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const exchangeContract = new web3.eth.Contract(exchangeABI, exchangeAddress)\n")),(0,s.kt)("h1",{id:"token-contracts"},"Token Contracts"),(0,s.kt)("p",null,"Some Uniswap interactions require making calls directly to ERC20 token contracts rather than the exchanges with which they are associated."),(0,s.kt)("h2",{id:"get-token-address"},"Get Token Address"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"getToken")," method in the factory contract can be used to find the ERC20 token address associated with an exchange contract. There is no barrier of entry for adding an ERC20 token to Uniswap or checks on the validity of the token contracts. Frontend interfaces should maintain a list of valid ERC20 tokens that users can safely trade or allow users to paste in arbitrary addresses."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const tokenAddress = factoryContract.methods.getToken(exchangeAddress)\n")),(0,s.kt)("p",null,"If the return value is ",(0,s.kt)("inlineCode",{parentName:"p"},"0x0000000000000000000000000000000000000000")," the input address is not a Uniswap exchange."),(0,s.kt)("h2",{id:"token-interface"},"Token Interface"),(0,s.kt)("p",null,"Creating a token interface in web3 requires the ",(0,s.kt)("strong",{parentName:"p"},"token address")," and the ",(0,s.kt)("strong",{parentName:"p"},"token ABI"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const tokenABI = [\n  {\n    name: 'Transfer',\n    inputs: [\n      { type: 'address', name: '_from', indexed: true },\n      { type: 'address', name: '_to', indexed: true },\n      { type: 'uint256', name: '_value', indexed: false },\n    ],\n    anonymous: false,\n    type: 'event',\n  },\n  {\n    name: 'Approval',\n    inputs: [\n      { type: 'address', name: '_owner', indexed: true },\n      { type: 'address', name: '_spender', indexed: true },\n      { type: 'uint256', name: '_value', indexed: false },\n    ],\n    anonymous: false,\n    type: 'event',\n  },\n  {\n    name: '__init__',\n    outputs: [],\n    inputs: [\n      { type: 'bytes32', name: '_name' },\n      { type: 'bytes32', name: '_symbol' },\n      { type: 'uint256', name: '_decimals' },\n      { type: 'uint256', name: '_supply' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'constructor',\n  },\n  {\n    name: 'deposit',\n    outputs: [],\n    inputs: [],\n    constant: false,\n    payable: true,\n    type: 'function',\n    gas: 74279,\n  },\n  {\n    name: 'withdraw',\n    outputs: [{ type: 'bool', name: 'out' }],\n    inputs: [{ type: 'uint256', name: '_value' }],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 108706,\n  },\n  {\n    name: 'totalSupply',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 543,\n  },\n  {\n    name: 'balanceOf',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [{ type: 'address', name: '_owner' }],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 745,\n  },\n  {\n    name: 'transfer',\n    outputs: [{ type: 'bool', name: 'out' }],\n    inputs: [\n      { type: 'address', name: '_to' },\n      { type: 'uint256', name: '_value' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 74698,\n  },\n  {\n    name: 'transferFrom',\n    outputs: [{ type: 'bool', name: 'out' }],\n    inputs: [\n      { type: 'address', name: '_from' },\n      { type: 'address', name: '_to' },\n      { type: 'uint256', name: '_value' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 110600,\n  },\n  {\n    name: 'approve',\n    outputs: [{ type: 'bool', name: 'out' }],\n    inputs: [\n      { type: 'address', name: '_spender' },\n      { type: 'uint256', name: '_value' },\n    ],\n    constant: false,\n    payable: false,\n    type: 'function',\n    gas: 37888,\n  },\n  {\n    name: 'allowance',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [\n      { type: 'address', name: '_owner' },\n      { type: 'address', name: '_spender' },\n    ],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 1025,\n  },\n  {\n    name: 'name',\n    outputs: [{ type: 'bytes32', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 723,\n  },\n  {\n    name: 'symbol',\n    outputs: [{ type: 'bytes32', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 753,\n  },\n  {\n    name: 'decimals',\n    outputs: [{ type: 'uint256', name: 'out' }],\n    inputs: [],\n    constant: true,\n    payable: false,\n    type: 'function',\n    gas: 783,\n  },\n]\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const tokenContract = new web3.eth.Contract(tokenABI, tokenAddress)\n")))}d.isMDXComponent=!0},3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>l});var a=t(67294);function s(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function u(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){s(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function p(n,e){if(null==n)return{};var t,a,s=function(n,e){if(null==n)return{};var t,a,s={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(s[t]=n[t]);return s}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(s[t]=n[t])}return s}var r=a.createContext({}),i=function(n){var e=a.useContext(r),t=e;return n&&(t="function"==typeof n?n(e):u(u({},e),n)),t},c=function(n){var e=i(n.components);return a.createElement(r.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(n,e){var t=n.components,s=n.mdxType,o=n.originalType,r=n.parentName,c=p(n,["components","mdxType","originalType","parentName"]),m=i(t),l=s,y=m["".concat(r,".").concat(l)]||m[l]||d[l]||o;return t?a.createElement(y,u(u({ref:e},c),{},{components:t})):a.createElement(y,u({ref:e},c))}));function l(n,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var o=t.length,u=new Array(o);u[0]=m;var p={};for(var r in e)hasOwnProperty.call(e,r)&&(p[r]=e[r]);p.originalType=n,p.mdxType="string"==typeof n?n:s,u[1]=p;for(var i=2;i<o;i++)u[i]=t[i];return a.createElement.apply(null,u)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);