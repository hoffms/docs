"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[75781],{34439:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const i={},o=void 0,l={unversionedId:"contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolDerivedState",id:"contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolDerivedState",title:"IUniswapV3PoolDerivedState",description:"Contains view functions to provide information about the pool that is computed rather than stored on the",source:"@site/docs/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolDerivedState.md",sourceDirName:"contracts/v3/reference/core/interfaces/pool",slug:"/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolDerivedState",permalink:"/docs/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolDerivedState",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolDerivedState.md",tags:[],version:"current",frontMatter:{},sidebar:"contractsSidebar",previous:{title:"IUniswapV3PoolActions",permalink:"/docs/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolActions"},next:{title:"IUniswapV3PoolEvents",permalink:"/docs/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolEvents"}},s={},p=[{value:"Functions",id:"functions",level:2},{value:"observe",id:"observe",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Return Values:",id:"return-values",level:4},{value:"snapshotCumulativesInside",id:"snapshotcumulativesinside",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Return Values:",id:"return-values-1",level:4}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Contains view functions to provide information about the pool that is computed rather than stored on the\nblockchain. The functions here may have variable gas costs."),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"observe"},"observe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"  function observe(\n    uint32[] secondsAgos\n  ) external view returns (int56[] tickCumulatives, uint160[] secondsPerLiquidityCumulativeX128s)\n")),(0,r.kt)("p",null,"Returns the cumulative tick and liquidity as of each timestamp ",(0,r.kt)("inlineCode",{parentName:"p"},"secondsAgo")," from the current block timestamp"),(0,r.kt)("p",null,"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\nthe beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\nyou must call it with secondsAgos = ","[3600, 0]",".\nThe time weighted average tick represents the geometric time weighted average price of the pool, in\nlog base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio."),(0,r.kt)("h4",{id:"parameters"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"secondsAgos")),(0,r.kt)("td",{parentName:"tr",align:"left"},"uint32[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"From how long ago each cumulative tick and liquidity value should be returned")))),(0,r.kt)("h4",{id:"return-values"},"Return Values:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"tickCumulatives")),(0,r.kt)("td",{parentName:"tr",align:"left"},"int56[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Cumulative tick values as of each ",(0,r.kt)("inlineCode",{parentName:"td"},"secondsAgos")," from the current block timestamp")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"secondsPerLiquidityCumulativeX128s")),(0,r.kt)("td",{parentName:"tr",align:"left"},"uint160[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Cumulative seconds per liquidity-in-range value as of each ",(0,r.kt)("inlineCode",{parentName:"td"},"secondsAgos")," from the current block")))),(0,r.kt)("p",null,"timestamp"),(0,r.kt)("h3",{id:"snapshotcumulativesinside"},"snapshotCumulativesInside"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"  function snapshotCumulativesInside(\n    int24 tickLower,\n    int24 tickUpper\n  ) external returns (int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside)\n")),(0,r.kt)("p",null,"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"),(0,r.kt)("p",null,"Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\nI.e., snapshots cannot be compared if a position is not held for the entire period between when the first\nsnapshot is taken and the second snapshot is taken."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"tickLower")),(0,r.kt)("td",{parentName:"tr",align:"left"},"int24"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The lower tick of the range")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"tickUpper")),(0,r.kt)("td",{parentName:"tr",align:"left"},"int24"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The upper tick of the range")))),(0,r.kt)("h4",{id:"return-values-1"},"Return Values:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"tickCumulativeInside")),(0,r.kt)("td",{parentName:"tr",align:"left"},"int56"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The snapshot of the tick accumulator for the range")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"secondsPerLiquidityInsideX128")),(0,r.kt)("td",{parentName:"tr",align:"left"},"uint160"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The snapshot of seconds per liquidity for the range")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"secondsInside")),(0,r.kt)("td",{parentName:"tr",align:"left"},"uint32"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The snapshot of seconds per liquidity for the range")))))}d.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);