"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[56470],{83318:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(83117),i=(t(67294),t(3905));const r={},o="Live Examples - Real Mini-Apps in Action",l={unversionedId:"sdk/trigger-sdk/examples",id:"sdk/trigger-sdk/examples",title:"Live Examples - Real Mini-Apps in Action",description:"Explore working examples of Sherry SDK mini-apps across different complexity levels and use cases. Each example includes complete source code, deployment instructions, and live demos.",source:"@site/docs/sdk/trigger-sdk/examples.md",sourceDirName:"sdk/trigger-sdk",slug:"/sdk/trigger-sdk/examples",permalink:"/docs/sdk/trigger-sdk/examples",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/sdk/trigger-sdk/examples.md",tags:[],version:"current",frontMatter:{},sidebar:"sdkSidebar",previous:{title:"Creating Your First Mini App",permalink:"/docs/sdk/trigger-sdk/creatingminiapp"},next:{title:"Quick Start",permalink:"/docs/sdk/trigger-sdk/quickstart"}},s={},p=[{value:"\ud83c\udfaf <strong>Quick Navigation</strong>",id:"-quick-navigation",level:2},{value:"\ud83c\udfaf <strong>Getting Started Guide</strong>",id:"-getting-started-guide",level:2},{value:"Step 1: Choose Your Level",id:"step-1-choose-your-level",level:3},{value:"Step 2: Clone &amp; Deploy",id:"step-2-clone--deploy",level:3},{value:"Step 3: Customize &amp; Extend",id:"step-3-customize--extend",level:3},{value:"\ud83d\udfe2 Beginner Examples",id:"beginner-examples",level:2},{value:"1. <strong>Simple Creator Tip</strong>",id:"1-simple-creator-tip",level:3},{value:"2. <strong>Charity Donation Selector</strong>",id:"2-charity-donation-selector",level:3},{value:"3. <strong>Fixed-Price NFT Mint</strong>",id:"3-fixed-price-nft-mint",level:3},{value:"4. <strong>Simple Newsletter Signup</strong>",id:"4-simple-newsletter-signup",level:3},{value:"\ud83d\udfe1 Intermediate Examples",id:"intermediate-examples",level:2},{value:"5. <strong>Token Approval + Swap Flow</strong>",id:"5-token-approval--swap-flow",level:3},{value:"6. <strong>DAO Voting with Proposals</strong>",id:"6-dao-voting-with-proposals",level:3},{value:"7. <strong>Cross-Chain Asset Bridge</strong>",id:"7-cross-chain-asset-bridge",level:3},{value:"8. <strong>Multi-Step User Onboarding</strong>",id:"8-multi-step-user-onboarding",level:3},{value:"\ud83d\udd34 Advanced Examples",id:"advanced-examples",level:2},{value:"9. <strong>AI-Powered Yield Optimizer</strong>",id:"9-ai-powered-yield-optimizer",level:3},{value:"10. <strong>Dynamic NFT Pricing Engine</strong>",id:"10-dynamic-nft-pricing-engine",level:3},{value:"11. <strong>Advanced Arbitrage Bot</strong>",id:"11-advanced-arbitrage-bot",level:3},{value:"\ud83d\ude80 Full Applications",id:"full-applications",level:2},{value:"12. <strong>DeFi Portfolio Manager</strong>",id:"12-defi-portfolio-manager",level:3},{value:"13. <strong>Social Trading Platform</strong>",id:"13-social-trading-platform",level:3},{value:"14. <strong>Decentralized Insurance Platform</strong>",id:"14-decentralized-insurance-platform",level:3},{value:"\ud83d\udd27 <strong>Development Tools</strong>",id:"-development-tools",level:2},{value:"Testing Your Mini-Apps",id:"testing-your-mini-apps",level:3},{value:"Deployment Options",id:"deployment-options",level:3},{value:"\ud83d\udcda <strong>Additional Resources</strong>",id:"-additional-resources",level:2},{value:"\ud83d\ude80 <strong>What&#39;s Next?</strong>",id:"-whats-next",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"live-examples---real-mini-apps-in-action"},"Live Examples - Real Mini-Apps in Action"),(0,i.kt)("p",null,"Explore working examples of Sherry SDK mini-apps across different complexity levels and use cases. Each example includes complete source code, deployment instructions, and live demos."),(0,i.kt)("h2",{id:"-quick-navigation"},"\ud83c\udfaf ",(0,i.kt)("strong",{parentName:"h2"},"Quick Navigation")),(0,i.kt)("div",{style:{display:"grid",gridTemplateColumns:"repeat(auto-fit, minmax(200px, 1fr))",gap:"1rem",margin:"2rem 0"}},(0,i.kt)("a",{href:"#beginner-examples",style:{padding:"1rem",border:"1px solid var(--ifm-color-emphasis-300)",borderRadius:"8px",textDecoration:"none",color:"inherit"}},(0,i.kt)("h4",null,"\ud83d\udfe2 Beginner"),(0,i.kt)("p",null,"Simple transfers and basic contracts")),(0,i.kt)("a",{href:"#intermediate-examples",style:{padding:"1rem",border:"1px solid var(--ifm-color-emphasis-300)",borderRadius:"8px",textDecoration:"none",color:"inherit"}},(0,i.kt)("h4",null,"\ud83d\udfe1 Intermediate"),(0,i.kt)("p",null,"Smart contracts and multi-step flows")),(0,i.kt)("a",{href:"#advanced-examples",style:{padding:"1rem",border:"1px solid var(--ifm-color-emphasis-300)",borderRadius:"8px",textDecoration:"none",color:"inherit"}},(0,i.kt)("h4",null,"\ud83d\udd34 Advanced"),(0,i.kt)("p",null,"Dynamic actions and complex logic")),(0,i.kt)("a",{href:"#full-applications",style:{padding:"1rem",border:"1px solid var(--ifm-color-emphasis-300)",borderRadius:"8px",textDecoration:"none",color:"inherit"}},(0,i.kt)("h4",null,"\ud83d\ude80 Applications"),(0,i.kt)("p",null,"Complete mini-app implementations"))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"-getting-started-guide"},"\ud83c\udfaf ",(0,i.kt)("strong",{parentName:"h2"},"Getting Started Guide")),(0,i.kt)("h3",{id:"step-1-choose-your-level"},"Step 1: Choose Your Level"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\ud83d\udfe2 Beginner"),": Start with Transfer Actions or simple Blockchain Actions"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\ud83d\udfe1 Intermediate"),": Try Action Flows and more complex parameter handling"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\ud83d\udd34 Advanced"),": Build Dynamic Actions with server-side logic"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\ud83d\ude80 Applications"),": Combine multiple action types for complete solutions")),(0,i.kt)("h3",{id:"step-2-clone--deploy"},"Step 2: Clone & Deploy"),(0,i.kt)("p",null,"Each example includes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u2705 Complete source code"),(0,i.kt)("li",{parentName:"ul"},"\u2705 Step-by-step setup instructions"),(0,i.kt)("li",{parentName:"ul"},"\u2705 Deployment scripts"),(0,i.kt)("li",{parentName:"ul"},"\u2705 Live demo links"),(0,i.kt)("li",{parentName:"ul"},"\u2705 Explanation of key concepts")),(0,i.kt)("h3",{id:"step-3-customize--extend"},"Step 3: Customize & Extend"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Modify parameters for your use case"),(0,i.kt)("li",{parentName:"ul"},"Change contract addresses and ABIs"),(0,i.kt)("li",{parentName:"ul"},"Add your own business logic"),(0,i.kt)("li",{parentName:"ul"},"Integrate with your existing systems")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"beginner-examples"},"\ud83d\udfe2 Beginner Examples"),(0,i.kt)("p",null,"Perfect for getting started with the SDK basics."),(0,i.kt)("h3",{id:"1-simple-creator-tip"},"1. ",(0,i.kt)("strong",{parentName:"h3"},"Simple Creator Tip")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 2 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Type: Transfer")),(0,i.kt)("p",null,"A one-click tipping system for content creators."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createMetadata, Metadata } from '@sherrylinks/sdk';\n\nconst creatorTipApp: Metadata = {\n  url: 'https://my-creator-tip-app.com',\n  icon: '\u2615',\n  title: 'Tip the Creator',\n  description: 'Show appreciation for great content',\n  actions: [\n    {\n      type: 'transfer',\n      label: 'Send Tip',\n      chains: { source: 'avalanche' },\n      to: '0x742d35Cc6734C0532925a3b8D4ccd306f6F4B26C',\n      amountConfig: {\n        type: 'radio',\n        label: 'Tip Amount',\n        options: [\n          { label: 'Coffee \u2615', value: 0.01, description: '0.01 AVAX' },\n          { label: 'Lunch \ud83c\udf55', value: 0.05, description: '0.05 AVAX' },\n          { label: 'Dinner \ud83c\udf7d\ufe0f', value: 0.1, description: '0.1 AVAX' },\n        ],\n      },\n    },\n  ],\n};\n\nexport default createMetadata(creatorTipApp);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Basic Transfer Action setup"),(0,i.kt)("li",{parentName:"ul"},"Interactive amount selection"),(0,i.kt)("li",{parentName:"ul"},"User-friendly option labeling")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"2-charity-donation-selector"},"2. ",(0,i.kt)("strong",{parentName:"h3"},"Charity Donation Selector")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 3 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Type: Transfer")),(0,i.kt)("p",null,"Let users choose between multiple charities with custom amounts."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const charityApp: Metadata = {\n  url: 'https://charity-donations.com',\n  icon: '\ud83d\udc9d',\n  title: 'Support a Cause',\n  description: 'Make a difference with crypto donations',\n  actions: [\n    {\n      type: 'transfer',\n      label: 'Donate Now',\n      chains: { source: 'celo' },\n      recipient: {\n        type: 'select',\n        label: 'Choose Your Cause',\n        options: [\n          {\n            label: 'Education Fund \ud83c\udf93',\n            value: '0x1234567890123456789012345678901234567890',\n            description: 'Supporting education worldwide',\n          },\n          {\n            label: 'Climate Action \ud83c\udf0d',\n            value: '0x2345678901234567890123456789012345678901',\n            description: 'Fighting climate change',\n          },\n          {\n            label: 'Healthcare Access \ud83c\udfe5',\n            value: '0x3456789012345678901234567890123456789012',\n            description: 'Improving global healthcare',\n          },\n        ],\n      },\n      amountConfig: {\n        type: 'select',\n        label: 'Donation Amount',\n        options: [\n          { label: '$5 worth', value: 0.01 },\n          { label: '$25 worth', value: 0.05 },\n          { label: '$50 worth', value: 0.1 },\n        ],\n      },\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Both recipient and amount selection"),(0,i.kt)("li",{parentName:"ul"},"Dropdown vs radio button UX"),(0,i.kt)("li",{parentName:"ul"},"Meaningful option descriptions")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"3-fixed-price-nft-mint"},"3. ",(0,i.kt)("strong",{parentName:"h3"},"Fixed-Price NFT Mint")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 5 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Type: Blockchain")),(0,i.kt)("p",null,"Simple NFT minting with fixed price and metadata."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const nftMintAbi = [\n  {\n    name: 'mint',\n    type: 'function',\n    stateMutability: 'payable',\n    inputs: [\n      { name: 'to', type: 'address' },\n      { name: 'tokenURI', type: 'string' },\n    ],\n    outputs: [{ name: 'tokenId', type: 'uint256' }],\n  },\n] as const;\n\nconst simpleNFTApp: Metadata = {\n  url: 'https://my-nft-collection.com',\n  icon: '\ud83c\udfa8',\n  title: 'Mint Cosmic NFT',\n  description: 'Get your unique cosmic NFT',\n  actions: [\n    {\n      type: 'blockchain',\n      label: 'Mint for 0.1 AVAX',\n      address: '0x742d35Cc6734C0532925a3b8D4ccd306f6F4B26C',\n      abi: nftMintAbi,\n      functionName: 'mint',\n      chains: { source: 'fuji' },\n      amount: 0.1,\n      params: [\n        {\n          name: 'to',\n          label: 'Your Address',\n          type: 'address',\n          required: true,\n          description: 'Address that will receive the NFT',\n        },\n        {\n          name: 'tokenURI',\n          label: 'Metadata',\n          type: 'text',\n          value: 'ipfs://QmYourNftMetadata123',\n          fixed: true,\n          description: 'NFT metadata URI',\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Basic Blockchain Action setup"),(0,i.kt)("li",{parentName:"ul"},"Working with contract ABIs"),(0,i.kt)("li",{parentName:"ul"},"Fixed vs user-input parameters"),(0,i.kt)("li",{parentName:"ul"},"Payable function handling")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"4-simple-newsletter-signup"},"4. ",(0,i.kt)("strong",{parentName:"h3"},"Simple Newsletter Signup")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 3 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Type: HTTP")),(0,i.kt)("p",null,"Collect user emails with optional preferences."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const newsletterApp: Metadata = {\n  url: 'https://newsletter-signup.com',\n  icon: '\ud83d\udce7',\n  title: 'Join Our Newsletter',\n  description: 'Stay updated with the latest Web3 news',\n  actions: [\n    {\n      type: 'http',\n      label: 'Subscribe Now',\n      path: 'https://api.newsletter.com/subscribe',\n      params: [\n        {\n          name: 'email',\n          label: 'Email Address',\n          type: 'email',\n          required: true,\n          description: \"We'll never spam you\",\n        },\n        {\n          name: 'name',\n          label: 'First Name',\n          type: 'text',\n          required: false,\n          description: 'Help us personalize your experience',\n        },\n        {\n          name: 'interests',\n          label: 'Your Interests',\n          type: 'select',\n          required: false,\n          options: [\n            { label: 'DeFi', value: 'defi' },\n            { label: 'NFTs', value: 'nfts' },\n            { label: 'Gaming', value: 'gaming' },\n            { label: 'Development', value: 'dev' },\n          ],\n        },\n        {\n          name: 'frequency',\n          label: 'Email Frequency',\n          type: 'radio',\n          required: true,\n          options: [\n            { label: 'Daily', value: 'daily' },\n            { label: 'Weekly', value: 'weekly' },\n            { label: 'Monthly', value: 'monthly' },\n          ],\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"HTTP Action basics"),(0,i.kt)("li",{parentName:"ul"},"Form parameter types"),(0,i.kt)("li",{parentName:"ul"},"Email validation"),(0,i.kt)("li",{parentName:"ul"},"Radio vs select options")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"intermediate-examples"},"\ud83d\udfe1 Intermediate Examples"),(0,i.kt)("p",null,"Ready to build more sophisticated mini-apps."),(0,i.kt)("h3",{id:"5-token-approval--swap-flow"},"5. ",(0,i.kt)("strong",{parentName:"h3"},"Token Approval + Swap Flow")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 15 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Type: Flow")),(0,i.kt)("p",null,"A two-step process: approve tokens, then swap them."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ActionFlow } from '@sherrylinks/sdk';\n\nconst tokenSwapFlow: ActionFlow = {\n  type: 'flow',\n  label: 'Swap USDC for AVAX',\n  initialActionId: 'approve-usdc',\n  actions: [\n    // Step 1: Approve USDC spending\n    {\n      id: 'approve-usdc',\n      type: 'blockchain',\n      label: 'Step 1: Approve USDC',\n      address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n      abi: erc20Abi,\n      functionName: 'approve',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'spender',\n          label: 'DEX Router',\n          type: 'address',\n          value: '0x60aE616a2155Ee3d9A68541Ba4544862310933d4',\n          fixed: true,\n        },\n        {\n          name: 'amount',\n          label: 'USDC Amount',\n          type: 'number',\n          required: true,\n          min: 1,\n          max: 10000,\n        },\n      ],\n      nextActions: [\n        {\n          actionId: 'execute-swap',\n          conditions: [{ field: 'lastResult.status', operator: 'eq', value: 'success' }],\n        },\n        {\n          actionId: 'approval-failed',\n        },\n      ],\n    },\n\n    // Step 2: Execute the swap\n    {\n      id: 'execute-swap',\n      type: 'blockchain',\n      label: 'Step 2: Swap Tokens',\n      address: '0x60aE616a2155Ee3d9A68541Ba4544862310933d4',\n      abi: routerAbi,\n      functionName: 'swapExactTokensForAVAX',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'amountIn',\n          label: 'Amount In',\n          type: 'number',\n          value: '{{amount}}', // From previous step\n          fixed: true,\n        },\n        {\n          name: 'amountOutMin',\n          label: 'Min AVAX Out',\n          type: 'number',\n          required: true,\n        },\n        {\n          name: 'path',\n          label: 'Swap Path',\n          type: 'text',\n          value:\n            '[\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\"]',\n          fixed: true,\n        },\n        {\n          name: 'to',\n          label: 'Recipient',\n          type: 'address',\n          value: '{{userAddress}}',\n          fixed: true,\n        },\n        {\n          name: 'deadline',\n          label: 'Deadline',\n          type: 'number',\n          value: '{{timestamp + 1200}}',\n          fixed: true,\n        },\n      ],\n      nextActions: [{ actionId: 'swap-complete' }],\n    },\n\n    // Completion states\n    {\n      id: 'swap-complete',\n      type: 'completion',\n      label: 'Swap Successful',\n      message: 'Your USDC has been swapped for AVAX! \ud83c\udf89',\n      status: 'success',\n    },\n    {\n      id: 'approval-failed',\n      type: 'completion',\n      label: 'Approval Failed',\n      message: 'Token approval failed. Please try again.',\n      status: 'error',\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Multi-step Action Flows"),(0,i.kt)("li",{parentName:"ul"},"Conditional navigation between steps"),(0,i.kt)("li",{parentName:"ul"},"Parameter passing between actions"),(0,i.kt)("li",{parentName:"ul"},"Error handling in flows")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"6-dao-voting-with-proposals"},"6. ",(0,i.kt)("strong",{parentName:"h3"},"DAO Voting with Proposals")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 10 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Type: Blockchain")),(0,i.kt)("p",null,"Vote on DAO proposals with real-time proposal data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const daoVotingApp: Metadata = {\n  url: 'https://dao-voting.com',\n  icon: '\ud83d\uddf3\ufe0f',\n  title: 'DAO Governance',\n  description: 'Vote on community proposals',\n  actions: [\n    {\n      type: 'blockchain',\n      label: 'Cast Your Vote',\n      address: '0xDAOGovernanceContract',\n      abi: daoAbi,\n      functionName: 'castVote',\n      chains: { source: 'celo' },\n      params: [\n        {\n          name: 'proposalId',\n          label: 'Active Proposals',\n          type: 'select',\n          required: true,\n          options: [\n            {\n              label: 'Proposal #42: Treasury Allocation',\n              value: 42,\n              description: 'Allocate 100K tokens for ecosystem development',\n            },\n            {\n              label: 'Proposal #43: Partnership with Protocol X',\n              value: 43,\n              description: 'Strategic partnership for cross-chain expansion',\n            },\n            {\n              label: 'Proposal #44: Governance Token Split',\n              value: 44,\n              description: '2:1 token split with updated tokenomics',\n            },\n          ],\n        },\n        {\n          name: 'support',\n          label: 'Your Vote',\n          type: 'radio',\n          required: true,\n          options: [\n            {\n              label: '\u2705 Yes - I support this proposal',\n              value: true,\n              description: 'Vote in favor of the proposal',\n            },\n            {\n              label: '\u274c No - I oppose this proposal',\n              value: false,\n              description: 'Vote against the proposal',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Complex parameter selection"),(0,i.kt)("li",{parentName:"ul"},"Boolean parameter handling"),(0,i.kt)("li",{parentName:"ul"},"Real-world DAO integration"),(0,i.kt)("li",{parentName:"ul"},"Meaningful vote descriptions")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"7-cross-chain-asset-bridge"},"7. ",(0,i.kt)("strong",{parentName:"h3"},"Cross-Chain Asset Bridge")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 12 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Type: Blockchain")),(0,i.kt)("p",null,"Bridge tokens between Avalanche and Celo networks."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const bridgeApp: Metadata = {\n  url: 'https://cross-chain-bridge.com',\n  icon: '\ud83c\udf09',\n  title: 'Cross-Chain Bridge',\n  description: 'Move assets between Avalanche and Celo',\n  actions: [\n    {\n      type: 'blockchain',\n      label: 'Bridge to Celo',\n      address: '0xBridgeContractAddress',\n      abi: bridgeAbi,\n      functionName: 'bridgeTokens',\n      chains: { source: 'avalanche', destination: 'celo' },\n      params: [\n        {\n          name: 'token',\n          label: 'Token to Bridge',\n          type: 'select',\n          required: true,\n          options: [\n            {\n              label: 'USDC (USD Coin)',\n              value: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n              description: 'Stable USD-pegged token',\n            },\n            {\n              label: 'USDT (Tether)',\n              value: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n              description: 'Widely used stablecoin',\n            },\n          ],\n        },\n        {\n          name: 'amount',\n          label: 'Amount to Bridge',\n          type: 'number',\n          required: true,\n          min: 1,\n          max: 100000,\n          description: 'Amount of tokens to send to Celo',\n        },\n        {\n          name: 'recipient',\n          label: 'Recipient on Celo',\n          type: 'address',\n          required: true,\n          description: 'Address that will receive tokens on Celo network',\n        },\n        {\n          name: 'destinationChainId',\n          label: 'Destination Chain',\n          type: 'number',\n          value: 42220,\n          fixed: true,\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cross-chain action configuration"),(0,i.kt)("li",{parentName:"ul"},"Token selection with descriptions"),(0,i.kt)("li",{parentName:"ul"},"Address validation across chains"),(0,i.kt)("li",{parentName:"ul"},"Fixed vs dynamic parameters")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"8-multi-step-user-onboarding"},"8. ",(0,i.kt)("strong",{parentName:"h3"},"Multi-Step User Onboarding")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 20 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Type: Flow")),(0,i.kt)("p",null,"Complete user onboarding with email, wallet, and NFT mint."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const onboardingFlow: ActionFlow = {\n  type: 'flow',\n  label: 'Complete Onboarding',\n  initialActionId: 'collect-info',\n  actions: [\n    // Step 1: Collect user information\n    {\n      id: 'collect-info',\n      type: 'http',\n      label: 'Welcome! Tell us about yourself',\n      path: 'https://api.myapp.com/onboard',\n      params: [\n        {\n          name: 'name',\n          label: 'Full Name',\n          type: 'text',\n          required: true,\n          minLength: 2,\n          maxLength: 50,\n        },\n        {\n          name: 'email',\n          label: 'Email Address',\n          type: 'email',\n          required: true,\n        },\n        {\n          name: 'experience',\n          label: 'Web3 Experience',\n          type: 'radio',\n          required: true,\n          options: [\n            { label: 'Complete Beginner', value: 'beginner' },\n            { label: 'Some Experience', value: 'intermediate' },\n            { label: 'Very Experienced', value: 'expert' },\n          ],\n        },\n      ],\n      nextActions: [{ actionId: 'choose-path' }],\n    },\n\n    // Step 2: Choose onboarding path\n    {\n      id: 'choose-path',\n      type: 'decision',\n      label: 'Choose Your Path',\n      title: 'What would you like to do first?',\n      options: [\n        {\n          label: 'Get my welcome NFT',\n          value: 'nft',\n          nextActionId: 'mint-welcome-nft',\n        },\n        {\n          label: 'Learn more about the platform',\n          value: 'learn',\n          nextActionId: 'learning-complete',\n        },\n        {\n          label: 'Explore features',\n          value: 'explore',\n          nextActionId: 'exploration-complete',\n        },\n      ],\n    },\n\n    // Step 3: Mint welcome NFT\n    {\n      id: 'mint-welcome-nft',\n      type: 'blockchain',\n      label: 'Mint Your Welcome NFT',\n      address: '0xWelcomeNFTContract',\n      abi: welcomeNftAbi,\n      functionName: 'mintWelcome',\n      chains: { source: 'fuji' },\n      params: [\n        {\n          name: 'to',\n          label: 'Your Address',\n          type: 'address',\n          required: true,\n        },\n        {\n          name: 'experience',\n          label: 'Experience Level',\n          type: 'text',\n          value: '{{experience}}', // From step 1\n          fixed: true,\n        },\n      ],\n      nextActions: [{ actionId: 'onboarding-complete' }],\n    },\n\n    // Completion states\n    {\n      id: 'onboarding-complete',\n      type: 'completion',\n      label: 'Welcome Aboard! \ud83c\udf89',\n      message: 'Your onboarding is complete! Check your wallet for your welcome NFT.',\n      status: 'success',\n    },\n    {\n      id: 'learning-complete',\n      type: 'completion',\n      label: 'Keep Learning!',\n      message: 'Great choice! Check out our documentation to learn more.',\n      status: 'success',\n    },\n    {\n      id: 'exploration-complete',\n      type: 'completion',\n      label: 'Happy Exploring!',\n      message: 'Dive in and explore all our features. Welcome to the community!',\n      status: 'success',\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Complex multi-step flows"),(0,i.kt)("li",{parentName:"ul"},"Decision trees and branching"),(0,i.kt)("li",{parentName:"ul"},"Data passing between steps"),(0,i.kt)("li",{parentName:"ul"},"Multiple completion states")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"advanced-examples"},"\ud83d\udd34 Advanced Examples"),(0,i.kt)("p",null,"Complex mini-apps with server-side logic and optimization."),(0,i.kt)("h3",{id:"9-ai-powered-yield-optimizer"},"9. ",(0,i.kt)("strong",{parentName:"h3"},"AI-Powered Yield Optimizer")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 30 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Type: Dynamic")),(0,i.kt)("p",null,"Server calculates optimal DeFi yield strategies across multiple protocols."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const yieldOptimizerApp: Metadata = {\n  url: 'https://yield-optimizer.com',\n  icon: '\ud83e\udd16',\n  title: 'AI Yield Optimizer',\n  description: 'Maximize your DeFi yields with AI-powered strategies',\n  baseUrl: 'https://api.yield-optimizer.com',\n  actions: [\n    {\n      type: 'dynamic',\n      label: 'Optimize My Yield',\n      path: '/api/calculate-optimal-yield',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'amount',\n          label: 'Investment Amount (USDC)',\n          type: 'number',\n          required: true,\n          min: 100,\n          max: 1000000,\n          description: 'Minimum $100 for optimal strategy calculation',\n        },\n        {\n          name: 'riskTolerance',\n          label: 'Risk Tolerance',\n          type: 'select',\n          required: true,\n          options: [\n            {\n              label: 'Conservative (3-5% APY)',\n              value: 'low',\n              description: 'Stable protocols only, lower risk',\n            },\n            {\n              label: 'Moderate (5-12% APY)',\n              value: 'medium',\n              description: 'Balanced risk/reward approach',\n            },\n            {\n              label: 'Aggressive (12%+ APY)',\n              value: 'high',\n              description: 'Higher risk for maximum returns',\n            },\n          ],\n        },\n        {\n          name: 'timeHorizon',\n          label: 'Investment Duration',\n          type: 'radio',\n          required: true,\n          options: [\n            { label: '1 Week', value: 7, description: 'Short-term gains' },\n            { label: '1 Month', value: 30, description: 'Medium-term strategy' },\n            { label: '3 Months', value: 90, description: 'Long-term optimization' },\n            { label: '1 Year', value: 365, description: 'Maximum compounding' },\n          ],\n        },\n        {\n          name: 'autoCompound',\n          label: 'Auto-compound rewards',\n          type: 'boolean',\n          value: true,\n          description: 'Automatically reinvest rewards for compound growth',\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Backend Implementation (Next.js API Route):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// pages/api/calculate-optimal-yield.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { serialize } from 'wagmi';\nimport { avalanche } from 'viem/chains';\nimport { ExecutionResponse } from '@sherrylinks/sdk';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const amount = parseFloat(searchParams.get('amount') || '0');\n    const riskTolerance = searchParams.get('riskTolerance');\n    const timeHorizon = parseInt(searchParams.get('timeHorizon') || '30');\n    const autoCompound = searchParams.get('autoCompound') === 'true';\n\n    // \ud83e\udde0 AI-POWERED YIELD CALCULATION\n    const protocols = await fetchProtocolYields();\n    const filteredProtocols = filterByRisk(protocols, riskTolerance);\n    const optimalStrategy = await calculateOptimalAllocation({\n      protocols: filteredProtocols,\n      amount,\n      timeHorizon,\n      autoCompound,\n    });\n\n    // Build optimized transaction\n    const transaction = await buildYieldTransaction(optimalStrategy);\n    const serializedTx = serialize(transaction);\n\n    const response: ExecutionResponse = {\n      serializedTransaction: serializedTx,\n      chainId: 'avalanche',\n      params: {\n        functionName: 'executeYieldStrategy',\n        args: {\n          strategy: optimalStrategy.name,\n          expectedAPY: `${optimalStrategy.projectedAPY}%`,\n          protocols: optimalStrategy.protocols.join(', '),\n          projectedValue: `$${(amount * (1 + optimalStrategy.projectedAPY / 100)).toFixed(2)} after ${timeHorizon} days`,\n        },\n      },\n    };\n\n    return NextResponse.json(response);\n  } catch (error) {\n    return NextResponse.json({ error: 'Yield calculation failed' }, { status: 500 });\n  }\n}\n\n// AI yield calculation functions\nasync function fetchProtocolYields() {\n  // Fetch real-time yields from Aave, Compound, Yearn, etc.\n  const protocols = await Promise.all([\n    fetch('https://api.aave.com/data/liquidity/v1').then(r => r.json()),\n    fetch('https://api.compound.finance/api/v2/ctoken').then(r => r.json()),\n    fetch('https://api.yearn.finance/v1/chains/1/vaults/all').then(r => r.json()),\n  ]);\n  return protocols.flat();\n}\n\nfunction filterByRisk(protocols: any[], risk: string) {\n  const riskThresholds = { low: 3, medium: 6, high: 10 };\n  return protocols.filter(p => p.riskScore <= riskThresholds[risk]);\n}\n\nasync function calculateOptimalAllocation(config: any) {\n  // Portfolio optimization algorithm (Markowitz, Black-Litterman, etc.)\n  return {\n    name: 'Multi-Protocol Yield Strategy',\n    protocols: ['Aave USDC', 'Compound DAI', 'Yearn USDT'],\n    allocation: [0.4, 0.35, 0.25],\n    projectedAPY: 8.7,\n    riskScore: 4.2,\n  };\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Complex Dynamic Action implementation"),(0,i.kt)("li",{parentName:"ul"},"Server-side AI/ML integration"),(0,i.kt)("li",{parentName:"ul"},"Multi-protocol yield optimization"),(0,i.kt)("li",{parentName:"ul"},"Real-time data processing"),(0,i.kt)("li",{parentName:"ul"},"Advanced parameter handling")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"10-dynamic-nft-pricing-engine"},"10. ",(0,i.kt)("strong",{parentName:"h3"},"Dynamic NFT Pricing Engine")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 25 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Type: Dynamic")),(0,i.kt)("p",null,"NFT pricing that adapts to market conditions, demand, and whale activity."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const dynamicNFTApp: Metadata = {\n  url: 'https://dynamic-nft.com',\n  icon: '\ud83d\udc8e',\n  title: 'Smart NFT Mint',\n  description: 'AI-powered dynamic pricing based on market conditions',\n  baseUrl: 'https://api.dynamic-nft.com',\n  actions: [\n    {\n      type: 'dynamic',\n      label: 'Mint at Current Price',\n      path: '/api/calculate-nft-price',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'tier',\n          label: 'NFT Tier',\n          type: 'select',\n          required: true,\n          options: [\n            {\n              label: 'Common \u26aa',\n              value: 'common',\n              description: 'Basic tier with standard traits',\n            },\n            {\n              label: 'Rare \ud83d\udd35',\n              value: 'rare',\n              description: 'Enhanced traits and special effects',\n            },\n            {\n              label: 'Epic \ud83d\udfe3',\n              value: 'epic',\n              description: 'Unique animations and rare attributes',\n            },\n            {\n              label: 'Legendary \ud83d\udfe1',\n              value: 'legendary',\n              description: 'Ultra-rare with exclusive benefits',\n            },\n          ],\n        },\n        {\n          name: 'quantity',\n          label: 'Quantity',\n          type: 'radio',\n          required: true,\n          options: [\n            { label: '1 NFT', value: 1, description: 'Single mint' },\n            { label: '3 NFTs', value: 3, description: '5% bulk discount' },\n            { label: '5 NFTs', value: 5, description: '10% bulk discount' },\n            { label: '10 NFTs', value: 10, description: '15% bulk discount' },\n          ],\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Backend Implementation:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// pages/api/calculate-nft-price.ts\nexport async function POST(req: NextRequest) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const tier = searchParams.get('tier');\n    const quantity = parseInt(searchParams.get('quantity') || '1');\n\n    // \ud83c\udfaf DYNAMIC PRICING ALGORITHM\n    const marketData = await analyzeMarketConditions();\n    const demandMetrics = await calculateDemandMetrics(tier);\n    const whaleActivity = await detectWhaleActivity();\n\n    const basePrice = getTierBasePrice(tier);\n    const dynamicMultiplier = calculatePriceMultiplier({\n      marketData,\n      demandMetrics,\n      whaleActivity,\n      quantity,\n    });\n\n    const finalPrice = basePrice * dynamicMultiplier * quantity;\n    const bulkDiscount = getBulkDiscount(quantity);\n    const totalPrice = finalPrice * (1 - bulkDiscount);\n\n    // Build mint transaction with dynamic pricing\n    const transaction = await buildMintTransaction({\n      tier,\n      quantity,\n      price: totalPrice,\n      recipient: searchParams.get('userAddress'),\n    });\n\n    const response: ExecutionResponse = {\n      serializedTransaction: serialize(transaction),\n      chainId: 'avalanche',\n      params: {\n        functionName: 'mintWithDynamicPrice',\n        args: {\n          tier: tier,\n          quantity: quantity,\n          currentPrice: `${totalPrice.toFixed(3)} AVAX`,\n          marketCondition: marketData.condition,\n          demandLevel: demandMetrics.level,\n          priceChange: `${((dynamicMultiplier - 1) * 100).toFixed(1)}%`,\n          bulkDiscount: `${(bulkDiscount * 100).toFixed(0)}%`,\n        },\n      },\n    };\n\n    return NextResponse.json(response);\n  } catch (error) {\n    return NextResponse.json({ error: 'Price calculation failed' }, { status: 500 });\n  }\n}\n\n// Dynamic pricing functions\nasync function analyzeMarketConditions() {\n  // Analyze overall NFT market, ETH price, gas fees, etc.\n  return {\n    condition: 'bullish', // bearish, neutral, bullish\n    volatility: 0.15,\n    volume24h: 1500000,\n  };\n}\n\nasync function calculateDemandMetrics(tier: string) {\n  // Analyze recent mints, wallet interest, social sentiment\n  return {\n    level: 'high', // low, medium, high\n    recentMints: 47,\n    uniqueWallets: 156,\n    socialSentiment: 0.8,\n  };\n}\n\nasync function detectWhaleActivity() {\n  // Monitor large wallet movements and buying patterns\n  return {\n    recentWhaleActivity: true,\n    largeWalletInterest: 0.7,\n  };\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Real-time market analysis"),(0,i.kt)("li",{parentName:"ul"},"Dynamic pricing algorithms"),(0,i.kt)("li",{parentName:"ul"},"Whale detection systems"),(0,i.kt)("li",{parentName:"ul"},"Bulk discount calculations"),(0,i.kt)("li",{parentName:"ul"},"Market sentiment integration")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"11-advanced-arbitrage-bot"},"11. ",(0,i.kt)("strong",{parentName:"h3"},"Advanced Arbitrage Bot")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 35 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Type: Dynamic")),(0,i.kt)("p",null,"Multi-DEX arbitrage with flash loans and optimal routing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const arbitrageBotApp: Metadata = {\n  url: 'https://arbitrage-bot.com',\n  icon: '\u26a1',\n  title: 'Flash Arbitrage Bot',\n  description: 'Execute profitable arbitrage opportunities across DEXs',\n  baseUrl: 'https://api.arbitrage-bot.com',\n  actions: [\n    {\n      type: 'dynamic',\n      label: 'Find & Execute Arbitrage',\n      path: '/api/find-arbitrage',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'tokenPair',\n          label: 'Token Pair',\n          type: 'select',\n          required: true,\n          options: [\n            {\n              label: 'AVAX/USDC',\n              value: 'AVAX_USDC',\n              description: 'Most liquid pair with frequent opportunities',\n            },\n            {\n              label: 'AVAX/USDT',\n              value: 'AVAX_USDT',\n              description: 'High volume, good for large trades',\n            },\n            {\n              label: 'USDC/USDT',\n              value: 'USDC_USDT',\n              description: 'Stable pair with smaller but consistent profits',\n            },\n          ],\n        },\n        {\n          name: 'maxSlippage',\n          label: 'Max Slippage (%)',\n          type: 'radio',\n          required: true,\n          options: [\n            { label: '0.1%', value: 0.1, description: 'Conservative, safer trades' },\n            { label: '0.5%', value: 0.5, description: 'Balanced approach' },\n            { label: '1.0%', value: 1.0, description: 'Aggressive, higher profits' },\n          ],\n        },\n        {\n          name: 'minProfitThreshold',\n          label: 'Minimum Profit Threshold',\n          type: 'number',\n          required: true,\n          min: 0.01,\n          max: 5.0,\n          value: 0.1,\n          description: 'Minimum profit % to execute trade',\n        },\n        {\n          name: 'useFlashLoan',\n          label: 'Use Flash Loans',\n          type: 'boolean',\n          value: true,\n          description: 'Enable flash loans for capital-free arbitrage',\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Backend Implementation:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// pages/api/find-arbitrage.ts\nexport async function POST(req: NextRequest) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const tokenPair = searchParams.get('tokenPair');\n    const maxSlippage = parseFloat(searchParams.get('maxSlippage') || '0.5');\n    const minProfitThreshold = parseFloat(searchParams.get('minProfitThreshold') || '0.1');\n    const useFlashLoan = searchParams.get('useFlashLoan') === 'true';\n\n    // \ud83d\udd0d SCAN MULTIPLE DEXs FOR ARBITRAGE OPPORTUNITIES\n    const dexPrices = await scanDEXPrices(tokenPair);\n    const opportunities = findArbitrageOpportunities(dexPrices, minProfitThreshold);\n\n    if (opportunities.length === 0) {\n      return NextResponse.json(\n        {\n          error: 'No profitable arbitrage opportunities found',\n        },\n        { status: 404 },\n      );\n    }\n\n    // Select best opportunity\n    const bestOpportunity = opportunities[0];\n\n    // Calculate optimal trade size\n    const optimalSize = calculateOptimalTradeSize(bestOpportunity, maxSlippage);\n\n    // Build arbitrage transaction\n    const transaction = useFlashLoan\n      ? await buildFlashLoanArbitrage(bestOpportunity, optimalSize)\n      : await buildDirectArbitrage(bestOpportunity, optimalSize);\n\n    const response: ExecutionResponse = {\n      serializedTransaction: serialize(transaction),\n      chainId: 'avalanche',\n      params: {\n        functionName: useFlashLoan ? 'executeFlashArbitrage' : 'executeDirectArbitrage',\n        args: {\n          pair: tokenPair,\n          buyDEX: bestOpportunity.buyDEX,\n          sellDEX: bestOpportunity.sellDEX,\n          tradeSize: `${optimalSize} tokens`,\n          expectedProfit: `${bestOpportunity.profitPercent.toFixed(2)}%`,\n          estimatedGain: `${((optimalSize * bestOpportunity.profitPercent) / 100).toFixed(2)}`,\n          flashLoan: useFlashLoan,\n        },\n      },\n    };\n\n    return NextResponse.json(response);\n  } catch (error) {\n    return NextResponse.json({ error: 'Arbitrage calculation failed' }, { status: 500 });\n  }\n}\n\nasync function scanDEXPrices(tokenPair: string) {\n  // Scan TraderJoe, Pangolin, SushiSwap, etc.\n  const dexAPIs = [\n    'https://api.traderjoe.xyz/v1/prices',\n    'https://api.pangolin.exchange/v1/prices',\n    'https://api.sushi.com/v1/prices',\n  ];\n\n  const prices = await Promise.all(\n    dexAPIs.map(api => fetch(`${api}/${tokenPair}`).then(r => r.json())),\n  );\n\n  return prices;\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Multi-DEX price scanning"),(0,i.kt)("li",{parentName:"ul"},"Flash loan implementation"),(0,i.kt)("li",{parentName:"ul"},"Optimal trade sizing"),(0,i.kt)("li",{parentName:"ul"},"Gas cost optimization"),(0,i.kt)("li",{parentName:"ul"},"Real-time opportunity detection")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"full-applications"},"\ud83d\ude80 Full Applications"),(0,i.kt)("p",null,"Complete mini-app implementations ready for production."),(0,i.kt)("h3",{id:"12-defi-portfolio-manager"},"12. ",(0,i.kt)("strong",{parentName:"h3"},"DeFi Portfolio Manager")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 45 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Multiple Action Types")),(0,i.kt)("p",null,"Complete DeFi portfolio management with rebalancing, yield optimization, and risk management."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const portfolioManagerApp: Metadata = {\n  url: 'https://defi-portfolio-manager.com',\n  icon: '\ud83d\udcca',\n  title: 'DeFi Portfolio Manager',\n  description: 'Complete portfolio management with AI-powered optimization',\n  baseUrl: 'https://api.defi-portfolio.com',\n  actions: [\n    // Action 1: Analyze Portfolio\n    {\n      type: 'dynamic',\n      label: 'Analyze Portfolio',\n      path: '/api/analyze-portfolio',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'walletAddress',\n          label: 'Portfolio Address',\n          type: 'address',\n          required: true,\n          description: 'Wallet address to analyze',\n        },\n      ],\n    },\n\n    // Action 2: Rebalance Portfolio\n    {\n      type: 'dynamic',\n      label: 'Smart Rebalance',\n      path: '/api/rebalance-portfolio',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'strategy',\n          label: 'Rebalancing Strategy',\n          type: 'select',\n          required: true,\n          options: [\n            {\n              label: 'Conservative Rebalance',\n              value: 'conservative',\n              description: 'Minimal changes, low risk',\n            },\n            {\n              label: 'Aggressive Optimization',\n              value: 'aggressive',\n              description: 'Maximum yield optimization',\n            },\n            {\n              label: 'Risk Parity',\n              value: 'risk_parity',\n              description: 'Equal risk contribution',\n            },\n          ],\n        },\n        {\n          name: 'maxSlippage',\n          label: 'Max Slippage (%)',\n          type: 'number',\n          required: true,\n          min: 0.1,\n          max: 5.0,\n          value: 1.0,\n        },\n      ],\n    },\n\n    // Action 3: Emergency Exit\n    {\n      type: 'blockchain',\n      label: 'Emergency Exit All Positions',\n      address: '0xPortfolioManagerContract',\n      abi: portfolioManagerAbi,\n      functionName: 'emergencyExitAll',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'recipient',\n          label: 'Withdrawal Address',\n          type: 'address',\n          required: true,\n          description: 'Where to send all withdrawn funds',\n        },\n        {\n          name: 'confirmation',\n          label: 'Emergency Confirmation',\n          type: 'radio',\n          required: true,\n          options: [\n            {\n              label: '\u26a0\ufe0f YES - Exit all positions immediately',\n              value: true,\n              description: 'This will close ALL positions and withdraw funds',\n            },\n            {\n              label: '\u274c NO - Cancel emergency exit',\n              value: false,\n              description: 'Keep current positions',\n            },\n          ],\n        },\n      ],\n    },\n\n    // Action 4: Set Stop Loss\n    {\n      type: 'blockchain',\n      label: 'Set Portfolio Stop Loss',\n      address: '0xPortfolioManagerContract',\n      abi: portfolioManagerAbi,\n      functionName: 'setGlobalStopLoss',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'stopLossPercentage',\n          label: 'Stop Loss Trigger (%)',\n          type: 'select',\n          required: true,\n          options: [\n            { label: '5% Loss', value: 5, description: 'Conservative protection' },\n            { label: '10% Loss', value: 10, description: 'Balanced protection' },\n            { label: '15% Loss', value: 15, description: 'Allow for volatility' },\n            { label: '20% Loss', value: 20, description: 'High risk tolerance' },\n          ],\n        },\n        {\n          name: 'autoRebalance',\n          label: 'Auto-rebalance after stop loss',\n          type: 'boolean',\n          value: false,\n          description: 'Automatically rebalance portfolio after stop loss is triggered',\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Backend Implementations:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Analyze Portfolio\nexport async function POST(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const walletAddress = searchParams.get('walletAddress');\n\n  // Fetch portfolio data from multiple protocols\n  const [aavePositions, compoundPositions, uniswapV3Positions, yearnVaults] = await Promise.all([\n    getAavePositions(walletAddress),\n    getCompoundPositions(walletAddress),\n    getUniswapV3Positions(walletAddress),\n    getYearnPositions(walletAddress),\n  ]);\n\n  // Calculate portfolio metrics\n  const portfolioValue = calculateTotalValue(positions);\n  const riskScore = calculateRiskScore(positions);\n  const apy = calculateWeightedAPY(positions);\n  const diversificationScore = calculateDiversification(positions);\n\n  // Generate recommendations\n  const recommendations = generateRecommendations({\n    positions,\n    riskScore,\n    diversificationScore,\n  });\n\n  // Build dashboard transaction\n  const transaction = await buildDashboardTransaction({\n    portfolioValue,\n    riskScore,\n    apy,\n    recommendations,\n  });\n\n  return NextResponse.json({\n    serializedTransaction: serialize(transaction),\n    chainId: 'avalanche',\n    params: {\n      functionName: 'displayPortfolioAnalysis',\n      args: {\n        totalValue: `${portfolioValue.toLocaleString()}`,\n        riskScore: `${riskScore}/10`,\n        weightedAPY: `${apy.toFixed(2)}%`,\n        diversificationScore: `${diversificationScore}/10`,\n        recommendations: recommendations.slice(0, 3).join(', '),\n      },\n    },\n  });\n}\n\n// Rebalance Portfolio\nexport async function POST(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const strategy = searchParams.get('strategy');\n  const maxSlippage = parseFloat(searchParams.get('maxSlippage') || '1.0');\n\n  // Get current portfolio state\n  const currentPortfolio = await getCurrentPortfolio(walletAddress);\n\n  // Calculate optimal allocation based on strategy\n  const targetAllocation = await calculateOptimalAllocation(strategy, currentPortfolio);\n\n  // Generate rebalancing transactions\n  const rebalancingSteps = await generateRebalancingSteps(\n    currentPortfolio,\n    targetAllocation,\n    maxSlippage,\n  );\n\n  // Build batch transaction\n  const batchTransaction = await buildBatchRebalanceTransaction(rebalancingSteps);\n\n  return NextResponse.json({\n    serializedTransaction: serialize(batchTransaction),\n    chainId: 'avalanche',\n    params: {\n      functionName: 'executeBatchRebalance',\n      args: {\n        strategy: strategy,\n        transactionCount: rebalancingSteps.length,\n        estimatedGasCost: `${estimateGasCost(rebalancingSteps)} AVAX`,\n        projectedImprovement: `+${calculateProjectedImprovement(targetAllocation)}% APY`,\n        maxSlippage: `${maxSlippage}%`,\n      },\n    },\n  });\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Multi-protocol portfolio analysis"),(0,i.kt)("li",{parentName:"ul"},"Risk scoring algorithms"),(0,i.kt)("li",{parentName:"ul"},"Automated rebalancing strategies"),(0,i.kt)("li",{parentName:"ul"},"Emergency exit mechanisms"),(0,i.kt)("li",{parentName:"ul"},"Batch transaction optimization")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"13-social-trading-platform"},"13. ",(0,i.kt)("strong",{parentName:"h3"},"Social Trading Platform")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 60 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Action Flow")),(0,i.kt)("p",null,"Follow successful traders and automatically copy their strategies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const socialTradingFlow: ActionFlow = {\n  type: 'flow',\n  label: 'Social Trading Platform',\n  initialActionId: 'discover-traders',\n  actions: [\n    // Step 1: Discover top traders\n    {\n      id: 'discover-traders',\n      type: 'http',\n      label: 'Discover Top Traders',\n      path: 'https://api.social-trading.com/traders/discover',\n      params: [\n        {\n          name: 'timeframe',\n          label: 'Performance Timeframe',\n          type: 'select',\n          required: true,\n          options: [\n            { label: 'Last 7 days', value: '7d', description: 'Recent performance' },\n            { label: 'Last 30 days', value: '30d', description: 'Monthly track record' },\n            { label: 'Last 90 days', value: '90d', description: 'Quarterly performance' },\n            { label: 'All time', value: 'all', description: 'Complete history' },\n          ],\n        },\n        {\n          name: 'riskProfile',\n          label: 'Risk Profile',\n          type: 'radio',\n          required: true,\n          options: [\n            { label: 'Conservative (Max 5% drawdown)', value: 'conservative' },\n            { label: 'Moderate (Max 15% drawdown)', value: 'moderate' },\n            { label: 'Aggressive (Max 30% drawdown)', value: 'aggressive' },\n          ],\n        },\n        {\n          name: 'minFollowers',\n          label: 'Minimum Followers',\n          type: 'number',\n          required: true,\n          min: 10,\n          max: 10000,\n          value: 100,\n          description: 'Traders with proven social proof',\n        },\n      ],\n      nextActions: [{ actionId: 'select-trader' }],\n    },\n\n    // Step 2: Select a trader to follow\n    {\n      id: 'select-trader',\n      type: 'decision',\n      label: 'Select Trader',\n      title: 'Choose a trader to follow',\n      description: 'Based on your criteria, here are the top performing traders',\n      options: [\n        {\n          label: 'CryptoWhale42 - 89% Win Rate, 156% YTD',\n          value: 'whale42',\n          nextActionId: 'configure-copy-trading',\n        },\n        {\n          label: 'DeFiMaster - 76% Win Rate, 134% YTD',\n          value: 'defi_master',\n          nextActionId: 'configure-copy-trading',\n        },\n        {\n          label: 'SafeTrader - 45% Win Rate, 67% YTD (Low Risk)',\n          value: 'safe_trader',\n          nextActionId: 'configure-copy-trading',\n        },\n        {\n          label: 'Browse more traders',\n          value: 'browse_more',\n          nextActionId: 'discover-traders',\n        },\n      ],\n    },\n\n    // Step 3: Configure copy trading settings\n    {\n      id: 'configure-copy-trading',\n      type: 'http',\n      label: 'Configure Copy Trading',\n      path: 'https://api.social-trading.com/configure-copying',\n      params: [\n        {\n          name: 'allocation',\n          label: 'Allocation Amount (USDC)',\n          type: 'number',\n          required: true,\n          min: 100,\n          max: 100000,\n          value: 1000,\n          description: 'Amount to allocate for copy trading',\n        },\n        {\n          name: 'copyPercentage',\n          label: 'Copy Percentage',\n          type: 'select',\n          required: true,\n          options: [\n            { label: '10% of trader positions', value: 10 },\n            { label: '25% of trader positions', value: 25 },\n            { label: '50% of trader positions', value: 50 },\n            { label: '100% exact copy', value: 100 },\n          ],\n        },\n        {\n          name: 'stopLoss',\n          label: 'Portfolio Stop Loss',\n          type: 'radio',\n          required: true,\n          options: [\n            { label: '5% Loss', value: 5 },\n            { label: '10% Loss', value: 10 },\n            { label: '20% Loss', value: 20 },\n            { label: 'No Stop Loss', value: 0 },\n          ],\n        },\n        {\n          name: 'autoRebalance',\n          label: 'Auto-rebalance frequency',\n          type: 'select',\n          required: true,\n          options: [\n            { label: 'Real-time (Immediate)', value: 'realtime' },\n            { label: 'Hourly', value: 'hourly' },\n            { label: 'Daily', value: 'daily' },\n            { label: 'Manual only', value: 'manual' },\n          ],\n        },\n      ],\n      nextActions: [{ actionId: 'confirm-setup' }],\n    },\n\n    // Step 4: Confirm copy trading setup\n    {\n      id: 'confirm-setup',\n      type: 'decision',\n      label: 'Confirm Setup',\n      title: 'Ready to start copy trading?',\n      description: 'Review your configuration and start following the trader',\n      options: [\n        {\n          label: '\u2705 Start Copy Trading',\n          value: 'confirm',\n          nextActionId: 'deploy-copy-trading',\n        },\n        {\n          label: '\u2699\ufe0f Modify Settings',\n          value: 'modify',\n          nextActionId: 'configure-copy-trading',\n        },\n        {\n          label: '\u274c Cancel',\n          value: 'cancel',\n          nextActionId: 'setup-cancelled',\n        },\n      ],\n    },\n\n    // Step 5: Deploy copy trading contract\n    {\n      id: 'deploy-copy-trading',\n      type: 'blockchain',\n      label: 'Deploy Copy Trading Contract',\n      address: '0xSocialTradingFactory',\n      abi: socialTradingAbi,\n      functionName: 'createCopyTradingVault',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'traderAddress',\n          label: 'Trader Address',\n          type: 'address',\n          value: '{{selectedTrader}}',\n          fixed: true,\n        },\n        {\n          name: 'initialDeposit',\n          label: 'Initial Deposit',\n          type: 'number',\n          value: '{{allocation}}',\n          fixed: true,\n        },\n        {\n          name: 'copyPercentage',\n          label: 'Copy Percentage',\n          type: 'number',\n          value: '{{copyPercentage}}',\n          fixed: true,\n        },\n        {\n          name: 'stopLossPercentage',\n          label: 'Stop Loss',\n          type: 'number',\n          value: '{{stopLoss}}',\n          fixed: true,\n        },\n      ],\n      nextActions: [\n        {\n          actionId: 'copy-trading-active',\n          conditions: [{ field: 'lastResult.status', operator: 'eq', value: 'success' }],\n        },\n        {\n          actionId: 'deployment-failed',\n        },\n      ],\n    },\n\n    // Completion states\n    {\n      id: 'copy-trading-active',\n      type: 'completion',\n      label: 'Copy Trading Active! \ud83c\udf89',\n      message:\n        \"Your copy trading vault is now live and will automatically follow your selected trader's moves.\",\n      status: 'success',\n    },\n    {\n      id: 'deployment-failed',\n      type: 'completion',\n      label: 'Deployment Failed',\n      message: 'Failed to deploy copy trading contract. Please try again or contact support.',\n      status: 'error',\n    },\n    {\n      id: 'setup-cancelled',\n      type: 'completion',\n      label: 'Setup Cancelled',\n      message: 'Copy trading setup has been cancelled. You can start over anytime.',\n      status: 'info',\n    },\n  ],\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Social trading mechanics"),(0,i.kt)("li",{parentName:"ul"},"Dynamic trader discovery"),(0,i.kt)("li",{parentName:"ul"},"Risk management integration"),(0,i.kt)("li",{parentName:"ul"},"Automated portfolio mirroring"),(0,i.kt)("li",{parentName:"ul"},"Smart contract deployment flows")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"14-decentralized-insurance-platform"},"14. ",(0,i.kt)("strong",{parentName:"h3"},"Decentralized Insurance Platform")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u23f1\ufe0f Setup: 50 minutes")," | ",(0,i.kt)("strong",{parentName:"p"},"Multiple Action Types")),(0,i.kt)("p",null,"Complete insurance platform with policy creation, claims, and payouts."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const insurancePlatformApp: Metadata = {\n  url: 'https://defi-insurance.com',\n  icon: '\ud83d\udee1\ufe0f',\n  title: 'DeFi Insurance Hub',\n  description: 'Protect your DeFi investments with decentralized insurance',\n  baseUrl: 'https://api.defi-insurance.com',\n  actions: [\n    // Action 1: Buy Insurance Policy\n    {\n      type: 'dynamic',\n      label: 'Buy Insurance Policy',\n      path: '/api/calculate-premium',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'protocolAddress',\n          label: 'Protocol to Insure',\n          type: 'select',\n          required: true,\n          options: [\n            {\n              label: 'Aave Lending Pool',\n              value: '0x794a61358D6845594F94dc1DB02A252b5b4814aD',\n              description: 'Cover lending/borrowing risks'\n            },\n            {\n              label: 'Trader Joe DEX',\n              value: '0x60aE616a2155Ee3d9A68541Ba4544862310933d4',\n              description: 'Cover liquidity provision risks'\n            },\n            {\n              label: 'Yearn Finance Vault',\n              value: '0x7D2382b1f8Af621229d33464340541Db362B4907',\n              description: 'Cover smart contract risks'\n            }\n          ]\n        },\n        {\n          name: 'coverageAmount',\n          label: 'Coverage Amount (USDC)',\n          type: 'number',\n          required: true,\n          min: 1000,\n          max: 1000000,\n          description: 'Amount of funds to insure'\n        },\n        {\n          name: 'coveragePeriod',\n          label: 'Coverage Period',\n          type: 'radio',\n          required: true,\n          options: [\n            { label: '30 days', value: 30, description: 'Short-term coverage' },\n            { label: '90 days', value: 90, description: 'Medium-term coverage' },\n            { label: '180 days', value: 180, description: 'Long-term coverage' },\n            { label: '365 days', value: 365, description: 'Annual coverage (10% discount)' }\n          ]\n        },\n        {\n          name: 'riskTolerance',\n          label: 'Risk Assessment',\n          type: 'select',\n          required: true,\n          options: [\n            {\n              label: 'Conservative (Higher premium, better coverage)',\n              value: 'conservative',\n              description: 'Maximum protection'\n            },\n            {\n              label: 'Balanced (Standard premium and coverage)',\n              value: 'balanced',\n              description: 'Recommended option'\n            },\n            {\n              label: 'Aggressive (Lower premium, basic coverage)',\n              value: 'aggressive',\n              description: 'Budget-friendly'\n            }\n          ]\n        }\n      ]\n    },\n\n    // Action 2: File Insurance Claim\n    {\n      type: 'http',\n      label: 'File Insurance Claim',\n      path: 'https://api.defi-insurance.com/claims/file',\n      params: [\n        {\n          name: 'policyId',\n          label: 'Policy ID',\n          type: 'text',\n          required: true,\n          pattern: '^[0-9]+,\n          description: 'Your insurance policy number'\n        },\n        {\n          name: 'incidentType',\n          label: 'Type of Incident',\n          type: 'select',\n          required: true,\n          options: [\n            {\n              label: 'Smart Contract Exploit',\n              value: 'exploit',\n              description: 'Protocol was hacked or exploited'\n            },\n            {\n              label: 'Liquidity Crisis',\n              value: 'liquidity',\n              description: 'Unable to withdraw funds due to liquidity issues'\n            },\n            {\n              label: 'Oracle Manipulation',\n              value: 'oracle',\n              description: 'Price oracle was manipulated causing losses'\n            },\n            {\n              label: 'Governance Attack',\n              value: 'governance',\n              description: 'Malicious governance proposal caused harm'\n            },\n            {\n              label: 'Other',\n              value: 'other',\n              description: 'Other covered incident type'\n            }\n          ]\n        },\n        {\n          name: 'lossAmount',\n          label: 'Claimed Loss Amount (USDC)',\n          type: 'number',\n          required: true,\n          min: 1,\n          description: 'Amount of loss you are claiming'\n        },\n        {\n          name: 'incidentDate',\n          label: 'Incident Date',\n          type: 'datetime',\n          required: true,\n          description: 'When did the incident occur?'\n        },\n        {\n          name: 'description',\n          label: 'Incident Description',\n          type: 'textarea',\n          required: true,\n          minLength: 100,\n          maxLength: 2000,\n          description: 'Detailed description of what happened'\n        },\n        {\n          name: 'evidenceLinks',\n          label: 'Evidence Links',\n          type: 'textarea',\n          required: false,\n          description: 'Transaction hashes, news articles, or other evidence (one per line)'\n        }\n      ]\n    },\n\n    // Action 3: Vote on Claims (For token holders)\n    {\n      type: 'blockchain',\n      label: 'Vote on Insurance Claims',\n      address: '0xInsuranceGovernanceContract',\n      abi: insuranceGovernanceAbi,\n      functionName: 'voteOnClaim',\n      chains: { source: 'avalanche' },\n      params: [\n        {\n          name: 'claimId',\n          label: 'Claim to Vote On',\n          type: 'select',\n          required: true,\n          options: [\n            {\n              label: 'Claim #1247: Aave Exploit - $45,000',\n              value: 1247,\n              description: 'Flash loan attack on Aave lending pool'\n            },\n            {\n              label: 'Claim #1248: Yearn Vault Bug - $12,500',\n              value: 1248,\n              description: 'Smart contract bug caused fund loss'\n            },\n            {\n              label: 'Claim #1249: Oracle Manipulation - $78,000',\n              value: 1249,\n              description: 'Price oracle was manipulated during liquidation'\n            }\n          ]\n        },\n        {\n          name: 'vote',\n          label: 'Your Vote',\n          type: 'radio',\n          required: true,\n          options: [\n            {\n              label: '\u2705 APPROVE - Valid claim, should be paid',\n              value: true,\n              description: 'Vote to approve this insurance claim'\n            },\n            {\n              label: '\u274c REJECT - Invalid claim, should not be paid',\n              value: false,\n              description: 'Vote to reject this insurance claim'\n            }\n          ]\n        },\n        {\n          name: 'votingPower',\n          label: 'Voting Power to Use',\n          type: 'select',\n          required: true,\n          options: [\n            { label: '25% of my tokens', value: 25 },\n            { label: '50% of my tokens', value: 50 },\n            { label: '75% of my tokens', value: 75 },\n            { label: '100% of my tokens', value: 100 }\n          ]\n        }\n      ]\n    },\n\n    // Action 4: Provide Insurance Liquidity\n    {\n      type: 'blockchain',\n      label: 'Provide Insurance Liquidity',\n      address: '0xInsuranceLiquidityPool',\n      abi: liquidityPoolAbi,\n      functionName: 'provideLiquidity',\n      chains: { source: 'avalanche' },\n      amount: 0, // User specifies amount via parameter\n      params: [\n        {\n          name: 'depositAmount',\n          label: 'Liquidity Amount (USDC)',\n          type: 'number',\n          required: true,\n          min: 100,\n          max: 1000000,\n          description: 'Amount to provide as insurance liquidity'\n        },\n        {\n          name: 'lockupPeriod',\n          label: 'Lockup Period',\n          type: 'radio',\n          required: true,\n          options: [\n            {\n              label: '30 days (5% APY)',\n              value: 30,\n              description: 'Short commitment, lower rewards'\n            },\n            {\n              label: '90 days (8% APY)',\n              value: 90,\n              description: 'Medium commitment, balanced rewards'\n            },\n            {\n              label: '180 days (12% APY)',\n              value: 180,\n              description: 'Long commitment, higher rewards'\n            },\n            {\n              label: '365 days (18% APY)',\n              value: 365,\n              description: 'Maximum commitment, maximum rewards'\n            }\n          ]\n        },\n        {\n          name: 'autoCompound',\n          label: 'Auto-compound rewards',\n          type: 'boolean',\n          value: true,\n          description: 'Automatically reinvest earned premiums'\n        }\n      ]\n    }\n  ]\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Backend Implementations:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Calculate Insurance Premium\nexport async function POST(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const protocolAddress = searchParams.get('protocolAddress');\n  const coverageAmount = parseFloat(searchParams.get('coverageAmount') || '0');\n  const coveragePeriod = parseInt(searchParams.get('coveragePeriod') || '30');\n  const riskTolerance = searchParams.get('riskTolerance');\n\n  // \ud83d\udd0d RISK ASSESSMENT ALGORITHM\n  const protocolRisk = await assessProtocolRisk(protocolAddress);\n  const marketConditions = await getMarketConditions();\n  const historicalClaims = await getHistoricalClaims(protocolAddress);\n\n  // Calculate base premium\n  const basePremium = calculateBasePremium({\n    coverageAmount,\n    coveragePeriod,\n    protocolRisk,\n    marketConditions,\n    historicalClaims,\n  });\n\n  // Apply risk tolerance modifier\n  const riskMultiplier =\n    {\n      conservative: 1.5, // Higher premium, better coverage\n      balanced: 1.0, // Standard premium\n      aggressive: 0.7, // Lower premium, basic coverage\n    }[riskTolerance] || 1.0;\n\n  const finalPremium = basePremium * riskMultiplier;\n  const coveragePercentage =\n    {\n      conservative: 95, // Covers 95% of losses\n      balanced: 80, // Covers 80% of losses\n      aggressive: 60, // Covers 60% of losses\n    }[riskTolerance] || 80;\n\n  // Build insurance purchase transaction\n  const transaction = await buildInsurancePurchaseTransaction({\n    protocolAddress,\n    coverageAmount,\n    premium: finalPremium,\n    period: coveragePeriod,\n    coveragePercentage,\n  });\n\n  return NextResponse.json({\n    serializedTransaction: serialize(transaction),\n    chainId: 'avalanche',\n    params: {\n      functionName: 'purchaseInsurancePolicy',\n      args: {\n        protocol: getProtocolName(protocolAddress),\n        coverage: `${coverageAmount.toLocaleString()}`,\n        premium: `${finalPremium.toFixed(2)}`,\n        period: `${coveragePeriod} days`,\n        coveragePercent: `${coveragePercentage}%`,\n        riskScore: `${protocolRisk.score}/10`,\n        estimatedAPY: `${((finalPremium / coverageAmount) * (365 / coveragePeriod) * 100).toFixed(2)}%`,\n      },\n    },\n  });\n}\n\nasync function assessProtocolRisk(protocolAddress: string) {\n  // Analyze protocol security metrics\n  const securityScore = await getSecurityScore(protocolAddress);\n  const auditHistory = await getAuditHistory(protocolAddress);\n  const tvlStability = await getTVLStability(protocolAddress);\n  const timeInOperation = await getTimeInOperation(protocolAddress);\n\n  // Calculate composite risk score (1-10, where 1 is highest risk)\n  const riskScore = Math.min(\n    10,\n    Math.max(\n      1,\n      securityScore * 0.3 + auditHistory * 0.25 + tvlStability * 0.25 + timeInOperation * 0.2,\n    ),\n  );\n\n  return {\n    score: riskScore,\n    factors: { securityScore, auditHistory, tvlStability, timeInOperation },\n  };\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\ud83c\udfaf What you'll learn:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Risk assessment algorithms"),(0,i.kt)("li",{parentName:"ul"},"Decentralized claims processing"),(0,i.kt)("li",{parentName:"ul"},"Liquidity provision mechanics"),(0,i.kt)("li",{parentName:"ul"},"Governance voting systems"),(0,i.kt)("li",{parentName:"ul"},"Premium calculation models")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"-development-tools"},"\ud83d\udd27 ",(0,i.kt)("strong",{parentName:"h2"},"Development Tools")),(0,i.kt)("h3",{id:"testing-your-mini-apps"},"Testing Your Mini-Apps"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("a",{parentName:"strong",href:"https://app.sherry.social/debugger"},"Sherry Debugger"))," - Test your metadata JSON")),(0,i.kt)("h3",{id:"deployment-options"},"Deployment Options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Next.js Vercel"),": Fastest for dynamic actions"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Static Hosting"),": Perfect for simple blockchain/transfer actions"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Docker Containers"),": For complex server-side logic"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"IPFS"),": Decentralized hosting option")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"-additional-resources"},"\ud83d\udcda ",(0,i.kt)("strong",{parentName:"h2"},"Additional Resources")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api-reference/action-types/blockchain-actions"},(0,i.kt)("strong",{parentName:"a"},"SDK Documentation"))," - Complete API reference"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://discord.gg/sherry"},(0,i.kt)("strong",{parentName:"a"},"Discord Community"))," - Get help from other developers")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"-whats-next"},"\ud83d\ude80 ",(0,i.kt)("strong",{parentName:"h2"},"What's Next?")),(0,i.kt)("p",null,"Ready to build your own mini-app? Here are some great starting points:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Fork an example")," that's closest to your use case"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Modify the parameters")," for your specific needs"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Test thoroughly")," using our debugging tools"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Deploy and share")," with the community")),(0,i.kt)("p",null,"The future of Web3 UX is in your hands! \ud83c\udf1f"))}u.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);