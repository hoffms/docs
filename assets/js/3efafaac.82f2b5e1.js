"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[2826],{71869:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(83117),i=(t(67294),t(3905));const r={id:"advanced-flows",sidebar_position:3,title:"Advanced Flows Guide"},o="Advanced Flows Guide",l={unversionedId:"sdk/trigger-sdk-2/guides/advanced-flows",id:"sdk/trigger-sdk-2/guides/advanced-flows",title:"Advanced Flows Guide",description:"This guide demonstrates how to create complex action flows with conditional logic, dynamic actions, and error handling. You'll build a multi-chain token bridge mini-app that supports multiple chains and tokens.",source:"@site/docs/sdk/trigger-sdk-2/guides/advanced-flows.md",sourceDirName:"sdk/trigger-sdk-2/guides",slug:"/sdk/trigger-sdk-2/guides/advanced-flows",permalink:"/docs/sdk/trigger-sdk-2/guides/advanced-flows",editUrl:"https://github.com/hoffms/docs/tree/main/docs/sdk/trigger-sdk-2/guides/advanced-flows.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"advanced-flows",sidebar_position:3,title:"Advanced Flows Guide"},sidebar:"sdkSidebar",previous:{title:"Gu\xeda - MiniApp con NextJS",permalink:"/docs/sdk/trigger-sdk-2/guides/spanish-mini-app-guide"},next:{title:"Basic Mini-App Guide",permalink:"/docs/sdk/trigger-sdk-2/guides/basic-mini-app"}},s={},p=[{value:"What You&#39;ll Build",id:"what-youll-build",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Project Setup",id:"step-1-project-setup",level:2},{value:"Step 2: Define Chain Selection Action",id:"step-2-define-chain-selection-action",level:2},{value:"Step 3: Create Token Selection Action",id:"step-3-create-token-selection-action",level:2},{value:"Step 4: Define Approval Check Action",id:"step-4-define-approval-check-action",level:2},{value:"Step 5: Create Gas Check Action",id:"step-5-create-gas-check-action",level:2},{value:"Step 6: Define Bridge Action",id:"step-6-define-bridge-action",level:2},{value:"Step 7: Create Bridge Monitor Action",id:"step-7-create-bridge-monitor-action",level:2},{value:"Step 8: Create Metadata",id:"step-8-create-metadata",level:2},{value:"Step 9: Create Server",id:"step-9-create-server",level:2},{value:"Step 10: Run Your Mini-App",id:"step-10-run-your-mini-app",level:2},{value:"Testing Your Mini-App",id:"testing-your-mini-app",level:2},{value:"What You&#39;ve Learned",id:"what-youve-learned",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"References",id:"references",level:2}],c={toc:p};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"advanced-flows-guide"},"Advanced Flows Guide"),(0,i.kt)("p",null,"This guide demonstrates how to create complex action flows with conditional logic, dynamic actions, and error handling. You'll build a multi-chain token bridge mini-app that supports multiple chains and tokens."),(0,i.kt)("h2",{id:"what-youll-build"},"What You'll Build"),(0,i.kt)("p",null,"A token bridge mini-app that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Supports multiple source and destination chains"),(0,i.kt)("li",{parentName:"ul"},"Handles token approvals and transfers"),(0,i.kt)("li",{parentName:"ul"},"Provides real-time bridge status updates"),(0,i.kt)("li",{parentName:"ul"},"Implements retry logic for failed transactions"),(0,i.kt)("li",{parentName:"ul"},"Includes fallback options for high gas prices")),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Completed the ",(0,i.kt)("a",{parentName:"li",href:"/docs/sdk/trigger-sdk-2/guides/basic-mini-app"},"Basic Mini-App Guide")),(0,i.kt)("li",{parentName:"ul"},"Understanding of cross-chain bridges"),(0,i.kt)("li",{parentName:"ul"},"Familiarity with gas optimization"),(0,i.kt)("li",{parentName:"ul"},"Knowledge of token standards (ERC20, ERC721)")),(0,i.kt)("h2",{id:"step-1-project-setup"},"Step 1: Project Setup"),(0,i.kt)("p",null,"Create a new directory and install dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir token-bridge-app\ncd token-bridge-app\nnpm init -y\nnpm install @sherrylinks/sdk typescript @types/node express @types/express ethers@5.7.2 --save\nnpm install ts-node nodemon @types/express --save-dev\n")),(0,i.kt)("h2",{id:"step-2-define-chain-selection-action"},"Step 2: Define Chain Selection Action"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"src/actions/chain-selection.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { HttpAction } from '@sherrylinks/sdk';\n\nexport const chainSelectionAction: HttpAction = {\n  type: 'http',\n  label: 'Select Chains',\n  description: 'Choose source and destination chains',\n  path: 'https://api.example.com/chains',\n  params: [\n    {\n      name: 'sourceChain',\n      type: 'select',\n      label: 'Source Chain',\n      options: [\n        { label: 'Avalanche', value: 'avalanche' },\n        { label: 'Ethereum', value: 'ethereum' },\n        { label: 'Polygon', value: 'polygon' },\n      ],\n    },\n    {\n      name: 'destinationChain',\n      type: 'select',\n      label: 'Destination Chain',\n      options: [\n        { label: 'Avalanche', value: 'avalanche' },\n        { label: 'Ethereum', value: 'ethereum' },\n        { label: 'Polygon', value: 'polygon' },\n      ],\n    },\n  ],\n  nextActions: [\n    {\n      actionId: 'token-selection',\n      conditions: [\n        {\n          field: 'params.sourceChain',\n          operator: 'neq',\n          value: 'params.destinationChain',\n        },\n      ],\n    },\n    {\n      actionId: 'same-chain-error',\n      conditions: [\n        {\n          field: 'params.sourceChain',\n          operator: 'eq',\n          value: 'params.destinationChain',\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("h2",{id:"step-3-create-token-selection-action"},"Step 3: Create Token Selection Action"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"src/actions/token-selection.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { DynamicAction } from '@sherrylinks/sdk';\n\nexport const tokenSelectionAction: DynamicAction = {\n  type: 'dynamic',\n  label: 'Select Token',\n  description: 'Choose token to bridge',\n  dynamicParams: {\n    type: 'http',\n    path: 'https://api.example.com/tokens',\n    params: {\n      chain: '${params.sourceChain}',\n    },\n  },\n  nextActions: [\n    {\n      actionId: 'check-approval',\n      conditions: [\n        {\n          field: 'lastResult.tokenType',\n          operator: 'eq',\n          value: 'erc20',\n        },\n      ],\n    },\n    {\n      actionId: 'check-nft-approval',\n      conditions: [\n        {\n          field: 'lastResult.tokenType',\n          operator: 'eq',\n          value: 'erc721',\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("h2",{id:"step-4-define-approval-check-action"},"Step 4: Define Approval Check Action"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"src/actions/approval-check.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { DecisionAction } from '@sherrylinks/sdk';\n\nexport const approvalCheckAction: DecisionAction = {\n  type: 'decision',\n  label: 'Check Approval',\n  description: 'Verify token approval status',\n  title: 'Approval Required',\n  options: [\n    {\n      label: 'Approve',\n      value: 'approve',\n      nextActionId: 'approve-token',\n    },\n    {\n      label: 'Skip',\n      value: 'skip',\n      nextActionId: 'check-gas',\n      conditions: [\n        {\n          field: 'lastResult.isApproved',\n          operator: 'eq',\n          value: true,\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("h2",{id:"step-5-create-gas-check-action"},"Step 5: Create Gas Check Action"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"src/actions/gas-check.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { DecisionAction } from '@sherrylinks/sdk';\n\nexport const gasCheckAction: DecisionAction = {\n  type: 'decision',\n  label: 'Check Gas',\n  description: 'Review current gas prices',\n  title: 'Gas Price Check',\n  options: [\n    {\n      label: 'Proceed',\n      value: 'proceed',\n      nextActionId: 'execute-bridge',\n    },\n    {\n      label: 'Wait',\n      value: 'wait',\n      nextActionId: 'gas-wait',\n      conditions: [\n        {\n          field: 'lastResult.gasPrice',\n          operator: 'gt',\n          value: 'lastResult.suggestedGasPrice',\n        },\n      ],\n    },\n    {\n      label: 'Use Alternative Bridge',\n      value: 'alternative',\n      nextActionId: 'alternative-bridge',\n      conditions: [\n        {\n          field: 'lastResult.gasPrice',\n          operator: 'gt',\n          value: 'lastResult.alternativeGasPrice',\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("h2",{id:"step-6-define-bridge-action"},"Step 6: Define Bridge Action"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"src/actions/execute-bridge.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { BlockchainAction } from '@sherrylinks/sdk';\n\nexport const executeBridgeAction: BlockchainAction = {\n  type: 'blockchain',\n  label: 'Execute Bridge',\n  description: 'Bridge your tokens',\n  address: '0xBridgeAddress', // Replace with actual bridge address\n  abi: [\n    {\n      name: 'bridge',\n      type: 'function',\n      stateMutability: 'payable',\n      inputs: [\n        { name: 'token', type: 'address' },\n        { name: 'amount', type: 'uint256' },\n        { name: 'destinationChain', type: 'uint256' },\n        { name: 'recipient', type: 'address' },\n      ],\n      outputs: [{ name: 'bridgeId', type: 'bytes32' }],\n    },\n  ],\n  functionName: 'bridge',\n  chains: { source: '${params.sourceChain}' },\n  nextActions: [\n    {\n      actionId: 'monitor-bridge',\n      conditions: [\n        {\n          field: 'lastResult.status',\n          operator: 'eq',\n          value: 'success',\n        },\n      ],\n    },\n    {\n      actionId: 'retry-bridge',\n      conditions: [\n        {\n          field: 'lastResult.status',\n          operator: 'eq',\n          value: 'error',\n        },\n        {\n          field: 'lastResult.retryCount',\n          operator: 'lt',\n          value: 3,\n        },\n      ],\n    },\n    {\n      actionId: 'bridge-failed',\n      conditions: [\n        {\n          field: 'lastResult.status',\n          operator: 'eq',\n          value: 'error',\n        },\n        {\n          field: 'lastResult.retryCount',\n          operator: 'gte',\n          value: 3,\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("h2",{id:"step-7-create-bridge-monitor-action"},"Step 7: Create Bridge Monitor Action"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"src/actions/monitor-bridge.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { DynamicAction } from '@sherrylinks/sdk';\n\nexport const monitorBridgeAction: DynamicAction = {\n  type: 'dynamic',\n  label: 'Monitor Bridge',\n  description: 'Track bridge status',\n  dynamicParams: {\n    type: 'http',\n    path: 'https://api.example.com/bridge-status',\n    params: {\n      bridgeId: '${lastResult.bridgeId}',\n    },\n    pollingInterval: 10000, // Poll every 10 seconds\n  },\n  nextActions: [\n    {\n      actionId: 'bridge-complete',\n      conditions: [\n        {\n          field: 'lastResult.status',\n          operator: 'eq',\n          value: 'completed',\n        },\n      ],\n    },\n    {\n      actionId: 'bridge-pending',\n      conditions: [\n        {\n          field: 'lastResult.status',\n          operator: 'eq',\n          value: 'pending',\n        },\n      ],\n    },\n    {\n      actionId: 'bridge-failed',\n      conditions: [\n        {\n          field: 'lastResult.status',\n          operator: 'eq',\n          value: 'failed',\n        },\n      ],\n    },\n  ],\n};\n")),(0,i.kt)("h2",{id:"step-8-create-metadata"},"Step 8: Create Metadata"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"src/metadata.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Metadata, createMetadata } from '@sherrylinks/sdk';\nimport { chainSelectionAction } from './actions/chain-selection';\nimport { tokenSelectionAction } from './actions/token-selection';\nimport { approvalCheckAction } from './actions/approval-check';\nimport { gasCheckAction } from './actions/gas-check';\nimport { executeBridgeAction } from './actions/execute-bridge';\nimport { monitorBridgeAction } from './actions/monitor-bridge';\n\nconst metadata: Metadata = {\n  url: 'https://bridge.example',\n  icon: 'https://example.com/bridge-icon.png',\n  title: 'Multi-Chain Bridge',\n  description: 'Bridge tokens across multiple chains',\n  actions: [\n    {\n      id: 'chain-selection',\n      ...chainSelectionAction,\n    },\n    {\n      id: 'token-selection',\n      ...tokenSelectionAction,\n    },\n    {\n      id: 'check-approval',\n      ...approvalCheckAction,\n    },\n    {\n      id: 'check-gas',\n      ...gasCheckAction,\n    },\n    {\n      id: 'execute-bridge',\n      ...executeBridgeAction,\n    },\n    {\n      id: 'monitor-bridge',\n      ...monitorBridgeAction,\n    },\n    {\n      id: 'bridge-complete',\n      type: 'completion',\n      label: 'Bridge Complete',\n      message: 'Your tokens have been bridged successfully!',\n      status: 'success',\n    },\n    {\n      id: 'bridge-failed',\n      type: 'completion',\n      label: 'Bridge Failed',\n      message: 'The bridge operation failed. Please try again.',\n      status: 'error',\n    },\n    {\n      id: 'same-chain-error',\n      type: 'completion',\n      label: 'Invalid Selection',\n      message: 'Source and destination chains must be different.',\n      status: 'error',\n    },\n  ],\n};\n\nexport default createMetadata(metadata);\n")),(0,i.kt)("h2",{id:"step-9-create-server"},"Step 9: Create Server"),(0,i.kt)("p",null,"Create ",(0,i.kt)("inlineCode",{parentName:"p"},"src/server.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import express from 'express';\nimport metadata from './metadata';\n\nconst app = express();\nconst port = 3000;\n\napp.get('/metadata', (req, res) => {\n  res.json(metadata);\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n")),(0,i.kt)("h2",{id:"step-10-run-your-mini-app"},"Step 10: Run Your Mini-App"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Start the development server:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx nodemon src/server.ts\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Your mini-app is available at ",(0,i.kt)("inlineCode",{parentName:"li"},"http://localhost:3000/metadata"))),(0,i.kt)("h2",{id:"testing-your-mini-app"},"Testing Your Mini-App"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Open the Sherry app"),(0,i.kt)("li",{parentName:"ol"},"Create a new post"),(0,i.kt)("li",{parentName:"ol"},"Add your mini-app using the URL ",(0,i.kt)("inlineCode",{parentName:"li"},"http://localhost:3000/metadata")),(0,i.kt)("li",{parentName:"ol"},"Test the complete bridge flow:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Select source and destination chains"),(0,i.kt)("li",{parentName:"ul"},"Choose a token to bridge"),(0,i.kt)("li",{parentName:"ul"},"Handle token approvals"),(0,i.kt)("li",{parentName:"ul"},"Check gas prices"),(0,i.kt)("li",{parentName:"ul"},"Execute the bridge"),(0,i.kt)("li",{parentName:"ul"},"Monitor the bridge status")))),(0,i.kt)("h2",{id:"what-youve-learned"},"What You've Learned"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"How to create complex action flows with conditional logic"),(0,i.kt)("li",{parentName:"ul"},"How to implement dynamic actions with polling"),(0,i.kt)("li",{parentName:"ul"},"How to handle multiple chain interactions"),(0,i.kt)("li",{parentName:"ul"},"How to implement retry logic and fallback options"),(0,i.kt)("li",{parentName:"ul"},"How to monitor long-running operations"),(0,i.kt)("li",{parentName:"ul"},"How to handle various error cases")),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/sdk/trigger-sdk-2/reference/actions/action-flows"},"Technical Reference")," - Explore advanced action flow capabilities"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/sdk/trigger-sdk-2/reference/best-practices/security"},"Security Best Practices")," - Learn about secure implementation"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/sherrylabs/examples"},"Example Applications")," - See more examples")),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/sherrylabs/sdk"},"Trigger SDK GitHub Repository")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://docs.ethers.org/"},"Ethers.js Documentation")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ethereum/EIPs/issues/5169"},"Cross-Chain Bridge Standards")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://ethereum.org/en/developers/docs/gas/"},"Gas Optimization Guide"))))}d.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(k,o(o({ref:n},c),{},{components:t})):a.createElement(k,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);