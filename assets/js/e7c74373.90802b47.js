"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[5e3],{57009:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(83117),a=(n(67294),n(3905));const i={},l="LiquidityAmounts",o={unversionedId:"contracts/v4/reference/periphery/libraries/LiquidityAmounts",id:"contracts/v4/reference/periphery/libraries/LiquidityAmounts",title:"LiquidityAmounts",description:"Git Source - Generated with forge doc",source:"@site/docs/contracts/v4/reference/periphery/libraries/LiquidityAmounts.md",sourceDirName:"contracts/v4/reference/periphery/libraries",slug:"/contracts/v4/reference/periphery/libraries/LiquidityAmounts",permalink:"/docs/contracts/v4/reference/periphery/libraries/LiquidityAmounts",editUrl:"https://github.com/hoffms/docs/tree/main/docs/contracts/v4/reference/periphery/libraries/LiquidityAmounts.md",tags:[],version:"current",frontMatter:{},sidebar:"contractsSidebar",previous:{title:"HexStrings",permalink:"/docs/contracts/v4/reference/periphery/libraries/HexStrings"},next:{title:"Locker",permalink:"/docs/contracts/v4/reference/periphery/libraries/Locker"}},u={},p=[{value:"Functions",id:"functions",level:2},{value:"getLiquidityForAmount0",id:"getliquidityforamount0",level:3},{value:"getLiquidityForAmount1",id:"getliquidityforamount1",level:3},{value:"getLiquidityForAmounts",id:"getliquidityforamounts",level:3}],m={toc:p};function d(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"liquidityamounts"},"LiquidityAmounts"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/uniswap/v4-periphery/blob/ea2bf2e1ba6863bb809fc2ff791744f308c4a26d/src/libraries/LiquidityAmounts.sol"},"Git Source")," - Generated with ",(0,a.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/reference/forge/forge-doc"},"forge doc")),(0,a.kt)("p",null,"Provides functions for computing liquidity amounts from token amounts and prices"),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"getliquidityforamount0"},"getLiquidityForAmount0"),(0,a.kt)("p",null,"Computes the amount of liquidity received for a given amount of token0 and price range"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Calculates amount0 ")," (sqrt(upper) ",(0,a.kt)("em",{parentName:"p"}," sqrt(lower)) / (sqrt(upper) - sqrt(lower))")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function getLiquidityForAmount0(uint160 sqrtPriceAX96, uint160 sqrtPriceBX96, uint256 amount0)\n    internal\n    pure\n    returns (uint128 liquidity);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"sqrtPriceAX96")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint160")),(0,a.kt)("td",{parentName:"tr",align:null},"A sqrt price representing the first tick boundary")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"sqrtPriceBX96")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint160")),(0,a.kt)("td",{parentName:"tr",align:null},"A sqrt price representing the second tick boundary")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"amount0")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint256")),(0,a.kt)("td",{parentName:"tr",align:null},"The amount0 being sent in")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"liquidity")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint128")),(0,a.kt)("td",{parentName:"tr",align:null},"The amount of returned liquidity")))),(0,a.kt)("h3",{id:"getliquidityforamount1"},"getLiquidityForAmount1"),(0,a.kt)("p",null,"Computes the amount of liquidity received for a given amount of token1 and price range"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Calculates amount1 / (sqrt(upper) - sqrt(lower)).")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function getLiquidityForAmount1(uint160 sqrtPriceAX96, uint160 sqrtPriceBX96, uint256 amount1)\n    internal\n    pure\n    returns (uint128 liquidity);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"sqrtPriceAX96")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint160")),(0,a.kt)("td",{parentName:"tr",align:null},"A sqrt price representing the first tick boundary")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"sqrtPriceBX96")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint160")),(0,a.kt)("td",{parentName:"tr",align:null},"A sqrt price representing the second tick boundary")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"amount1")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint256")),(0,a.kt)("td",{parentName:"tr",align:null},"The amount1 being sent in")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"liquidity")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint128")),(0,a.kt)("td",{parentName:"tr",align:null},"The amount of returned liquidity")))),(0,a.kt)("h3",{id:"getliquidityforamounts"},"getLiquidityForAmounts"),(0,a.kt)("p",null,"Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\npool prices and the prices at the tick boundaries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function getLiquidityForAmounts(\n    uint160 sqrtPriceX96,\n    uint160 sqrtPriceAX96,\n    uint160 sqrtPriceBX96,\n    uint256 amount0,\n    uint256 amount1\n) internal pure returns (uint128 liquidity);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"sqrtPriceX96")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint160")),(0,a.kt)("td",{parentName:"tr",align:null},"A sqrt price representing the current pool prices")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"sqrtPriceAX96")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint160")),(0,a.kt)("td",{parentName:"tr",align:null},"A sqrt price representing the first tick boundary")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"sqrtPriceBX96")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint160")),(0,a.kt)("td",{parentName:"tr",align:null},"A sqrt price representing the second tick boundary")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"amount0")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint256")),(0,a.kt)("td",{parentName:"tr",align:null},"The amount of token0 being sent in")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"amount1")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint256")),(0,a.kt)("td",{parentName:"tr",align:null},"The amount of token1 being sent in")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"liquidity")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint128")),(0,a.kt)("td",{parentName:"tr",align:null},"The maximum amount of liquidity received")))))}d.isMDXComponent=!0},3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>k});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=r.createContext({}),p=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},m=function(t){var e=p(t.components);return r.createElement(u.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},s=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,u=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),s=p(n),k=a,c=s["".concat(u,".").concat(k)]||s[k]||d[k]||i;return n?r.createElement(c,l(l({ref:e},m),{},{components:n})):r.createElement(c,l({ref:e},m))}));function k(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,l=new Array(i);l[0]=s;var o={};for(var u in e)hasOwnProperty.call(e,u)&&(o[u]=e[u]);o.originalType=t,o.mdxType="string"==typeof t?t:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);