"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[8381],{94796:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(83117),r=(n(67294),n(3905));const i={},l="Blockchain Actions",o={unversionedId:"api/Actions/blockchain-actions",id:"api/Actions/blockchain-actions",title:"Blockchain Actions",description:"Blockchain Actions allow you to interact with smart contract functions on various blockchains. They're the most powerful action type in the Sherry SDK, enabling complex DeFi interactions, NFT operations, and DAO governance.",source:"@site/docs/api/Actions/blockchain-actions.md",sourceDirName:"api/Actions",slug:"/api/Actions/blockchain-actions",permalink:"/docs/api/Actions/blockchain-actions",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/api/Actions/blockchain-actions.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Nested Action Flows (`ActionFlow`)",permalink:"/docs/api/Actions/nested-action-flows"},next:{title:"Dynamic Actions",permalink:"/docs/api/Actions/dynamic-actions"}},p={},s=[{value:"Interface",id:"interface",level:2},{value:"Key Properties",id:"key-properties",level:2},{value:"Required Properties",id:"required-properties",level:3},{value:"Optional Properties",id:"optional-properties",level:3},{value:"Supported Chains",id:"supported-chains",level:2},{value:"Examples",id:"examples",level:2},{value:"1. Token Approval (Non-Payable Function)",id:"1-token-approval-non-payable-function",level:3},{value:"2. NFT Minting (Payable Function)",id:"2-nft-minting-payable-function",level:3},{value:"3. DAO Voting with Select Options",id:"3-dao-voting-with-select-options",level:3},{value:"4. Cross-Chain Bridge Action",id:"4-cross-chain-bridge-action",level:3},{value:"Parameter Types &amp; ABI Compatibility",id:"parameter-types--abi-compatibility",level:2},{value:"Parameter Validation",id:"parameter-validation",level:2},{value:"Order Validation",id:"order-validation",level:3},{value:"Type Validation",id:"type-validation",level:3},{value:"Value Validation",id:"value-validation",level:3},{value:"Payable Functions",id:"payable-functions",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Parameter Templates",id:"parameter-templates",level:3},{value:"Special Values",id:"special-values",level:3},{value:"Complex Parameter Types",id:"complex-parameter-types",level:3},{value:"Validation &amp; Error Handling",id:"validation--error-handling",level:2},{value:"Common Validation Errors",id:"common-validation-errors",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}],d={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"blockchain-actions"},"Blockchain Actions"),(0,r.kt)("p",null,"Blockchain Actions allow you to interact with smart contract functions on various blockchains. They're the most powerful action type in the Sherry SDK, enabling complex DeFi interactions, NFT operations, and DAO governance."),(0,r.kt)("h2",{id:"interface"},"Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface BlockchainActionMetadata {\n  type: 'blockchain';\n  label: string; // Button text shown to users\n  address: `0x${string}`; // Smart contract address\n  abi: Abi; // Contract ABI\n  functionName: string; // Function name to call\n  chains: ChainContext; // Source blockchain\n  amount?: number; // Native token amount for payable functions\n  params?: Parameter[]; // Function parameters (must match ABI order)\n}\n\ninterface ChainContext {\n  source: Chain; // Required: where transaction executes\n  destination?: Chain; // Optional: for cross-chain actions\n}\n\ntype Chain = 'avalanche' | 'celo' | 'fuji' | 'alfajores';\n")),(0,r.kt)("h2",{id:"key-properties"},"Key Properties"),(0,r.kt)("h3",{id:"required-properties"},"Required Properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"type")),": Always ",(0,r.kt)("inlineCode",{parentName:"li"},"'blockchain'")," for smart contract interactions"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"label")),": User-facing text displayed on the action button"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"address")),": Valid Ethereum-format contract address (",(0,r.kt)("inlineCode",{parentName:"li"},"0x..."),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"abi")),": Contract ABI containing at least the function you're calling"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"functionName")),": Exact name of the contract function to execute"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"chains")),": Blockchain configuration with required ",(0,r.kt)("inlineCode",{parentName:"li"},"source")," chain")),(0,r.kt)("h3",{id:"optional-properties"},"Optional Properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"amount")),": Native currency amount to send (ETH, AVAX, CELO) for payable functions"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"params")),": User input parameters that map to contract function arguments")),(0,r.kt)("h2",{id:"supported-chains"},"Supported Chains"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Chain"),(0,r.kt)("th",{parentName:"tr",align:null},"Network"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Chain ID"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"avalanche")),(0,r.kt)("td",{parentName:"tr",align:null},"Avalanche C-Chain"),(0,r.kt)("td",{parentName:"tr",align:null},"Mainnet"),(0,r.kt)("td",{parentName:"tr",align:null},"43114")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"celo")),(0,r.kt)("td",{parentName:"tr",align:null},"Celo"),(0,r.kt)("td",{parentName:"tr",align:null},"Mainnet"),(0,r.kt)("td",{parentName:"tr",align:null},"42220")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fuji")),(0,r.kt)("td",{parentName:"tr",align:null},"Avalanche Fuji"),(0,r.kt)("td",{parentName:"tr",align:null},"Testnet"),(0,r.kt)("td",{parentName:"tr",align:null},"43113")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"alfajores")),(0,r.kt)("td",{parentName:"tr",align:null},"Celo Alfajores"),(0,r.kt)("td",{parentName:"tr",align:null},"Testnet"),(0,r.kt)("td",{parentName:"tr",align:null},"44787")))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"1-token-approval-non-payable-function"},"1. Token Approval (Non-Payable Function)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { BlockchainActionMetadata } from '@sherrylinks/sdk';\n\nconst erc20Abi = [\n  {\n    name: 'approve',\n    type: 'function',\n    stateMutability: 'nonpayable',\n    inputs: [\n      { name: 'spender', type: 'address' },\n      { name: 'amount', type: 'uint256' },\n    ],\n    outputs: [{ name: '', type: 'bool' }],\n  },\n] as const;\n\nconst approveAction: BlockchainActionMetadata = {\n  type: 'blockchain',\n  label: 'Approve USDC',\n  address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', // USDC contract\n  abi: erc20Abi,\n  functionName: 'approve',\n  chains: { source: 'avalanche' },\n  params: [\n    {\n      name: 'spender',\n      label: 'Spender Contract',\n      type: 'address',\n      value: '0x1234567890123456789012345678901234567890',\n      fixed: true, // User cannot change this value\n    },\n    {\n      name: 'amount',\n      label: 'Amount to Approve',\n      type: 'number',\n      required: true,\n      min: 0.000001,\n      description: 'Amount of USDC to approve for spending',\n    },\n  ],\n};\n")),(0,r.kt)("h3",{id:"2-nft-minting-payable-function"},"2. NFT Minting (Payable Function)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const nftAbi = [\n  {\n    name: 'mint',\n    type: 'function',\n    stateMutability: 'payable',\n    inputs: [\n      { name: 'to', type: 'address' },\n      { name: 'tokenURI', type: 'string' },\n    ],\n    outputs: [{ name: 'tokenId', type: 'uint256' }],\n  },\n] as const;\n\nconst mintAction: BlockchainActionMetadata = {\n  type: 'blockchain',\n  label: 'Mint Cosmic NFT',\n  address: '0x742d35Cc6734C0532925a3b8D4ccd306f6F4B26C',\n  abi: nftAbi,\n  functionName: 'mint',\n  chains: { source: 'avalanche' },\n  amount: 0.1, // 0.1 AVAX mint price\n  params: [\n    {\n      name: 'to',\n      label: 'Recipient Address',\n      type: 'address',\n      required: true,\n      description: 'Address that will receive the NFT',\n    },\n    {\n      name: 'tokenURI',\n      label: 'Metadata URI',\n      type: 'text',\n      value: 'ipfs://QmYourNftMetadata...',\n      fixed: true,\n      description: 'IPFS URI for NFT metadata',\n    },\n  ],\n};\n")),(0,r.kt)("h3",{id:"3-dao-voting-with-select-options"},"3. DAO Voting with Select Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const daoAbi = [\n  {\n    name: 'castVote',\n    type: 'function',\n    stateMutability: 'nonpayable',\n    inputs: [\n      { name: 'proposalId', type: 'uint256' },\n      { name: 'support', type: 'bool' },\n    ],\n    outputs: [],\n  },\n] as const;\n\nconst voteAction: BlockchainActionMetadata = {\n  type: 'blockchain',\n  label: 'Vote on Proposal',\n  address: '0xDaoContractAddress',\n  abi: daoAbi,\n  functionName: 'castVote',\n  chains: { source: 'celo' },\n  params: [\n    {\n      name: 'proposalId',\n      label: 'Proposal',\n      type: 'select',\n      required: true,\n      options: [\n        {\n          label: 'Proposal #42: Increase Treasury Allocation',\n          value: 42,\n          description: 'Allocate 100K tokens for ecosystem development',\n        },\n        {\n          label: 'Proposal #43: New Partnership',\n          value: 43,\n          description: 'Strategic partnership with DeFi protocol',\n        },\n      ],\n    },\n    {\n      name: 'support',\n      label: 'Your Vote',\n      type: 'radio',\n      required: true,\n      options: [\n        { label: 'Yes - Support this proposal', value: true },\n        { label: 'No - Oppose this proposal', value: false },\n      ],\n    },\n  ],\n};\n")),(0,r.kt)("h3",{id:"4-cross-chain-bridge-action"},"4. Cross-Chain Bridge Action"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const bridgeAbi = [\n  {\n    name: 'bridgeTokens',\n    type: 'function',\n    stateMutability: 'payable',\n    inputs: [\n      { name: 'token', type: 'address' },\n      { name: 'amount', type: 'uint256' },\n      { name: 'recipient', type: 'address' },\n      { name: 'destinationChainId', type: 'uint256' },\n    ],\n    outputs: [],\n  },\n] as const;\n\nconst bridgeAction: BlockchainActionMetadata = {\n  type: 'blockchain',\n  label: 'Bridge to Celo',\n  address: '0xBridgeContractAddress',\n  abi: bridgeAbi,\n  functionName: 'bridgeTokens',\n  chains: {\n    source: 'avalanche',\n    destination: 'celo', // Cross-chain action\n  },\n  params: [\n    {\n      name: 'token',\n      label: 'Token to Bridge',\n      type: 'select',\n      required: true,\n      options: [\n        {\n          label: 'USDC',\n          value: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n          description: 'USD Coin',\n        },\n        {\n          label: 'USDT',\n          value: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n          description: 'Tether USD',\n        },\n      ],\n    },\n    {\n      name: 'amount',\n      label: 'Amount to Bridge',\n      type: 'number',\n      required: true,\n      min: 0.01,\n      description: 'Amount of tokens to send to Celo',\n    },\n    {\n      name: 'recipient',\n      label: 'Recipient on Celo',\n      type: 'address',\n      required: true,\n      description: 'Address that will receive tokens on Celo',\n    },\n    {\n      name: 'destinationChainId',\n      label: 'Destination Chain',\n      type: 'number',\n      value: 42220, // Celo chain ID\n      fixed: true,\n    },\n  ],\n};\n")),(0,r.kt)("h2",{id:"parameter-types--abi-compatibility"},"Parameter Types & ABI Compatibility"),(0,r.kt)("p",null,"Parameters must be compatible with the corresponding ABI types:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ABI Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Compatible Parameter Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Wallet addresses")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"radio")," with boolean values"),(0,r.kt)("td",{parentName:"tr",align:null},"True/false choices")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"email"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"url"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"textarea")),(0,r.kt)("td",{parentName:"tr",align:null},"Text inputs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"int256")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"Numeric inputs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bytes"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"bytes32")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text")," (hex format)"),(0,r.kt)("td",{parentName:"tr",align:null},"Hex-encoded data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text")," (JSON array format)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["0x...", "0x..."]'))))),(0,r.kt)("h2",{id:"parameter-validation"},"Parameter Validation"),(0,r.kt)("p",null,"The SDK automatically validates parameters against the ABI:"),(0,r.kt)("h3",{id:"order-validation"},"Order Validation"),(0,r.kt)("p",null,"Parameters ",(0,r.kt)("strong",{parentName:"p"},"must")," be in the same order as the ABI function inputs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// \u2705 Correct order matching ABI\n// ABI: transfer(address to, uint256 amount)\nparams: [\n  { name: 'to', label: 'Recipient', type: 'address' }, // First\n  { name: 'amount', label: 'Amount', type: 'number' }, // Second\n];\n\n// \u274c Wrong order will cause validation error\nparams: [\n  { name: 'amount', label: 'Amount', type: 'number' }, // Wrong!\n  { name: 'to', label: 'Recipient', type: 'address' }, // Wrong!\n];\n")),(0,r.kt)("h3",{id:"type-validation"},"Type Validation"),(0,r.kt)("p",null,"Parameter types must be compatible with ABI types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// \u2705 Compatible types\n{ name: 'to', type: 'address' }        // address parameter for address ABI type\n{ name: 'amount', type: 'number' }     // number parameter for uint256 ABI type\n{ name: 'support', type: 'boolean' }   // boolean parameter for bool ABI type\n\n// \u274c Incompatible types will cause validation error\n{ name: 'to', type: 'number' }         // number parameter for address ABI type\n{ name: 'amount', type: 'text' }       // text parameter for uint256 ABI type\n")),(0,r.kt)("h3",{id:"value-validation"},"Value Validation"),(0,r.kt)("p",null,"Fixed and default values are validated against ABI types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// \u2705 Valid values\n{ name: 'spender', type: 'address', value: '0x123...abc', fixed: true }\n{ name: 'amount', type: 'number', value: 100.5 }\n{ name: 'active', type: 'boolean', value: true }\n\n// \u274c Invalid values will cause validation error\n{ name: 'spender', type: 'address', value: 'invalid-address', fixed: true }\n{ name: 'amount', type: 'number', value: 'not-a-number' }\n")),(0,r.kt)("h2",{id:"payable-functions"},"Payable Functions"),(0,r.kt)("p",null,"For payable functions, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," property to specify native token value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const payableAction: BlockchainActionMetadata = {\n  type: 'blockchain',\n  label: 'Donate 0.5 ETH',\n  address: '0xDonationContract',\n  abi: donationAbi,\n  functionName: 'donate',\n  chains: { source: 'avalanche' },\n  amount: 0.5, // Send 0.5 AVAX with the transaction\n  params: [\n    {\n      name: 'message',\n      label: 'Donation Message',\n      type: 'text',\n      required: false,\n    },\n  ],\n};\n")),(0,r.kt)("h2",{id:"advanced-features"},"Advanced Features"),(0,r.kt)("h3",{id:"parameter-templates"},"Parameter Templates"),(0,r.kt)("p",null,"Use built-in templates for common parameter patterns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { PARAM_TEMPLATES, createParameter } from '@sherrylinks/sdk';\n\nconst params = [\n  createParameter(PARAM_TEMPLATES.ADDRESS, {\n    name: 'recipient',\n    label: 'Token Recipient',\n  }),\n  createParameter(PARAM_TEMPLATES.AMOUNT, {\n    name: 'tokenAmount',\n    label: 'Tokens to Send',\n    min: 0.01,\n  }),\n];\n")),(0,r.kt)("h3",{id:"special-values"},"Special Values"),(0,r.kt)("p",null,"Some parameters accept special values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  name: 'to',\n  label: 'Recipient',\n  type: 'address',\n  value: 'sender' // Special value: resolves to current user's address\n}\n")),(0,r.kt)("h3",{id:"complex-parameter-types"},"Complex Parameter Types"),(0,r.kt)("p",null,"For advanced use cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Array parameter (as JSON string)\n{\n  name: 'recipients',\n  label: 'Recipients',\n  type: 'text',\n  value: '[\"0x123...abc\", \"0x456...def\"]',\n  description: 'JSON array of recipient addresses'\n}\n\n// Bytes parameter (hex-encoded)\n{\n  name: 'data',\n  label: 'Transaction Data',\n  type: 'text',\n  pattern: '^0x[a-fA-F0-9]*$',\n  description: 'Hex-encoded transaction data'\n}\n")),(0,r.kt)("h2",{id:"validation--error-handling"},"Validation & Error Handling"),(0,r.kt)("p",null,"Use the SDK validation functions to catch errors early:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createMetadata } from '@sherrylinks/sdk';\n\ntry {\n  const validatedAction = createMetadata({\n    url: 'https://myapp.com',\n    icon: 'https://myapp.com/icon.png',\n    title: 'My Blockchain App',\n    description: 'Interact with smart contracts',\n    actions: [blockchainAction],\n  });\n\n  console.log('\u2705 Action validated successfully');\n} catch (error) {\n  console.error('\u274c Validation failed:', error.message);\n  // Handle validation errors appropriately\n}\n")),(0,r.kt)("h2",{id:"common-validation-errors"},"Common Validation Errors"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Error"),(0,r.kt)("th",{parentName:"tr",align:null},"Cause"),(0,r.kt)("th",{parentName:"tr",align:null},"Solution"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Function not found in ABI")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"functionName")," doesn't exist"),(0,r.kt)("td",{parentName:"tr",align:null},"Check ABI contains the function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Parameter name mismatch")),(0,r.kt)("td",{parentName:"tr",align:null},"Parameter names don't match ABI"),(0,r.kt)("td",{parentName:"tr",align:null},"Ensure parameter names match exactly")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Parameter order mismatch")),(0,r.kt)("td",{parentName:"tr",align:null},"Parameters in wrong order"),(0,r.kt)("td",{parentName:"tr",align:null},"Reorder parameters to match ABI")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Invalid address")),(0,r.kt)("td",{parentName:"tr",align:null},"Malformed contract address"),(0,r.kt)("td",{parentName:"tr",align:null},"Use valid ",(0,r.kt)("inlineCode",{parentName:"td"},"0x...")," format address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Type compatibility error")),(0,r.kt)("td",{parentName:"tr",align:null},"Parameter type incompatible with ABI"),(0,r.kt)("td",{parentName:"tr",align:null},"Use compatible parameter types")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Amount on non-payable function")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount")," set for non-payable function"),(0,r.kt)("td",{parentName:"tr",align:null},"Remove ",(0,r.kt)("inlineCode",{parentName:"td"},"amount")," or make function payable")))),(0,r.kt)("h2",{id:"best-practices"},"Best Practices"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Always validate your ABI")," - Include only necessary function definitions"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"strong"},"as const"))," - Add type assertion for better TypeScript support"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Order parameters correctly")," - Match the exact order in your ABI"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Provide clear labels")," - Make parameter labels user-friendly"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Add helpful descriptions")," - Guide users with parameter descriptions"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Use appropriate validation")," - Set min/max values and patterns"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Test thoroughly")," - Validate your actions before deployment")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"next-steps"},"Next Steps"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./transfer-actions"},(0,r.kt)("strong",{parentName:"a"},"Transfer Actions"))," - Learn about native token transfers"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./nested-action-flows"},(0,r.kt)("strong",{parentName:"a"},"Action Flows"))," - Create multi-step workflows"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../parameters/parameters"},(0,r.kt)("strong",{parentName:"a"},"Parameters Guide"))," - Deep dive into parameter configuration")))}c.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,k=m["".concat(p,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);