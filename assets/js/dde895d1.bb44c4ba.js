"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[9984],{37472:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(83117),r=(n(67294),n(3905));const i={title:"Collect Fees"},o=void 0,l={unversionedId:"contracts/v4/quickstart/manage-liquidity/collect",id:"contracts/v4/quickstart/manage-liquidity/collect",title:"Collect Fees",description:"Setup",source:"@site/docs/contracts/v4/quickstart/02-manage-liquidity/04-collect.mdx",sourceDirName:"contracts/v4/quickstart/02-manage-liquidity",slug:"/contracts/v4/quickstart/manage-liquidity/collect",permalink:"/docs/contracts/v4/quickstart/manage-liquidity/collect",editUrl:"https://github.com/hoffms/docs/tree/main/docs/contracts/v4/quickstart/02-manage-liquidity/04-collect.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Collect Fees"},sidebar:"contractsSidebar",previous:{title:"Decrease Liquidity",permalink:"/docs/contracts/v4/quickstart/manage-liquidity/decrease-liquidity"},next:{title:"Burn Position",permalink:"/docs/contracts/v4/quickstart/manage-liquidity/burn-liquidity"}},c={},d=[{value:"Setup",id:"setup",level:3},{value:"1. Import and define <code>IPositionManager</code>",id:"1-import-and-define-ipositionmanager",level:3},{value:"2. Encode actions",id:"2-encode-actions",level:3},{value:"3. Encode Parameters",id:"3-encode-parameters",level:3},{value:"4. Submit Call",id:"4-submit-call",level:3},{value:"Additional notes:",id:"additional-notes",level:2}],s={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"setup"},"Setup"),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/contracts/v4/quickstart/manage-liquidity/setup-liquidity"},"setup guide")),(0,r.kt)("h1",{id:"guide"},"Guide"),(0,r.kt)("p",null,"In order to collect fees, the integrator must execute encoded actions\nusing the ",(0,r.kt)("inlineCode",{parentName:"p"},"PositionManager")," contract. ",(0,r.kt)("strong",{parentName:"p"},"Note")," that there is no\n",(0,r.kt)("inlineCode",{parentName:"p"},"COLLECT")," command, instead developers must decrease liquidity with a zero\nliquidity change."),(0,r.kt)("h3",{id:"1-import-and-define-ipositionmanager"},"1. Import and define ",(0,r.kt)("inlineCode",{parentName:"h3"},"IPositionManager")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'import {IPositionManager} from "v4-periphery/src/interfaces/IPositionManager.sol";\n// inside a contract, test, or foundry script:\nIPositionManager posm = IPositionManager(<address>);\n')),(0,r.kt)("h3",{id:"2-encode-actions"},"2. Encode actions"),(0,r.kt)("p",null,"To collect fees, the following operations are required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"decrease liquidity - collect fees from the core contract"),(0,r.kt)("li",{parentName:"ul"},"take pair - transfer the fee revenue, as both tokens, to a recipient")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'import {Actions} from "v4-periphery/src/libraries/Actions.sol";\nbytes memory actions = abi.encodePacked(uint8(Actions.DECREASE_LIQUIDITY), uint8(Actions.TAKE_PAIR));\n')),(0,r.kt)("h3",{id:"3-encode-parameters"},"3. Encode Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes[] memory params = new bytes[](2);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"DECREASE_LIQUIDITY")," action requires the following parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tokenId")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"position identifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"liquidity")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"the amount of liquidity to withdraw")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount0Min")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"uint128")),(0,r.kt)("td",{parentName:"tr",align:null},"the minimum amount of currency0 liquidity msg.sender is expecting to get back")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount1Min")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"uint128")),(0,r.kt)("td",{parentName:"tr",align:null},"the minimum amount of currency1 liquidity msg.sender is expecting to get back")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"hookData")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"bytes")),(0,r.kt)("td",{parentName:"tr",align:null},"arbitrary data that will be forwarded to hook functions")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note")," that in order to collect fees we will default ",(0,r.kt)("inlineCode",{parentName:"p"},"liquidity"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"amount0Min")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"amount1Min")," to 0.\nBecause fee collection can not be manipulated in a front-run attack, it is safe to set the slippage\nvalues ",(0,r.kt)("inlineCode",{parentName:"p"},"amount0Min, amount1Min")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"/// @dev collecting fees is achieved with liquidity=0, the second parameter\nparams[0] = abi.encode(tokenId, 0, 0, 0, hookData);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TAKE_PAIR")," action requires the following parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"currency0")," - ",(0,r.kt)("em",{parentName:"li"},"Currency"),", one of the tokens to be paid by msg.sender"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"currency1")," - ",(0,r.kt)("em",{parentName:"li"},"Currency"),", the other token to be paid by msg.sender"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"recipient")," - ",(0,r.kt)("em",{parentName:"li"},"address"),", destination of the fee revenue for both tokens")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"Currency currency0 = Currency.wrap(<tokenAddress1>); // tokenAddress1 = 0 for native ETH\nCurrency currency1 = Currency.wrap(<tokenAddress2>);\nparams[1] = abi.encode(currency0, currency1, recipient);\n")),(0,r.kt)("h3",{id:"4-submit-call"},"4. Submit Call"),(0,r.kt)("p",null,"The entrypoint for all liquidity operations is ",(0,r.kt)("inlineCode",{parentName:"p"},"modifyLiquidities()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 deadline = block.timestamp + 60;\n\nuint256 valueToPass = currency0.isAddressZero() ? amount0Max : 0;\n\nposm.modifyLiquidities{value: valueToPass}(\n    abi.encode(actions, params),\n    deadline\n);\n")),(0,r.kt)("h2",{id:"additional-notes"},"Additional notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To obtain the amount of fees received, callers should read\ntoken balances before and after the ",(0,r.kt)("inlineCode",{parentName:"li"},".modifyLiquidities()")," call.")))}u.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,k=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(k,o(o({ref:t},s),{},{components:n})):a.createElement(k,o({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);