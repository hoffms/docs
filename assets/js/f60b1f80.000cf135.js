"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[4051],{5715:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(3117),r=(n(7294),n(3905));const i={id:"blockchain-actions",sidebar_position:1,title:"Blockchain Actions"},l="Blockchain Actions",o={unversionedId:"sdk/trigger-sdk/reference/actions/blockchain-actions",id:"sdk/trigger-sdk/reference/actions/blockchain-actions",title:"Blockchain Actions",description:"Blockchain Actions allow you to interact with smart contracts on various blockchains. They're the most powerful action type in the Sherry SDK, enabling complex DeFi interactions, NFT operations, and DAO governance.",source:"@site/docs/sdk/trigger-sdk/reference/actions/blockchain-actions.md",sourceDirName:"sdk/trigger-sdk/reference/actions",slug:"/sdk/trigger-sdk/reference/actions/blockchain-actions",permalink:"/docs/sdk/trigger-sdk/reference/actions/blockchain-actions",editUrl:"https://github.com/hoffms/docs/tree/main/docs/sdk/trigger-sdk/reference/actions/blockchain-actions.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"blockchain-actions",sidebar_position:1,title:"Blockchain Actions"},sidebar:"sdkSidebar",previous:{title:"Metadata",permalink:"/docs/sdk/trigger-sdk/reference/metadata"},next:{title:"Transfer Actions",permalink:"/docs/sdk/trigger-sdk/reference/actions/transfer-actions"}},c={},p=[{value:"Interface",id:"interface",level:2},{value:"Required Properties",id:"required-properties",level:2},{value:"<code>type</code>",id:"type",level:3},{value:"<code>label</code>",id:"label",level:3},{value:"<code>address</code>",id:"address",level:3},{value:"<code>abi</code>",id:"abi",level:3},{value:"<code>functionName</code>",id:"functionname",level:3},{value:"<code>chains</code>",id:"chains",level:3},{value:"Optional Properties",id:"optional-properties",level:2},{value:"<code>amount</code>",id:"amount",level:3},{value:"<code>params</code>",id:"params",level:3},{value:"<code>description</code>",id:"description",level:3},{value:"Supported Chains",id:"supported-chains",level:2},{value:"Examples",id:"examples",level:2},{value:"1. Token Approval (Non-Payable Function)",id:"1-token-approval-non-payable-function",level:3},{value:"2. NFT Minting (Payable Function)",id:"2-nft-minting-payable-function",level:3},{value:"3. DAO Voting",id:"3-dao-voting",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Parameter Templates",id:"parameter-templates",level:3},{value:"Special Values",id:"special-values",level:3},{value:"Complex Parameter Types",id:"complex-parameter-types",level:3},{value:"Validation &amp; Error Handling",id:"validation--error-handling",level:2},{value:"Validation Rules",id:"validation-rules",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Related",id:"related",level:2}],s={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"blockchain-actions"},"Blockchain Actions"),(0,r.kt)("p",null,"Blockchain Actions allow you to interact with smart contracts on various blockchains. They're the most powerful action type in the Sherry SDK, enabling complex DeFi interactions, NFT operations, and DAO governance."),(0,r.kt)("h2",{id:"interface"},"Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface BlockchainActionMetadata {\n  // Required Properties\n  type: 'blockchain';           // Action type identifier\n  label: string;                // Button text shown to users\n  address: `0x${string}`;       // Smart contract address\n  abi: Abi;                     // Contract ABI\n  functionName: string;         // Function name to call\n  chains: ChainContext;         // Source blockchain\n\n  // Optional Properties\n  amount?: number;              // Native token amount for payable functions\n  params?: Parameter[];         // Function parameters\n  description?: string;         // Action description\n}\n")),(0,r.kt)("h2",{id:"required-properties"},"Required Properties"),(0,r.kt)("h3",{id:"type"},(0,r.kt)("inlineCode",{parentName:"h3"},"type")),(0,r.kt)("p",null,"Always set to ",(0,r.kt)("inlineCode",{parentName:"p"},"'blockchain'")," to indicate this is a smart contract interaction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const action: BlockchainActionMetadata = {\n  type: 'blockchain',\n  // ... other properties\n};\n")),(0,r.kt)("h3",{id:"label"},(0,r.kt)("inlineCode",{parentName:"h3"},"label")),(0,r.kt)("p",null,"User-facing text displayed on the action button. Keep it clear and concise."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const action: BlockchainActionMetadata = {\n  label: 'Mint NFT',\n  // ... other properties\n};\n")),(0,r.kt)("h3",{id:"address"},(0,r.kt)("inlineCode",{parentName:"h3"},"address")),(0,r.kt)("p",null,"The Ethereum-format address of the smart contract to interact with."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const action: BlockchainActionMetadata = {\n  address: '0x742d35Cc6734C0532925a3b8D4ccd306f6F4B26C',\n  // ... other properties\n};\n")),(0,r.kt)("h3",{id:"abi"},(0,r.kt)("inlineCode",{parentName:"h3"},"abi")),(0,r.kt)("p",null,"The ABI (Application Binary Interface) of the smart contract. Must include at least the function you're calling."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const action: BlockchainActionMetadata = {\n  abi: [\n    {\n      inputs: [\n        { name: 'to', type: 'address' },\n        { name: 'tokenURI', type: 'string' }\n      ],\n      name: 'mint',\n      outputs: [{ name: 'tokenId', type: 'uint256' }],\n      stateMutability: 'payable',\n      type: 'function'\n    }\n  ],\n  // ... other properties\n};\n")),(0,r.kt)("h3",{id:"functionname"},(0,r.kt)("inlineCode",{parentName:"h3"},"functionName")),(0,r.kt)("p",null,"The exact name of the contract function to execute."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const action: BlockchainActionMetadata = {\n  functionName: 'mint',\n  // ... other properties\n};\n")),(0,r.kt)("h3",{id:"chains"},(0,r.kt)("inlineCode",{parentName:"h3"},"chains")),(0,r.kt)("p",null,"Blockchain configuration specifying where the transaction will be executed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const action: BlockchainActionMetadata = {\n  chains: { source: 'avalanche' },\n  // ... other properties\n};\n")),(0,r.kt)("h2",{id:"optional-properties"},"Optional Properties"),(0,r.kt)("h3",{id:"amount"},(0,r.kt)("inlineCode",{parentName:"h3"},"amount")),(0,r.kt)("p",null,"Native token amount to send with the transaction (for payable functions)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const action: BlockchainActionMetadata = {\n  amount: 0.1, // Send 0.1 AVAX with the transaction\n  // ... other properties\n};\n")),(0,r.kt)("h3",{id:"params"},(0,r.kt)("inlineCode",{parentName:"h3"},"params")),(0,r.kt)("p",null,"User input parameters that map to contract function arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const action: BlockchainActionMetadata = {\n  params: [\n    {\n      name: 'to',\n      label: 'Recipient Address',\n      type: 'address',\n      required: true,\n    },\n    {\n      name: 'tokenURI',\n      label: 'Metadata URI',\n      type: 'text',\n      value: 'ipfs://QmNft42...',\n      fixed: true,\n    },\n  ],\n  // ... other properties\n};\n")),(0,r.kt)("h3",{id:"description"},(0,r.kt)("inlineCode",{parentName:"h3"},"description")),(0,r.kt)("p",null,"Additional information about the action displayed to users."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const action: BlockchainActionMetadata = {\n  description: 'Mint a new NFT for 0.1 AVAX',\n  // ... other properties\n};\n")),(0,r.kt)("h2",{id:"supported-chains"},"Supported Chains"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Chain"),(0,r.kt)("th",{parentName:"tr",align:null},"Network"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Chain ID"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"avalanche")),(0,r.kt)("td",{parentName:"tr",align:null},"Avalanche C-Chain"),(0,r.kt)("td",{parentName:"tr",align:null},"Mainnet"),(0,r.kt)("td",{parentName:"tr",align:null},"43114")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"celo")),(0,r.kt)("td",{parentName:"tr",align:null},"Celo"),(0,r.kt)("td",{parentName:"tr",align:null},"Mainnet"),(0,r.kt)("td",{parentName:"tr",align:null},"42220")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ethereum")),(0,r.kt)("td",{parentName:"tr",align:null},"Ethereum"),(0,r.kt)("td",{parentName:"tr",align:null},"Mainnet"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fuji")),(0,r.kt)("td",{parentName:"tr",align:null},"Avalanche Fuji"),(0,r.kt)("td",{parentName:"tr",align:null},"Testnet"),(0,r.kt)("td",{parentName:"tr",align:null},"43113")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"alfajores")),(0,r.kt)("td",{parentName:"tr",align:null},"Celo Alfajores"),(0,r.kt)("td",{parentName:"tr",align:null},"Testnet"),(0,r.kt)("td",{parentName:"tr",align:null},"44787")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sepolia")),(0,r.kt)("td",{parentName:"tr",align:null},"Ethereum Sepolia"),(0,r.kt)("td",{parentName:"tr",align:null},"Testnet"),(0,r.kt)("td",{parentName:"tr",align:null},"11155111")))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"1-token-approval-non-payable-function"},"1. Token Approval (Non-Payable Function)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const approveAction: BlockchainActionMetadata = {\n  type: 'blockchain',\n  label: 'Approve USDC',\n  address: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E', // USDC on Avalanche\n  abi: erc20Abi,\n  functionName: 'approve',\n  chains: { source: 'avalanche' },\n  params: [\n    {\n      name: 'spender',\n      label: 'Spender Address',\n      type: 'address',\n      required: true,\n    },\n    {\n      name: 'amount',\n      label: 'Amount to Approve',\n      type: 'number',\n      required: true,\n      min: 0,\n    },\n  ],\n};\n")),(0,r.kt)("h3",{id:"2-nft-minting-payable-function"},"2. NFT Minting (Payable Function)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const mintAction: BlockchainActionMetadata = {\n  type: 'blockchain',\n  label: 'Mint NFT',\n  description: 'Mint a new NFT for 0.1 AVAX',\n  address: '0x742d35Cc6734C0532925a3b8D4ccd306f6F4B26C',\n  abi: nftAbi,\n  functionName: 'mint',\n  chains: { source: 'avalanche' },\n  amount: 0.1, // 0.1 AVAX mint price\n  params: [\n    {\n      name: 'to',\n      label: 'Your Address',\n      type: 'address',\n      required: true,\n    },\n    {\n      name: 'tokenURI',\n      label: 'Metadata URI',\n      type: 'text',\n      value: 'ipfs://QmNft42...',\n      fixed: true,\n    },\n  ],\n};\n")),(0,r.kt)("h3",{id:"3-dao-voting"},"3. DAO Voting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const voteAction: BlockchainActionMetadata = {\n  type: 'blockchain',\n  label: 'Vote on Proposal',\n  description: 'Cast your vote on the current proposal',\n  address: '0xDaoGovernanceContract',\n  abi: daoAbi,\n  functionName: 'castVote',\n  chains: { source: 'ethereum' },\n  params: [\n    {\n      name: 'proposalId',\n      label: 'Proposal ID',\n      type: 'number',\n      required: true,\n    },\n    {\n      name: 'support',\n      label: 'Your Vote',\n      type: 'radio',\n      required: true,\n      options: [\n        { label: 'For', value: 1 },\n        { label: 'Against', value: 0 },\n        { label: 'Abstain', value: 2 },\n      ],\n    },\n  ],\n};\n")),(0,r.kt)("h2",{id:"advanced-features"},"Advanced Features"),(0,r.kt)("h3",{id:"parameter-templates"},"Parameter Templates"),(0,r.kt)("p",null,"Use built-in templates for common parameter patterns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { PARAM_TEMPLATES, createParameter } from '@sherrylinks/sdk';\n\nconst params = [\n  createParameter(PARAM_TEMPLATES.ADDRESS, {\n    name: 'recipient',\n    label: 'Token Recipient',\n  }),\n  createParameter(PARAM_TEMPLATES.AMOUNT, {\n    name: 'tokenAmount',\n    label: 'Tokens to Send',\n    min: 0.01,\n  }),\n];\n")),(0,r.kt)("h3",{id:"special-values"},"Special Values"),(0,r.kt)("p",null,"Some parameters accept special values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  name: 'to',\n  label: 'Recipient',\n  type: 'address',\n  value: 'sender' // Special value: resolves to current user's address\n}\n")),(0,r.kt)("h3",{id:"complex-parameter-types"},"Complex Parameter Types"),(0,r.kt)("p",null,"For advanced use cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Array parameter (as JSON string)\n{\n  name: 'recipients',\n  label: 'Recipients',\n  type: 'text',\n  value: '[\"0x123...abc\", \"0x456...def\"]',\n  description: 'JSON array of recipient addresses'\n}\n\n// Bytes parameter (hex-encoded)\n{\n  name: 'data',\n  label: 'Transaction Data',\n  type: 'text',\n  pattern: '^0x[a-fA-F0-9]*$',\n  description: 'Hex-encoded transaction data'\n}\n")),(0,r.kt)("h2",{id:"validation--error-handling"},"Validation & Error Handling"),(0,r.kt)("p",null,"The SDK validates blockchain actions to ensure they're properly configured:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createMetadata } from '@sherrylinks/sdk';\n\ntry {\n  const validated = createMetadata({\n    url: 'https://myapp.com',\n    icon: 'https://myapp.com/icon.png',\n    title: 'My Blockchain App',\n    description: 'Interact with smart contracts',\n    actions: [blockchainAction],\n  });\n\n  console.log('\u2705 Action validated successfully');\n} catch (error) {\n  console.error('\u274c Validation failed:', error);\n}\n")),(0,r.kt)("h3",{id:"validation-rules"},"Validation Rules"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Contract Validation")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Address must be a valid Ethereum address"),(0,r.kt)("li",{parentName:"ul"},"ABI must be valid and include the specified function"),(0,r.kt)("li",{parentName:"ul"},"Function must exist in the ABI"),(0,r.kt)("li",{parentName:"ul"},"Function parameters must match ABI inputs"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Chain Validation")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Source chain must be supported"),(0,r.kt)("li",{parentName:"ul"},"Chain must be appropriate for the contract"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameter Validation")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Parameters must match function signature"),(0,r.kt)("li",{parentName:"ul"},"Required parameters must be provided"),(0,r.kt)("li",{parentName:"ul"},"Parameter types must be valid"),(0,r.kt)("li",{parentName:"ul"},"Amount must be positive for payable functions")))),(0,r.kt)("h2",{id:"best-practices"},"Best Practices"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Security")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Always verify contract addresses"),(0,r.kt)("li",{parentName:"ul"},"Use appropriate access controls"),(0,r.kt)("li",{parentName:"ul"},"Validate user inputs"),(0,r.kt)("li",{parentName:"ul"},"Consider gas limits"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"User Experience")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Provide clear labels and descriptions"),(0,r.kt)("li",{parentName:"ul"},"Use appropriate parameter types"),(0,r.kt)("li",{parentName:"ul"},"Include helpful error messages"),(0,r.kt)("li",{parentName:"ul"},"Consider gas costs"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Performance")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Minimize parameter count"),(0,r.kt)("li",{parentName:"ul"},"Use efficient parameter types"),(0,r.kt)("li",{parentName:"ul"},"Consider gas optimization"),(0,r.kt)("li",{parentName:"ul"},"Cache ABIs when possible")))),(0,r.kt)("h2",{id:"related"},"Related"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./metadata.md"},"Metadata")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./parameters/parameter-types.md"},"Parameter System")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./chains.md"},"Chain Configuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./validation/action-validation.md"},"Validation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./best-practices/security.md"},"Best Practices"))))}d.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,k=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(k,l(l({ref:t},s),{},{components:n})):a.createElement(k,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);