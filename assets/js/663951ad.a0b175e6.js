"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[3073],{20098:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(83117),i=(n(67294),n(3905));const r={title:"Mint Position"},o=void 0,l={unversionedId:"contracts/v4/quickstart/manage-liquidity/mint-position",id:"contracts/v4/quickstart/manage-liquidity/mint-position",title:"Mint Position",description:"Similar to Uniswap v3, liquidity positions are minted as ERC-721 tokens and depend on a periphery contract.",source:"@site/docs/contracts/v4/quickstart/02-manage-liquidity/01-mint-position.mdx",sourceDirName:"contracts/v4/quickstart/02-manage-liquidity",slug:"/contracts/v4/quickstart/manage-liquidity/mint-position",permalink:"/docs/contracts/v4/quickstart/manage-liquidity/mint-position",editUrl:"https://github.com/hoffms/docs/tree/main/docs/contracts/v4/quickstart/02-manage-liquidity/01-mint-position.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Mint Position"},sidebar:"contractsSidebar",previous:{title:"Setup",permalink:"/docs/contracts/v4/quickstart/manage-liquidity/setup-liquidity"},next:{title:"Increase Liquidity",permalink:"/docs/contracts/v4/quickstart/manage-liquidity/increase-liquidity"}},p={},s=[{value:"Context",id:"context",level:3},{value:"Setup",id:"setup",level:3},{value:"1. Import and define <code>IPositionManager</code>",id:"1-import-and-define-ipositionmanager",level:3},{value:"2. Encode Actions",id:"2-encode-actions",level:3},{value:"3. Encode Parameters",id:"3-encode-parameters",level:3},{value:"4. Submit Call",id:"4-submit-call",level:3},{value:"Additional notes:",id:"additional-notes",level:2}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Similar to Uniswap v3, liquidity positions are minted as ERC-721 tokens and depend on a ",(0,i.kt)("em",{parentName:"p"},"periphery")," contract.\nv4's ",(0,i.kt)("inlineCode",{parentName:"p"},"PositionManager")," contract will facilitate liquidity management"),(0,i.kt)("h3",{id:"context"},"Context"),(0,i.kt)("p",null,"Please note that ",(0,i.kt)("inlineCode",{parentName:"p"},"PositionManager")," is a command-based contract, where integrators will be encoding commands and their corresponding\nparameters."),(0,i.kt)("h3",{id:"setup"},"Setup"),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"/docs/contracts/v4/quickstart/manage-liquidity/setup-liquidity"},"setup guide")),(0,i.kt)("h1",{id:"guide"},"Guide"),(0,i.kt)("p",null,"Below is a step-by-step guide for minting a v4 liquidity position, in ",(0,i.kt)("em",{parentName:"p"},"solidity")),(0,i.kt)("h3",{id:"1-import-and-define-ipositionmanager"},"1. Import and define ",(0,i.kt)("inlineCode",{parentName:"h3"},"IPositionManager")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'import {IPositionManager} from "v4-periphery/src/interfaces/IPositionManager.sol";\n\n// inside a contract, test, or foundry script:\nIPositionManager posm = IPositionManager(<address>);\n')),(0,i.kt)("h3",{id:"2-encode-actions"},"2. Encode Actions"),(0,i.kt)("p",null,"To mint a position, two actions are required:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"mint operation - the creation of the liquidity position"),(0,i.kt)("li",{parentName:"ul"},"settle pair - the two tokens to be paid by msg.sender")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"If providing ETH liquidity, a third action is required:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"sweep - to recover excess eth sent to the position manager")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'import {Actions} from "v4-periphery/src/libraries/Actions.sol";\n\nbytes memory actions = abi.encodePacked(uint8(Actions.MINT_POSITION), uint8(Actions.SETTLE_PAIR));\n\n// For ETH liquidity positions\nbytes memory actions = abi.encodePacked(uint8(Actions.MINT_POSITION), uint8(Actions.SETTLE_PAIR), uint8(Actions.SWEEP));\n')),(0,i.kt)("h3",{id:"3-encode-parameters"},"3. Encode Parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes[] memory params = new bytes[](2); // new bytes[](3) for ETH liquidity positions\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"MINT_POSITION")," action requires the following parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"poolKey")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"PoolKey")),(0,i.kt)("td",{parentName:"tr",align:null},"where the liquidity will be added to")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tickLower")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"the lower tick boundary of the position")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tickUpper")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"int24")),(0,i.kt)("td",{parentName:"tr",align:null},"the upper tick boundary of the position")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"liquidity")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"uint256")),(0,i.kt)("td",{parentName:"tr",align:null},"the amount of liquidity units to mint")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"amount0Max")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"uint128")),(0,i.kt)("td",{parentName:"tr",align:null},"the maximum amount of currency0 msg.sender is willing to pay")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"amount1Max")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"uint128")),(0,i.kt)("td",{parentName:"tr",align:null},"the maximum amount of currency1 msg.sender is willing to pay")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"recipient")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"address")),(0,i.kt)("td",{parentName:"tr",align:null},"the address that will receive the liquidity position (ERC-721)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"hookData")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"bytes")),(0,i.kt)("td",{parentName:"tr",align:null},"arbitrary data that will be forwarded to hook functions")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"Currency currency0 = Currency.wrap(<tokenAddress1>); // tokenAddress1 = 0 for native ETH\nCurrency currency1 = Currency.wrap(<tokenAddress2>);\nPoolKey poolKey = PoolKey(currency0, currency1, 3000, 60, IHooks(hook));\n\nparams[0] = abi.encode(poolKey, tickLower, tickUpper, liquidity, amount0Max, amount1Max, recipient, hookData);\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SETTLE_PAIR")," action requires the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"currency0")," - ",(0,i.kt)("em",{parentName:"li"},"Currency"),", one of the tokens to be paid by msg.sender"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"currency1")," - ",(0,i.kt)("em",{parentName:"li"},"Currency"),", the other token to be paid by msg.sender")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"params[1] = abi.encode(currency0, currency1);\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SWEEP")," action requires the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"currency")," - ",(0,i.kt)("em",{parentName:"li"},"Currency"),", token to sweep - most commonly native Ether: ",(0,i.kt)("inlineCode",{parentName:"li"},"CurrencyLibrary.ADDRESS_ZERO")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"recipient")," - ",(0,i.kt)("em",{parentName:"li"},"address"),", where to send excess tokens")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"params[2] = abi.encode(currency, recipient);\n")),(0,i.kt)("h3",{id:"4-submit-call"},"4. Submit Call"),(0,i.kt)("p",null,"The entrypoint for all liquidity operations is ",(0,i.kt)("inlineCode",{parentName:"p"},"modifyLiquidities()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"uint256 deadline = block.timestamp + 60;\n\nuint256 valueToPass = currency0.isAddressZero() ? amount0Max : 0;\n\nposm.modifyLiquidities{value: valueToPass}(\n    abi.encode(actions, params),\n    deadline\n);\n")),(0,i.kt)("h2",{id:"additional-notes"},"Additional notes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To obtain balance changes, callers should read token balances before and after the ",(0,i.kt)("inlineCode",{parentName:"li"},".modifyLiquidities()")," call")))}u.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=i,k=c["".concat(p,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);