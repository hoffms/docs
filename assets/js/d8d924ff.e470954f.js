"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[4452],{42694:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>l,toc:()=>p});var o=a(83117),r=(a(67294),a(3905));const n={title:"Swap Hooks"},i=void 0,l={unversionedId:"contracts/v4/quickstart/hooks/swap",id:"contracts/v4/quickstart/hooks/swap",title:"Swap Hooks",description:"Swaps are the most common interaction with the Uniswap protocol. When it comes to swap there are two hook functions available to customize and extend its behavior:",source:"@site/docs/contracts/v4/quickstart/04-hooks/01-swap.mdx",sourceDirName:"contracts/v4/quickstart/04-hooks",slug:"/contracts/v4/quickstart/hooks/swap",permalink:"/docs/contracts/v4/quickstart/hooks/swap",editUrl:"https://github.com/hoffms/docs/tree/main/docs/contracts/v4/quickstart/04-hooks/01-swap.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Swap Hooks"},sidebar:"contractsSidebar",previous:{title:"Set Up Local Environment",permalink:"/docs/contracts/v4/quickstart/hooks/setup"},next:{title:"Liquidity Hooks",permalink:"/docs/contracts/v4/quickstart/hooks/liquidity"}},s={},p=[{value:"Set Up the Contract",id:"set-up-the-contract",level:2},{value:"beforeSwap",id:"beforeswap",level:2},{value:"<code>beforeSwap</code> Parameters",id:"beforeswap-parameters",level:3},{value:"afterSwap",id:"afterswap",level:2},{value:"<code>afterSwap</code> Parameters",id:"afterswap-parameters",level:3},{value:"A Complete Swap Hook Contract",id:"a-complete-swap-hook-contract",level:2}],c={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Swaps are the most common interaction with the Uniswap protocol. When it comes to swap there are two hook functions available to customize and extend its behavior:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"beforeSwap")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"afterSwap"))),(0,r.kt)("p",null,"As the names suggest ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeSwap"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"afterSwap")," are functions called before or after a swap is executed on a pool."),(0,r.kt)("p",null,"This guide will go through the parameters for ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeSwap")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"afterSwap"),", and a simple example of a swap hook."),(0,r.kt)("p",null,"Note: The swap hook is not production ready code, and is implemented in a simplistic manner for the purpose of learning."),(0,r.kt)("h2",{id:"set-up-the-contract"},"Set Up the Contract"),(0,r.kt)("p",null,"Declare the solidity version used to compile the contract, here we will use ",(0,r.kt)("inlineCode",{parentName:"p"},">=0.8.24")," for the solidity version as transient storage is used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n")),(0,r.kt)("p",null,"Import the relevant dependencies from ",(0,r.kt)("inlineCode",{parentName:"p"},"v4-core")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"v4-periphery"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'import {BaseHook} from "v4-periphery/src/utils/BaseHook.sol";\n\nimport {Hooks} from "v4-core/src/libraries/Hooks.sol";\nimport {IPoolManager} from "v4-core/src/interfaces/IPoolManager.sol";\nimport {PoolKey} from "v4-core/src/types/PoolKey.sol";\nimport {PoolId, PoolIdLibrary} from "v4-core/src/types/PoolId.sol";\nimport {BalanceDelta} from "v4-core/src/types/BalanceDelta.sol";\nimport {BeforeSwapDelta, BeforeSwapDeltaLibrary} from "v4-core/src/types/BeforeSwapDelta.sol";\n')),(0,r.kt)("p",null,"Create a contract called ",(0,r.kt)("inlineCode",{parentName:"p"},"SwapHook"),", use ",(0,r.kt)("inlineCode",{parentName:"p"},"PoolIdLibrary")," to attach functions of computing ",(0,r.kt)("inlineCode",{parentName:"p"},"poolId")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"PoolKey"),". Declare two mappings as counters for ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeSwap")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"afterSwap"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"contract SwapHook is BaseHook {\n    using PoolIdLibrary for PoolKey;\n\n    // NOTE: ---------------------------------------------------------\n    // state variables should typically be unique to a pool\n    // a single hook contract should be able to service multiple pools\n    // ---------------------------------------------------------------\n\n    mapping(PoolId => uint256 count) public beforeSwapCount;\n    mapping(PoolId => uint256 count) public afterSwapCount;\n\n    constructor(IPoolManager _poolManager) BaseHook(_poolManager) {}\n")),(0,r.kt)("p",null,"Override ",(0,r.kt)("inlineCode",{parentName:"p"},"getHookPermissions()")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"BaseHook")," to return a struct of permissions to signal which hook functions are to be implemented.\nIt will also be used at deployment to validate the hook address correctly represents the expected permissions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getHookPermissions() public pure override returns (Hooks.Permissions memory) {\n    return Hooks.Permissions({\n        beforeInitialize: false,\n        afterInitialize: false,\n        beforeAddLiquidity: false,\n        afterAddLiquidity: false,\n        beforeRemoveLiquidity: false,\n        afterRemoveLiquidity: false,\n        beforeSwap: true,\n        afterSwap: true,\n        beforeDonate: false,\n        afterDonate: false,\n        beforeSwapReturnDelta: false,\n        afterSwapReturnDelta: false,\n        afterAddLiquidityReturnDelta: false,\n        afterRemoveLiquidityReturnDelta: false\n    });\n}\n")),(0,r.kt)("h2",{id:"beforeswap"},"beforeSwap"),(0,r.kt)("p",null,"Here the example shows that every time ",(0,r.kt)("strong",{parentName:"p"},"before")," a swap is executed in a pool, ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeSwapCount")," for that pool will be incremented by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _beforeSwap(address, PoolKey calldata key, IPoolManager.SwapParams calldata, bytes calldata)\n    internal\n    override\n    returns (bytes4, BeforeSwapDelta, uint24)\n{\n    beforeSwapCount[key.toId()]++;\n    return (BaseHook.beforeSwap.selector, BeforeSwapDeltaLibrary.ZERO_DELTA, 0);\n}\n")),(0,r.kt)("h3",{id:"beforeswap-parameters"},(0,r.kt)("inlineCode",{parentName:"h3"},"beforeSwap")," Parameters"),(0,r.kt)("p",null,"When triggering the ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeSwap")," hook function, there are some parameters we can make use of to customize or extend the behavior of ",(0,r.kt)("inlineCode",{parentName:"p"},"swap"),". These parameters are described in ",(0,r.kt)("a",{parentName:"p",href:"/contracts/v4/reference/core/interfaces/IHooks#beforeswap"},(0,r.kt)("inlineCode",{parentName:"a"},"beforeSwap"))," from ",(0,r.kt)("inlineCode",{parentName:"p"},"IHooks"),"."),(0,r.kt)("p",null,"A brief overview of the parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sender")," The initial ",(0,r.kt)("inlineCode",{parentName:"li"},"msg.sender")," for the ",(0,r.kt)("inlineCode",{parentName:"li"},"PoolManager.swap")," call - typically a swap router"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," The key for the pool"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params")," The parameters for the swap i.e. ",(0,r.kt)("a",{parentName:"li",href:"/contracts/v4/reference/core/interfaces/IPoolManager#swapparams"},(0,r.kt)("inlineCode",{parentName:"a"},"SwapParams"))," from ",(0,r.kt)("inlineCode",{parentName:"li"},"IPoolManager")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hookData")," Arbitrary data handed into the ",(0,r.kt)("inlineCode",{parentName:"li"},"PoolManager")," by the swapper to be be passed on to the hook")),(0,r.kt)("h2",{id:"afterswap"},"afterSwap"),(0,r.kt)("p",null,"Similiar as above, every time ",(0,r.kt)("strong",{parentName:"p"},"after")," a swap is executed in a pool, ",(0,r.kt)("inlineCode",{parentName:"p"},"afterSwapCount")," for that pool will be incremented by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _afterSwap(address, PoolKey calldata key, IPoolManager.SwapParams calldata, BalanceDelta, bytes calldata)\n    internal\n    override\n    returns (bytes4, int128)\n{\n    afterSwapCount[key.toId()]++;\n    return (BaseHook.afterSwap.selector, 0);\n}\n")),(0,r.kt)("h3",{id:"afterswap-parameters"},(0,r.kt)("inlineCode",{parentName:"h3"},"afterSwap")," Parameters"),(0,r.kt)("p",null,"When triggering the ",(0,r.kt)("inlineCode",{parentName:"p"},"afterSwap")," hook function, there are some parameters we can make use of to customize or extend the behavior of ",(0,r.kt)("inlineCode",{parentName:"p"},"swap"),". These parameters are described in ",(0,r.kt)("a",{parentName:"p",href:"/contracts/v4/reference/core/interfaces/IPoolManager#swapparams"},(0,r.kt)("inlineCode",{parentName:"a"},"afterSwap"))," from ",(0,r.kt)("inlineCode",{parentName:"p"},"IHooks"),"."),(0,r.kt)("p",null,"A brief overview of the parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sender")," The initial ",(0,r.kt)("inlineCode",{parentName:"li"},"msg.sender")," for the ",(0,r.kt)("inlineCode",{parentName:"li"},"PoolManager.swap")," call - typically a swap router"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," The key for the pool"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params")," The parameters for the swap i.e. ",(0,r.kt)("a",{parentName:"li",href:"/contracts/v4/reference/core/interfaces/IPoolManager#swapparams"},(0,r.kt)("inlineCode",{parentName:"a"},"SwapParams"))," from ",(0,r.kt)("inlineCode",{parentName:"li"},"IPoolManager")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"delta")," The amount owed to the caller (positive) or owed to the pool (negative)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hookData")," Arbitrary data handed into the ",(0,r.kt)("inlineCode",{parentName:"li"},"PoolManager")," by the swapper to be be passed on to the hook\n")),(0,r.kt)("h2",{id:"a-complete-swap-hook-contract"},"A Complete Swap Hook Contract"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {BaseHook} from "v4-periphery/src/utils/BaseHook.sol";\n\nimport {Hooks} from "v4-core/src/libraries/Hooks.sol";\nimport {IPoolManager} from "v4-core/src/interfaces/IPoolManager.sol";\nimport {PoolKey} from "v4-core/src/types/PoolKey.sol";\nimport {PoolId, PoolIdLibrary} from "v4-core/src/types/PoolId.sol";\nimport {BalanceDelta} from "v4-core/src/types/BalanceDelta.sol";\nimport {BeforeSwapDelta, BeforeSwapDeltaLibrary} from "v4-core/src/types/BeforeSwapDelta.sol";\n\ncontract SwapHook is BaseHook {\n    using PoolIdLibrary for PoolKey;\n\n    // NOTE: ---------------------------------------------------------\n    // state variables should typically be unique to a pool\n    // a single hook contract should be able to service multiple pools\n    // ---------------------------------------------------------------\n\n    mapping(PoolId => uint256 count) public beforeSwapCount;\n    mapping(PoolId => uint256 count) public afterSwapCount;\n\n    constructor(IPoolManager _poolManager) BaseHook(_poolManager) {}\n\n    function getHookPermissions() public pure override returns (Hooks.Permissions memory) {\n        return Hooks.Permissions({\n            beforeInitialize: false,\n            afterInitialize: false,\n            beforeAddLiquidity: true,\n            afterAddLiquidity: false,\n            beforeRemoveLiquidity: true,\n            afterRemoveLiquidity: false,\n            beforeSwap: true,\n            afterSwap: true,\n            beforeDonate: false,\n            afterDonate: false,\n            beforeSwapReturnDelta: false,\n            afterSwapReturnDelta: false,\n            afterAddLiquidityReturnDelta: false,\n            afterRemoveLiquidityReturnDelta: false\n        });\n    }\n\n    // -----------------------------------------------\n    // NOTE: see IHooks.sol for function documentation\n    // -----------------------------------------------\n\n    function _beforeSwap(address, PoolKey calldata key, IPoolManager.SwapParams calldata, bytes calldata)\n        internal\n        override\n        returns (bytes4, BeforeSwapDelta, uint24)\n    {\n        beforeSwapCount[key.toId()]++;\n        return (BaseHook.beforeSwap.selector, BeforeSwapDeltaLibrary.ZERO_DELTA, 0);\n    }\n\n    function _afterSwap(address, PoolKey calldata key, IPoolManager.SwapParams calldata, BalanceDelta, bytes calldata)\n        internal\n        override\n        returns (bytes4, int128)\n    {\n        afterSwapCount[key.toId()]++;\n        return (BaseHook.afterSwap.selector, 0);\n    }\n}\n')))}d.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var o=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,o,r=function(e,t){if(null==e)return{};var a,o,r={},n=Object.keys(e);for(o=0;o<n.length;o++)a=n[o],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)a=n[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||n;return a?o.createElement(f,i(i({ref:t},c),{},{components:a})):o.createElement(f,i({ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,i=new Array(n);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<n;p++)i[p]=a[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);