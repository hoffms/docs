"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[167],{6165:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=t(3117),i=(t(7294),t(3905));const o={id:"chains",title:"Supported Chains",sidebar_position:4},r=void 0,c={unversionedId:"concepts/protocol/chains",id:"concepts/protocol/chains",title:"Supported Chains",description:"Intro",source:"@site/docs/concepts/protocol/chains.md",sourceDirName:"concepts/protocol",slug:"/concepts/protocol/chains",permalink:"/docs/concepts/protocol/chains",editUrl:"https://github.com/hoffms/docs/tree/main/docs/concepts/protocol/chains.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"chains",title:"Supported Chains",sidebar_position:4},sidebar:"conceptsSidebar",previous:{title:"Metadata Validation",permalink:"/docs/concepts/protocol/metadata"},next:{title:"Crosschain Operations",permalink:"/docs/concepts/protocol/crosschain"}},l={},s=[{value:"Intro",id:"intro",level:2},{value:"<code>ChainContext</code> Interface",id:"chaincontext-interface",level:2},{value:"Supported Chains",id:"supported-chains",level:2},{value:"Examples",id:"examples",level:2},{value:"Single-Chain Action (Avalanche)",id:"single-chain-action-avalanche",level:3},{value:"Single-Chain Action (Ethereum)",id:"single-chain-action-ethereum",level:3},{value:"Cross-Chain Action (Bridge from Avalanche to Celo)",id:"cross-chain-action-bridge-from-avalanche-to-celo",level:3}],p={toc:s};function h(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"intro"},"Intro"),(0,i.kt)("p",null,"The Sherry SDK is designed to be multi-chain. The ",(0,i.kt)("inlineCode",{parentName:"p"},"chains")," property in ",(0,i.kt)("inlineCode",{parentName:"p"},"BlockchainAction")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TransferAction")," defines which blockchain(s) the action operates on."),(0,i.kt)("h2",{id:"chaincontext-interface"},(0,i.kt)("inlineCode",{parentName:"h2"},"ChainContext")," Interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/interface/chains.ts\nexport interface ChainContext {\n  source: Chain; // Chain where the transaction/action originates\n  destination?: Chain; // Destination chain (only for cross-chain actions)\n}\n\nexport type Chain = (typeof VALID_CHAINS)[number];\n\nexport const VALID_CHAINS = [\n  'fuji', // Avalanche Fuji Testnet\n  'avalanche', // Avalanche C-Chain Mainnet\n  'alfajores', // Celo Alfajores Testnet\n  'celo', // Celo Mainnet\n  'ethereum', // Ethereum Mainnet\n  'sepolia', // Ethereum Sepolia Testnet\n] as const;\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source"),": The blockchain where the transaction will be sent or where the primary contract/asset resides. ",(0,i.kt)("strong",{parentName:"li"},"Always required.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"destination")," (Optional): If the action involves interaction between two chains (e.g., a bridge), this property indicates the target chain. If the action occurs entirely on a single chain, ",(0,i.kt)("inlineCode",{parentName:"li"},"destination")," is omitted.")),(0,i.kt)("h2",{id:"supported-chains"},"Supported Chains"),(0,i.kt)("p",null,"The chains currently defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"VALID_CHAINS")," are officially supported by the SDK for validation and potentially for execution (depending on the environment)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fuji")," - Avalanche Fuji Testnet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"avalanche")," - Avalanche C-Chain Mainnet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"alfajores")," - Celo Alfajores Testnet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"celo")," - Celo Mainnet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ethereum")," - Ethereum Mainnet"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sepolia")," - Ethereum Sepolia Testnet")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"single-chain-action-avalanche"},"Single-Chain Action (Avalanche)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const approveAction: BlockchainActionMetadata = {\n  // ... other properties ...\n  chains: { source: 'avalanche' }, // Action happens only on Avalanche\n  // ...\n};\n\nconst simpleTransfer: TransferAction = {\n  // ...\n  chains: { source: 'fuji' }, // Transfer within Fuji\n  // ...\n};\n")),(0,i.kt)("h3",{id:"single-chain-action-ethereum"},"Single-Chain Action (Ethereum)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const ethereumAction: BlockchainActionMetadata = {\n  // ... other properties ...\n  chains: { source: 'ethereum' }, // Action happens only on Ethereum Mainnet\n  // ...\n};\n\nconst sepoliaTransfer: TransferAction = {\n  // ...\n  chains: { source: 'sepolia' }, // Transfer within Sepolia testnet\n  // ...\n};\n")),(0,i.kt)("h3",{id:"cross-chain-action-bridge-from-avalanche-to-celo"},"Cross-Chain Action (Bridge from Avalanche to Celo)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const bridgeAction: BlockchainActionMetadata = {\n  label: 'Bridge AVAX to Celo',\n  address: '0xBridgeContractOnAvalanche...',\n  abi: bridgeAbi,\n  functionName: 'bridgeTokens',\n  // Transaction originates on Avalanche, logical destination is Celo\n  chains: { source: 'avalanche', destination: 'celo' },\n  params: [\n    // ... params like token, amount, recipient on Celo, destinationChainId (Celo's ID) ...\n  ],\n};\n\nconst crossChainTransfer: TransferAction = {\n  label: 'Send from Ethereum to Avalanche',\n  // Transfer starts on Ethereum and goes to Avalanche\n  chains: { source: 'ethereum', destination: 'avalanche' },\n  // ... to, amount, etc.\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," Actual support for executing cross-chain actions depends on the implementation of the underlying contract (",(0,i.kt)("inlineCode",{parentName:"p"},"BlockchainAction"),") or the service handling the ",(0,i.kt)("inlineCode",{parentName:"p"},"TransferAction"),". The SDK provides the structure to define these interactions."))}h.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(t),d=i,m=u["".concat(l,".").concat(d)]||u[d]||h[d]||o;return t?a.createElement(m,r(r({ref:n},p),{},{components:t})):a.createElement(m,r({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,r[1]=c;for(var s=2;s<o;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);