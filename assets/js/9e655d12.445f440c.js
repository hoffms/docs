"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[3],{99467:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var n=r(83117),a=(r(67294),r(3905));const i={},o=void 0,c={unversionedId:"contracts/v3/reference/periphery/interfaces/ITickLens",id:"contracts/v3/reference/periphery/interfaces/ITickLens",title:"ITickLens",description:"Provides functions for fetching chunks of tick data for a pool",source:"@site/docs/contracts/v3/reference/periphery/interfaces/ITickLens.md",sourceDirName:"contracts/v3/reference/periphery/interfaces",slug:"/contracts/v3/reference/periphery/interfaces/ITickLens",permalink:"/docs/contracts/v3/reference/periphery/interfaces/ITickLens",editUrl:"https://github.com/hoffms/docs/tree/main/docs/contracts/v3/reference/periphery/interfaces/ITickLens.md",tags:[],version:"current",frontMatter:{},sidebar:"contractsSidebar",previous:{title:"ISwapRouter",permalink:"/docs/contracts/v3/reference/periphery/interfaces/ISwapRouter"},next:{title:"IV3Migrator",permalink:"/docs/contracts/v3/reference/periphery/interfaces/IV3Migrator"}},l={},p=[{value:"Functions",id:"functions",level:2},{value:"getPopulatedTicksInWord",id:"getpopulatedticksinword",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Return Values:",id:"return-values",level:4}],s={toc:p};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Provides functions for fetching chunks of tick data for a pool"),(0,a.kt)("p",null,"This avoids the waterfall of fetching the tick bitmap, parsing the bitmap to know which ticks to fetch, and\nthen sending additional multicalls to fetch the tick data"),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"getpopulatedticksinword"},"getPopulatedTicksInWord"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"  function getPopulatedTicksInWord(\n    address pool,\n    int16 tickBitmapIndex\n  ) external returns (struct ITickLens.PopulatedTick[] populatedTicks)\n")),(0,a.kt)("p",null,"Get all the tick data for the populated ticks from a word of the tick bitmap of a pool"),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"pool")),(0,a.kt)("td",{parentName:"tr",align:"left"},"address"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The address of the pool for which to fetch populated tick data")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"tickBitmapIndex")),(0,a.kt)("td",{parentName:"tr",align:"left"},"int16"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The index of the word in the tick bitmap for which to parse the bitmap and fetch all the populated ticks")))),(0,a.kt)("h4",{id:"return-values"},"Return Values:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"populatedTicks")),(0,a.kt)("td",{parentName:"tr",align:"left"},"ITickLens.PopulatedTick[]"),(0,a.kt)("td",{parentName:"tr",align:"left"},"An array of tick data for the given word in the tick bitmap")))))}d.isMDXComponent=!0},3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>u});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),f=p(r),u=a,k=f["".concat(l,".").concat(u)]||f[u]||d[u]||i;return r?n.createElement(k,o(o({ref:t},s),{},{components:r})):n.createElement(k,o({ref:t},s))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"}}]);