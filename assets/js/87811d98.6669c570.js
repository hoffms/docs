"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[26419],{86242:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var a=n(83117),i=(n(67294),n(3905));const o={id:"connect-wallet",title:"Connecting to Wallets"},r=void 0,c={unversionedId:"sdk/web3-react/guides/connect-wallet",id:"sdk/web3-react/guides/connect-wallet",title:"Connecting to Wallets",description:"Introduction",source:"@site/docs/sdk/web3-react/guides/01-connect-wallet.md",sourceDirName:"sdk/web3-react/guides",slug:"/sdk/web3-react/guides/connect-wallet",permalink:"/docs/sdk/web3-react/guides/connect-wallet",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/sdk/web3-react/guides/01-connect-wallet.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"connect-wallet",title:"Connecting to Wallets"},sidebar:"sdkSidebar",previous:{title:"Overview",permalink:"/docs/sdk/web3-react/overview"},next:{title:"Supported Connectors",permalink:"/docs/sdk/web3-react/guides/connectors"}},l={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Creating a <code>Web3ReactProvider</code>",id:"creating-a-web3reactprovider",level:2},{value:"Building an Injected Connector",id:"building-an-injected-connector",level:2},{value:"Connecting and  disconnecting the application to the connector",id:"connecting-and--disconnecting-the-application-to-the-connector",level:2},{value:"Next Steps",id:"next-steps",level:2}],s={toc:p};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"This guide will cover how to connect wallets with ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react"),". It is based on the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/tree/main/web3-react"},(0,i.kt)("inlineCode",{parentName:"a"},"web3-react")," example")," found in the Uniswap code examples ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples"},"repository"),". To run this example, check out the examples's ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/main/web3-react/README.md"},"README")," and follow the setup instructions."),(0,i.kt)("p",null,"In this example we will walk through setting up ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," and connecting the most popular browser-injected connector, ",(0,i.kt)("a",{parentName:"p",href:"https://metamask.io/"},"MetaMask"),", using ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@web3-react/metamask"},"@web3-react/metamask"),"."),(0,i.kt)("p",null,"The input parameters to this guide are the chains that we want our app to be able to connect to and their RPC URLs."),(0,i.kt)("p",null,"The guide will ",(0,i.kt)("strong",{parentName:"p"},"cover"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Creating a ",(0,i.kt)("inlineCode",{parentName:"li"},"web3-react")," ",(0,i.kt)("inlineCode",{parentName:"li"},"Web3ReactProvider")),(0,i.kt)("li",{parentName:"ol"},"Building a ",(0,i.kt)("inlineCode",{parentName:"li"},"web3-react")," ",(0,i.kt)("inlineCode",{parentName:"li"},"InjectedConnector")),(0,i.kt)("li",{parentName:"ol"},"Connecting and disconnecting the application to the connector")),(0,i.kt)("p",null,"At the end of the guide, we should be able to connect and disconnect your dApp to a MetaMask connector."),(0,i.kt)("p",null,"For this guide, the following ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," packages are used:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@web3-react/core"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/core"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@web3-react/types"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/types"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@web3-react/metamask"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/metamask")))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This guide uses ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," version 8, which is a beta version."))),(0,i.kt)("p",null,"These will be automatically installed by following the example's ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/main/web3-react/README.md"},"README"),"."),(0,i.kt)("p",null,"The core code of this guide can be found in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/main/web3-react/src/libs/components/Web3ContextProvider.tsx"},"Web3ContextProvider")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/main/web3-react/src/libs/injected.ts"},"InjectedConnector"),"."),(0,i.kt)("h2",{id:"creating-a-web3reactprovider"},"Creating a ",(0,i.kt)("inlineCode",{parentName:"h2"},"Web3ReactProvider")),(0,i.kt)("p",null,"To be able to interact with the methods that ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," offers, we first need to setup a ",(0,i.kt)("inlineCode",{parentName:"p"},"Web3ReactProvider")," and wrap our application in it. ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," uses a ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React ",(0,i.kt)("inlineCode",{parentName:"a"},"Context"))," to allow us to use the exposed hooks without additional configuration. "),(0,i.kt)("p",null,"To start, we create a React component called ",(0,i.kt)("inlineCode",{parentName:"p"},"Web3ContextProvider")," in order to wrap the logic of configuring the ",(0,i.kt)("inlineCode",{parentName:"p"},"Web3ReactProvider"),". In this component, we first import  ",(0,i.kt)("inlineCode",{parentName:"p"},"Web3ReactProvider")," from ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@web3-react/core"},"@web3-react/core"),"."),(0,i.kt)("p",null,"The component receives just one prop which is the ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," to which it will be providing the ",(0,i.kt)("inlineCode",{parentName:"p"},"Context"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Defining the Web3React component" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Defining',the:!0,Web3React:!0,'component"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/81ec93e97b0afded621e177fe5f34fc9f98f80b0/web3-react/src/libs/components/Web3ContextProvider.tsx#L24\n")),(0,i.kt)("p",null,"We then implement the component by rendering the imported ",(0,i.kt)("inlineCode",{parentName:"p"},"Web3ReactProvider")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," within that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Implementing the component" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Implementing',the:!0,'component"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/81ec93e97b0afded621e177fe5f34fc9f98f80b0/web3-react/src/libs/components/Web3ContextProvider.tsx#L30-L34\n")),(0,i.kt)("p",null,"Note that we map our list of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/856dbb002e7f38120554ef226f4309c96ce6ea79/web3-react/src/libs/connections.ts#L10"},(0,i.kt)("inlineCode",{parentName:"a"},"Connections"))," to a ",(0,i.kt)("em",{parentName:"p"},"tuple")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"connector")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"hooks")," of the connection. The third element of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Connection")," refers to the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/06980acc8f6d484b719d2c60f5bfe9d766cb95d6/web3-react/src/libs/connections.ts#L16"},"type")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"Connection")," being established, which we will later use to keep track of the actively connected wallet."),(0,i.kt)("p",null,"Finally, having created the ",(0,i.kt)("inlineCode",{parentName:"p"},"Web3ContextProvider")," component, we can navigate to our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/feat/web3-react/web3-react/src/index.tsx"},"index file")," and wrap the whole application with it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Wrapping our app with the web3 context" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Wrapping',our:!0,app:!0,with:!0,the:!0,web3:!0,'context"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/7ac3853bc465aecc428a32be584bbeb833b0a63c/web3-react/src/index.tsx#L16-L22\n")),(0,i.kt)("h2",{id:"building-an-injected-connector"},"Building an Injected Connector"),(0,i.kt)("p",null,"The only parameter that we provided to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Web3ReactProvider")," component is a list of prioritized connectors, declared as ",(0,i.kt)("inlineCode",{parentName:"p"},"PRIORITIZED_CONNECTORS"),". The prioritization ordering is with regards to which connector we want to be active when more than one connector is connected to our application. The list is defined inside our connectors module: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Creating the prioritized Connectors list" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Creating',the:!0,prioritized:!0,Connectors:!0,'list"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/connections.ts#L33-L39\n")),(0,i.kt)("p",null,"Each one of those connectors lives within its own file, and they all follow a similar setup pattern. "),(0,i.kt)("p",null,"An example of a connector in the list is the ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectedConnector"),", which supports wallets that inject an ",(0,i.kt)("em",{parentName:"p"},"Ethereum Provider")," into the browser window. The most popular example of an injected connector is the ",(0,i.kt)("em",{parentName:"p"},"MetaMask")," browser extension. To set it up, we import ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeConnector")," function from ",(0,i.kt)("a",{parentName:"p",href:"(https://www.npmjs.com/package/@web3-react/core)"},"core")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"MetaMask")," type from ",(0,i.kt)("a",{parentName:"p",href:"(https://www.npmjs.com/package/@web3-react/core)"},"metamask"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Importing Connector dependencies" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Importing',Connector:!0,'dependencies"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/856dbb002e7f38120554ef226f4309c96ce6ea79/web3-react/src/libs/injected.ts#L1-L2\n")),(0,i.kt)("p",null,"We then utilize the templated ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeConnector")," function with ",(0,i.kt)("inlineCode",{parentName:"p"},"MetaMask")," as the type argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Initializing the MetaMask connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Initializing',the:!0,MetaMask:!0,'connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/81ec93e97b0afded621e177fe5f34fc9f98f80b0/web3-react/src/libs/injected.ts#L7-L9\n")),(0,i.kt)("p",null,"By passing in ",(0,i.kt)("inlineCode",{parentName:"p"},"MetaMask")," as the type argument, we define the function's required input parameters. In this case, the only parameter we need to pass is an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Metamask"),", which receives the ",(0,i.kt)("inlineCode",{parentName:"p"},"actions")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"onError")," parameters. The first parameter defines the actions that ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," performs on its local store for the connector (this usually can be passed through without modification), while the second parameter is the callback invoked when an error occurs."),(0,i.kt)("p",null,"The return type of the function is a tuple of the initialized ",(0,i.kt)("inlineCode",{parentName:"p"},"Connector")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hooks")," that we can use on it. Using this tuple, we create an instance of a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/856dbb002e7f38120554ef226f4309c96ce6ea79/web3-react/src/libs/connections.ts#L10"},(0,i.kt)("inlineCode",{parentName:"a"},"Connection"))," type, by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," property to ",(0,i.kt)("inlineCode",{parentName:"p"},"INJECTED"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Creating a connection instance" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Creating',a:!0,connection:!0,'instance"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/856dbb002e7f38120554ef226f4309c96ce6ea79/web3-react/src/libs/injected.ts#L16-L20\n")),(0,i.kt)("p",null,"Finally, we return the instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Connection")," we created, which is added to the list of prioritized connectors. "),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For help on creating the rest of the supported connectors of this examples, please visit our ",(0,i.kt)("a",{parentName:"p",href:"./connectors.md"},"connectors")," page!"))),(0,i.kt)("h2",{id:"connecting-and--disconnecting-the-application-to-the-connector"},"Connecting and  disconnecting the application to the connector"),(0,i.kt)("p",null,"Having built our ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectedConnector"),", we can now use it in the Context that allows our application to use that connector:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Creating the Option component" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Creating',the:!0,Option:!0,'component"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/81ec93e97b0afded621e177fe5f34fc9f98f80b0/web3-react/src/libs/components/Option.tsx#L5-L11\n")),(0,i.kt)("p",null,"The component receives 5 parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isEnabled")," determines whether the connector is eligible to be activated"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isConnected")," determines whether the connector is currently active "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"connectionType")," determines the ",(0,i.kt)("inlineCode",{parentName:"li"},"ConnectionType")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onActivate")," is called once the component has established a connection "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onDeactivate")," is called once the component has disconnected")),(0,i.kt)("p",null,"In the case of ",(0,i.kt)("em",{parentName:"p"},"MetaMask"),", when declaring the ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectedConnector")," we pass the connector-specific arguments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Creating an injected connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Creating',an:!0,injected:!0,'connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/81ec93e97b0afded621e177fe5f34fc9f98f80b0/web3-react/src/libs/components/ConnectionOptions.tsx#L26-L32\n")),(0,i.kt)("p",null,"Then, in the ",(0,i.kt)("inlineCode",{parentName:"p"},"html")," portion of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Option"),", we can figure out whether we want the current ",(0,i.kt)("inlineCode",{parentName:"p"},"Option"),"'s action button to be disabled, and whether clicking the button would result in the connector being connected or disconnected:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="The component user interface" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"The',component:!0,user:!0,'interface"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/81ec93e97b0afded621e177fe5f34fc9f98f80b0/web3-react/src/libs/components/Option.tsx#L38-L42\n")),(0,i.kt)("p",null,"Finally, we also have enough information to figure out what action to take when the button is clicked. In the case that the click triggers a connection:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="On connecting to a Connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"On',connecting:!0,to:!0,a:!0,'Connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/components/Option.tsx#L38-L42\n")),(0,i.kt)("p",null,"To connect our wallet, all we need to do is to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"tryActivateConnector")," function and pass it the ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectedConnector"),". We then call the ",(0,i.kt)("inlineCode",{parentName:"p"},"onActivate")," callback, which makes the ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectedConnector")," the active connector in our application's state."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"tryActivateConnector")," takes as its argument the connector that we want to activate, and attempts to call ",(0,i.kt)("inlineCode",{parentName:"p"},"activate")," on it. If this activation succeeds, it returns the new ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionType"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="The implementation of tryActivateConnector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"The',implementation:!0,of:!0,'tryActivateConnector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/connections.ts#L90-L92\n")),(0,i.kt)("p",null,"In the case that the click triggers a disconnection:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="On disconnecting from a Connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"On',disconnecting:!0,from:!0,a:!0,'Connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/components/Option.tsx#L29-L36\n")),(0,i.kt)("p",null,"To disconnect, all we need to do is to call ",(0,i.kt)("inlineCode",{parentName:"p"},"tryDeactivateConnector")," and pass in it the ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectedConnector")," we created before. We then call the ",(0,i.kt)("inlineCode",{parentName:"p"},"onDeactivate")," callback, which removes the ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectedConnector")," as the currently active connector from our application's state."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"tryDeactivateConnector")," takes as its argument the connector that we want to deactivate, and attempts to call ",(0,i.kt)("inlineCode",{parentName:"p"},"deactivate")," on it. If this deactivation succeeds, it resets the connector's state by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"resetState")," and returns ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="The implementation of tryDeactivateConnector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"The',implementation:!0,of:!0,'tryDeactivateConnector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/81ec93e97b0afded621e177fe5f34fc9f98f80b0/web3-react/src/libs/connections.ts#L98-L100\n")),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"Now that we have gone through connecting and disconnecting from an ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectedConnector"),", we will learn how to ",(0,i.kt)("a",{parentName:"p",href:"/docs/sdk/web3-react/guides/connectors"},"connect and disconnect")," from all the different types of connectors that ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," supports."))}m.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(n),h=i,u=d["".concat(l,".").concat(h)]||d[h]||m[h]||o;return n?a.createElement(u,r(r({ref:t},s),{},{components:n})):a.createElement(u,r({ref:t},s))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,r[1]=c;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);