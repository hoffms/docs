"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[3447],{20247:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=t(83117),o=(t(67294),t(3905));const a={sidebar_position:4},s="Nested Action Flows (`ActionFlow`)",l={unversionedId:"api/Actions/nested-action-flows",id:"api/Actions/nested-action-flows",title:"Nested Action Flows (`ActionFlow`)",description:"ActionFlow allows you to create interactive, multi-step experiences, guiding the user through a process that can include different action types, decisions, and conditional logic.",source:"@site/docs/api/Actions/nested-action-flows.md",sourceDirName:"api/Actions",slug:"/api/Actions/nested-action-flows",permalink:"/docs/api/Actions/nested-action-flows",editUrl:"https://github.com/hoffms/docs/tree/main/docs/api/Actions/nested-action-flows.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"apiSidebar",previous:{title:"Overview",permalink:"/docs/api/overview"},next:{title:"Blockchain Actions",permalink:"/docs/api/Actions/blockchain-actions"}},r={},c=[{value:"<code>ActionFlow</code> Interface",id:"actionflow-interface",level:2},{value:"Nested Actions (<code>NestedAction</code>)",id:"nested-actions-nestedaction",level:2},{value:"Navigation and Conditions (<code>nextActions</code>)",id:"navigation-and-conditions-nextactions",level:2},{value:"Special Nested Action Types",id:"special-nested-action-types",level:2},{value:"<code>DecisionAction</code>",id:"decisionaction",level:3},{value:"<code>CompletionAction</code>",id:"completionaction",level:3},{value:"Example: DeFi Swap Flow (Approval + Swap)",id:"example-defi-swap-flow-approval--swap",level:2}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nested-action-flows-actionflow"},"Nested Action Flows (",(0,o.kt)("inlineCode",{parentName:"h1"},"ActionFlow"),")"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ActionFlow")," allows you to create interactive, multi-step experiences, guiding the user through a process that can include different action types, decisions, and conditional logic."),(0,o.kt)("h2",{id:"actionflow-interface"},(0,o.kt)("inlineCode",{parentName:"h2"},"ActionFlow")," Interface"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/interface/actions/flowAction.ts\nexport interface ActionFlow {\n  type: 'flow'; // Action type identifier\n  label: string; // Main label for the flow (e.g., \"Advanced Swap\")\n  initialActionId: string; // ID of the first action to execute in the flow\n  actions: NestedAction[]; // Array containing all actions that make up the flow\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"type"),": Always ",(0,o.kt)("inlineCode",{parentName:"li"},"'flow'"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"label"),": General label for the flow."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"initialActionId"),": The ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," of the ",(0,o.kt)("inlineCode",{parentName:"li"},"NestedAction")," within the ",(0,o.kt)("inlineCode",{parentName:"li"},"actions")," array that will start the flow."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"actions"),": An array containing all the individual actions that are part of the flow.")),(0,o.kt)("h2",{id:"nested-actions-nestedaction"},"Nested Actions (",(0,o.kt)("inlineCode",{parentName:"h2"},"NestedAction"),")"),(0,o.kt)("p",null,"Each step within an ",(0,o.kt)("inlineCode",{parentName:"p"},"ActionFlow")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"NestedAction"),". There are several types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/interface/actions/flowAction.ts\n\n// Base for all nested actions\nexport interface NestedActionBase {\n  id: string; // Unique identifier WITHIN the flow\n  label: string; // Label for this specific step\n  nextActions?: NextActionDefinition[]; // Defines which action(s) follow\n}\n\n// Blockchain Action within a flow\nexport interface NestedBlockchainAction\n  extends Omit<BlockchainActionMetadata, 'label' | 'description'>,\n    NestedActionBase {\n  type: 'blockchain';\n}\n\n// Transfer Action within a flow\nexport interface NestedTransferAction extends Omit<TransferAction, 'label'>, NestedActionBase {\n  type: 'transfer';\n}\n\n// HTTP Action within a flow\nexport interface NestedHttpAction extends Omit<HttpAction, 'label'>, NestedActionBase {\n  type: 'http';\n}\n\n// Decision Action (user chooses a path)\nexport interface DecisionAction extends NestedActionBase {\n  type: 'decision';\n  title: string;\n  description?: string;\n  options: {\n    label: string;\n    value: string; // Value associated with the chosen option\n    nextActionId: string; // ID of the next action for this option\n  }[];\n}\n\n// Completion Action (end of a flow path)\nexport interface CompletionAction extends NestedActionBase {\n  type: 'completion';\n  message: string;\n  status: 'success' | 'error' | 'info';\n  // Does not have nextActions\n}\n\n// Union type for any nested action\nexport type NestedAction =\n  | NestedBlockchainAction\n  | NestedTransferAction\n  | NestedHttpAction\n  | CompletionAction\n  | DecisionAction;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key Properties of ",(0,o.kt)("inlineCode",{parentName:"strong"},"NestedActionBase"),":")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"id"),": A ",(0,o.kt)("strong",{parentName:"li"},"unique")," identifier for this action ",(0,o.kt)("em",{parentName:"li"},"within the flow"),". Used for navigation (",(0,o.kt)("inlineCode",{parentName:"li"},"initialActionId"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"nextActionId"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"label"),": Specific label for this step of the flow."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nextActions"),": An array defining which action(s) should execute next after this one completes successfully.")),(0,o.kt)("h2",{id:"navigation-and-conditions-nextactions"},"Navigation and Conditions (",(0,o.kt)("inlineCode",{parentName:"h2"},"nextActions"),")"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"nextActions")," property controls the flow."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/interface/actions/flowAction.ts\nexport interface NextActionDefinition {\n  actionId: string; // ID of the next action to execute\n  conditions?: ActionCondition[]; // Optional conditions (all must be met)\n}\n\nexport interface ActionCondition {\n  field: string; // Field in the context to evaluate (e.g., 'lastResult.status', 'userInput.amount')\n  operator: 'eq' | 'ne' | 'gt' | 'lt' | 'gte' | 'lte' | 'contains'; // Comparison operator\n  value: any; // Value to compare against\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If a ",(0,o.kt)("inlineCode",{parentName:"li"},"NestedAction")," (except ",(0,o.kt)("inlineCode",{parentName:"li"},"CompletionAction"),") has a ",(0,o.kt)("inlineCode",{parentName:"li"},"nextActions")," array:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If there's only one ",(0,o.kt)("inlineCode",{parentName:"li"},"NextActionDefinition")," without ",(0,o.kt)("inlineCode",{parentName:"li"},"conditions"),", navigate to that ",(0,o.kt)("inlineCode",{parentName:"li"},"actionId")," upon success."),(0,o.kt)("li",{parentName:"ul"},"If there are multiple ",(0,o.kt)("inlineCode",{parentName:"li"},"NextActionDefinition"),"s, evaluate the ",(0,o.kt)("inlineCode",{parentName:"li"},"conditions")," of each one in order. The first one whose conditions are met determines the next ",(0,o.kt)("inlineCode",{parentName:"li"},"actionId"),"."),(0,o.kt)("li",{parentName:"ul"},"If no conditions are met (and there's no condition-less definition at the end), the flow might end or be considered in an invalid state (depends on the executor implementation)."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"conditions")," are evaluated against an ",(0,o.kt)("strong",{parentName:"li"},"execution context")," that maintains the flow's state, including the results of the last action (",(0,o.kt)("inlineCode",{parentName:"li"},"lastResult"),") and user inputs."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"field")," uses dot notation to access nested values in the context (e.g., ",(0,o.kt)("inlineCode",{parentName:"li"},"lastResult.data.txHash"),").")),(0,o.kt)("h2",{id:"special-nested-action-types"},"Special Nested Action Types"),(0,o.kt)("h3",{id:"decisionaction"},(0,o.kt)("inlineCode",{parentName:"h3"},"DecisionAction")),(0,o.kt)("p",null,"Presents options to the user. The ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," of the option selected by the user is stored in the context (typically as ",(0,o.kt)("inlineCode",{parentName:"p"},"userInput")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"userChoice"),") and used to determine the ",(0,o.kt)("inlineCode",{parentName:"p"},"nextActionId")," specified in that option."),(0,o.kt)("h3",{id:"completionaction"},(0,o.kt)("inlineCode",{parentName:"h3"},"CompletionAction")),(0,o.kt)("p",null,"Marks the end of a flow path. Displays a final ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," with a ",(0,o.kt)("inlineCode",{parentName:"p"},"status"),". It does not have ",(0,o.kt)("inlineCode",{parentName:"p"},"nextActions"),"."),(0,o.kt)("h2",{id:"example-defi-swap-flow-approval--swap"},"Example: DeFi Swap Flow (Approval + Swap)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import {\n  ActionFlow,\n  NestedBlockchainAction,\n  DecisionAction,\n  CompletionAction,\n  PARAM_TEMPLATES,\n  createParameter,\n} from '@sherrylinks/sdk';\n\n// Simplified ABIs (erc20Abi, dexAbi) ...\n\nconst defiSwapFlow: ActionFlow = {\n  type: 'flow',\n  label: 'DeFi Swap',\n  initialActionId: 'approve-token',\n  actions: [\n    // 1. Approve Token\n    {\n      id: 'approve-token',\n      type: 'blockchain',\n      label: 'Step 1: Approve USDC Spend',\n      address: '0xUsdcAddress...',\n      abi: erc20Abi,\n      functionName: 'approve',\n      chains: { source: 'avalanche' },\n      params: [\n        createParameter(PARAM_TEMPLATES.ADDRESS, {\n          name: 'spender',\n          value: '0xDexRouterAddress...',\n          fixed: true,\n        }),\n        createParameter(PARAM_TEMPLATES.TOKEN_AMOUNT, {\n          name: 'amount',\n          label: 'Amount to Approve' /* Could come from a previous step */,\n        }),\n      ],\n      nextActions: [\n        {\n          actionId: 'confirm-swap',\n          conditions: [{ field: 'lastResult.status', operator: 'eq', value: 'success' }],\n        },\n        {\n          actionId:\n            'approval-failed' /* No conditions, runs if the previous fails or isn't 'success' */,\n        },\n      ],\n    } as NestedBlockchainAction,\n\n    // 2. Confirm Swap (Decision)\n    {\n      id: 'confirm-swap',\n      type: 'decision',\n      label: 'Step 2: Confirm Swap',\n      title: 'Proceed with Swap?',\n      description: 'You have approved the token. Do you want to execute the swap now?',\n      options: [\n        { label: 'Yes, Swap', value: 'confirm', nextActionId: 'execute-swap' },\n        { label: 'Cancel', value: 'cancel', nextActionId: 'swap-cancelled' },\n      ],\n    } as DecisionAction,\n\n    // 3. Execute Swap\n    {\n      id: 'execute-swap',\n      type: 'blockchain',\n      label: 'Step 3: Executing Swap',\n      address: '0xDexRouterAddress...',\n      abi: dexAbi,\n      functionName: 'swapExactTokensForTokens',\n      chains: { source: 'avalanche' },\n      params: [\n        // Swap parameters, could use context values {{...}}\n        // e.g., { name: 'amountIn', value: '{{approveStep.params.amount}}' }\n      ],\n      nextActions: [\n        {\n          actionId: 'swap-success',\n          conditions: [{ field: 'lastResult.status', operator: 'eq', value: 'success' }],\n        },\n        { actionId: 'swap-failed' },\n      ],\n    } as NestedBlockchainAction,\n\n    // --- Completion States ---\n    {\n      id: 'approval-failed',\n      type: 'completion',\n      label: 'Approval Failed',\n      message: 'Token approval failed. Please try again.',\n      status: 'error',\n    } as CompletionAction,\n    {\n      id: 'swap-success',\n      type: 'completion',\n      label: 'Swap Successful',\n      message: 'Your swap completed successfully!',\n      status: 'success',\n    } as CompletionAction,\n    {\n      id: 'swap-failed',\n      type: 'completion',\n      label: 'Swap Failed',\n      message: 'The swap failed after approval.',\n      status: 'error',\n    } as CompletionAction,\n    {\n      id: 'swap-cancelled',\n      type: 'completion',\n      label: 'Swap Cancelled',\n      message: 'You have cancelled the swap.',\n      status: 'info',\n    } as CompletionAction,\n  ],\n};\n")),(0,o.kt)("p",null,"This example shows how to chain actions, use conditions based on success (",(0,o.kt)("inlineCode",{parentName:"p"},"lastResult.status"),"), and guide the user through a decision and to different final states. Parameter values in later steps can reference outputs or inputs from previous steps using template syntax ",(0,o.kt)("inlineCode",{parentName:"p"},"{{contextVariable}}")," (the exact context handling implementation may vary)."))}d.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var r=i.createContext({}),c=function(e){var n=i.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(r.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,f=u["".concat(r,".").concat(m)]||u[m]||d[m]||a;return t?i.createElement(f,s(s({ref:n},p),{},{components:t})):i.createElement(f,s({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=u;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=t[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);