"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[70561],{80609:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(83117),o=(t(67294),t(3905));const r={id:"final-contract",title:"The Final Contract",sidebar_position:4},s=void 0,i={unversionedId:"contracts/v3/guides/flash-integrations/final-contract",id:"contracts/v3/guides/flash-integrations/final-contract",title:"The Final Contract",description:"The Full Contract",source:"@site/docs/contracts/v3/guides/flash-integrations/final-contract.md",sourceDirName:"contracts/v3/guides/flash-integrations",slug:"/contracts/v3/guides/flash-integrations/final-contract",permalink:"/docs/contracts/v3/guides/flash-integrations/final-contract",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v3/guides/flash-integrations/final-contract.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"final-contract",title:"The Final Contract",sidebar_position:4},sidebar:"contractsSidebar",previous:{title:"The Flash Callback",permalink:"/docs/contracts/v3/guides/flash-integrations/flash-callback"},next:{title:"License Modifications",permalink:"/docs/contracts/v3/guides/governance/liscense-modifications"}},l={},c=[{value:"The Full Contract",id:"the-full-contract",level:2}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"the-full-contract"},"The Full Contract"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol';\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\n\nimport '@uniswap/v3-periphery/contracts/base/PeripheryPayments.sol';\nimport '@uniswap/v3-periphery/contracts/base/PeripheryImmutableState.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/CallbackValidation.sol';\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\n\n/// @title Flash contract implementation\n/// @notice An example contract using the Uniswap V3 flash function\ncontract PairFlash is IUniswapV3FlashCallback, PeripheryImmutableState, PeripheryPayments {\n    using LowGasSafeMath for uint256;\n    using LowGasSafeMath for int256;\n\n    ISwapRouter public immutable swapRouter;\n\n    constructor(\n        ISwapRouter _swapRouter,\n        address _factory,\n        address _WETH9\n    ) PeripheryImmutableState(_factory, _WETH9) {\n        swapRouter = _swapRouter;\n    }\n\n    /// @param fee0 The fee from calling flash for token0\n    /// @param fee1 The fee from calling flash for token1\n    /// @param data The data needed in the callback passed as FlashCallbackData from `initFlash`\n    /// @notice implements the callback called from flash\n    /// @dev fails if the flash is not profitable, meaning the amountOut from the flash is less than the amount borrowed\n    function uniswapV3FlashCallback(\n        uint256 fee0,\n        uint256 fee1,\n        bytes calldata data\n    ) external override {\n        FlashCallbackData memory decoded = abi.decode(data, (FlashCallbackData));\n        CallbackValidation.verifyCallback(factory, decoded.poolKey);\n\n        address token0 = decoded.poolKey.token0;\n        address token1 = decoded.poolKey.token1;\n\n        TransferHelper.safeApprove(token0, address(swapRouter), decoded.amount0);\n        TransferHelper.safeApprove(token1, address(swapRouter), decoded.amount1);\n\n        // profitable check\n        // exactInputSingle will fail if this amount not met\n        uint256 amount1Min = LowGasSafeMath.add(decoded.amount1, fee1);\n        uint256 amount0Min = LowGasSafeMath.add(decoded.amount0, fee0);\n\n        // call exactInputSingle for swapping token1 for token0 in pool w/fee2\n        uint256 amountOut0 =\n            swapRouter.exactInputSingle(\n                ISwapRouter.ExactInputSingleParams({\n                    tokenIn: token1,\n                    tokenOut: token0,\n                    fee: decoded.poolFee2,\n                    recipient: address(this),\n                    deadline: block.timestamp,\n                    amountIn: decoded.amount1,\n                    amountOutMinimum: amount0Min,\n                    sqrtPriceLimitX96: 0\n                })\n            );\n\n        // call exactInputSingle for swapping token0 for token 1 in pool w/fee3\n        uint256 amountOut1 =\n            swapRouter.exactInputSingle(\n                ISwapRouter.ExactInputSingleParams({\n                    tokenIn: token0,\n                    tokenOut: token1,\n                    fee: decoded.poolFee3,\n                    recipient: address(this),\n                    deadline: block.timestamp,\n                    amountIn: decoded.amount0,\n                    amountOutMinimum: amount1Min,\n                    sqrtPriceLimitX96: 0\n                })\n            );\n\n        // end up with amountOut0 of token0 from first swap and amountOut1 of token1 from second swap\n        uint256 amount0Owed = LowGasSafeMath.add(decoded.amount0, fee0);\n        uint256 amount1Owed = LowGasSafeMath.add(decoded.amount1, fee1);\n\n        TransferHelper.safeApprove(token0, address(this), amount0Owed);\n        TransferHelper.safeApprove(token1, address(this), amount1Owed);\n\n        if (amount0Owed > 0) pay(token0, address(this), msg.sender, amount0Owed);\n        if (amount1Owed > 0) pay(token1, address(this), msg.sender, amount1Owed);\n\n        // if profitable pay profits to payer\n        if (amountOut0 > amount0Owed) {\n            uint256 profit0 = LowGasSafeMath.sub(amountOut0, amount0Owed);\n\n            TransferHelper.safeApprove(token0, address(this), profit0);\n            pay(token0, address(this), decoded.payer, profit0);\n        }\n        if (amountOut1 > amount1Owed) {\n            uint256 profit1 = LowGasSafeMath.sub(amountOut1, amount1Owed);\n            TransferHelper.safeApprove(token0, address(this), profit1);\n            pay(token1, address(this), decoded.payer, profit1);\n        }\n    }\n\n    //fee1 is the fee of the pool from the initial borrow\n    //fee2 is the fee of the first pool to arb from\n    //fee3 is the fee of the second pool to arb from\n    struct FlashParams {\n        address token0;\n        address token1;\n        uint24 fee1;\n        uint256 amount0;\n        uint256 amount1;\n        uint24 fee2;\n        uint24 fee3;\n    }\n    // fee2 and fee3 are the two other fees associated with the two other pools of token0 and token1\n    struct FlashCallbackData {\n        uint256 amount0;\n        uint256 amount1;\n        address payer;\n        PoolAddress.PoolKey poolKey;\n        uint24 poolFee2;\n        uint24 poolFee3;\n    }\n\n    /// @param params The parameters necessary for flash and the callback, passed in as FlashParams\n    /// @notice Calls the pools flash function with data needed in `uniswapV3FlashCallback`\n    function initFlash(FlashParams memory params) external {\n        PoolAddress.PoolKey memory poolKey =\n            PoolAddress.PoolKey({token0: params.token0, token1: params.token1, fee: params.fee1});\n        IUniswapV3Pool pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n        // recipient of borrowed amounts\n        // amount of token0 requested to borrow\n        // amount of token1 requested to borrow\n        // need amount 0 and amount1 in callback to pay back pool\n        // recipient of flash should be THIS contract\n        pool.flash(\n            address(this),\n            params.amount0,\n            params.amount1,\n            abi.encode(\n                FlashCallbackData({\n                    amount0: params.amount0,\n                    amount1: params.amount1,\n                    payer: msg.sender,\n                    poolKey: poolKey,\n                    poolFee2: params.fee2,\n                    poolFee3: params.fee3\n                })\n            )\n        );\n    }\n}\n\n")))}d.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),f=o,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||r;return t?a.createElement(m,s(s({ref:n},p),{},{components:t})):a.createElement(m,s({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);