"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[45810],{21630:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>u,toc:()=>i});var n=a(83117),r=(a(67294),a(3905));const l={},o="V4Quoter",u={unversionedId:"contracts/v4/reference/periphery/lens/V4Quoter",id:"contracts/v4/reference/periphery/lens/V4Quoter",title:"V4Quoter",description:"Git Source - Generated with forge doc",source:"@site/docs/contracts/v4/reference/periphery/lens/V4Quoter.md",sourceDirName:"contracts/v4/reference/periphery/lens",slug:"/contracts/v4/reference/periphery/lens/V4Quoter",permalink:"/docs/contracts/v4/reference/periphery/lens/V4Quoter",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v4/reference/periphery/lens/V4Quoter.md",tags:[],version:"current",frontMatter:{},sidebar:"contractsSidebar",previous:{title:"StateView",permalink:"/docs/contracts/v4/reference/periphery/lens/StateView"},next:{title:"ActionConstants",permalink:"/docs/contracts/v4/reference/periphery/libraries/ActionConstants"}},p={},i=[{value:"Functions",id:"functions",level:2},{value:"constructor",id:"constructor",level:3},{value:"quoteExactInputSingle",id:"quoteexactinputsingle",level:3},{value:"quoteExactInput",id:"quoteexactinput",level:3},{value:"quoteExactOutputSingle",id:"quoteexactoutputsingle",level:3},{value:"quoteExactOutput",id:"quoteexactoutput",level:3},{value:"_quoteExactInput",id:"_quoteexactinput",level:3},{value:"_quoteExactInputSingle",id:"_quoteexactinputsingle",level:3},{value:"_quoteExactOutput",id:"_quoteexactoutput",level:3},{value:"_quoteExactOutputSingle",id:"_quoteexactoutputsingle",level:3}],s={toc:i};function c(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"v4quoter"},"V4Quoter"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/uniswap/v4-periphery/blob/ea2bf2e1ba6863bb809fc2ff791744f308c4a26d/src/lens/V4Quoter.sol"},"Git Source")," - Generated with ",(0,r.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/reference/forge/forge-doc"},"forge doc")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Inherits:"),"\n",(0,r.kt)("a",{parentName:"p",href:"/docs/contracts/v4/reference/periphery/interfaces/IV4Quoter"},"IV4Quoter"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/contracts/v4/reference/periphery/base/BaseV4Quoter"},"BaseV4Quoter")),(0,r.kt)("p",null,"Supports quoting the delta amounts for exact input or exact output swaps."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"These functions are not marked view because they rely on calling non-view functions and reverting\nto compute the result. They are also not gas efficient and should not be called on-chain.")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"constructor"},"constructor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"constructor(IPoolManager _poolManager) BaseV4Quoter(_poolManager);\n")),(0,r.kt)("h3",{id:"quoteexactinputsingle"},"quoteExactInputSingle"),(0,r.kt)("p",null,"Returns the delta amounts for a given exact input swap of a single pool"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function quoteExactInputSingle(QuoteExactSingleParams memory params)\n    external\n    returns (uint256 amountOut, uint256 gasEstimate);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"params")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"QuoteExactSingleParams")),(0,r.kt)("td",{parentName:"tr",align:null},"The params for the quote, encoded as ",(0,r.kt)("inlineCode",{parentName:"td"},"QuoteExactSingleParams")," poolKey The key for identifying a V4 pool zeroForOne If the swap is from currency0 to currency1 exactAmount The desired input amount hookData arbitrary hookData to pass into the associated hooks")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amountOut")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The output quote for the exactIn swap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"gasEstimate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Estimated gas units used for the swap")))),(0,r.kt)("h3",{id:"quoteexactinput"},"quoteExactInput"),(0,r.kt)("p",null,"Returns the delta amounts along the swap path for a given exact input swap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function quoteExactInput(QuoteExactParams memory params) external returns (uint256 amountOut, uint256 gasEstimate);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"params")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"QuoteExactParams")),(0,r.kt)("td",{parentName:"tr",align:null},"the params for the quote, encoded as 'QuoteExactParams' currencyIn The input currency of the swap path The path of the swap encoded as PathKeys that contains currency, fee, tickSpacing, and hook info exactAmount The desired input amount")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amountOut")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The output quote for the exactIn swap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"gasEstimate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Estimated gas units used for the swap")))),(0,r.kt)("h3",{id:"quoteexactoutputsingle"},"quoteExactOutputSingle"),(0,r.kt)("p",null,"Returns the delta amounts for a given exact output swap of a single pool"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function quoteExactOutputSingle(QuoteExactSingleParams memory params)\n    external\n    returns (uint256 amountIn, uint256 gasEstimate);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"params")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"QuoteExactSingleParams")),(0,r.kt)("td",{parentName:"tr",align:null},"The params for the quote, encoded as ",(0,r.kt)("inlineCode",{parentName:"td"},"QuoteExactSingleParams")," poolKey The key for identifying a V4 pool zeroForOne If the swap is from currency0 to currency1 exactAmount The desired output amount hookData arbitrary hookData to pass into the associated hooks")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amountIn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The input quote for the exactOut swap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"gasEstimate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Estimated gas units used for the swap")))),(0,r.kt)("h3",{id:"quoteexactoutput"},"quoteExactOutput"),(0,r.kt)("p",null,"Returns the delta amounts along the swap path for a given exact output swap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function quoteExactOutput(QuoteExactParams memory params) external returns (uint256 amountIn, uint256 gasEstimate);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"params")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"QuoteExactParams")),(0,r.kt)("td",{parentName:"tr",align:null},"the params for the quote, encoded as 'QuoteExactParams' currencyOut The output currency of the swap path The path of the swap encoded as PathKeys that contains currency, fee, tickSpacing, and hook info exactAmount The desired output amount")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amountIn")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The input quote for the exactOut swap")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"gasEstimate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Estimated gas units used for the swap")))),(0,r.kt)("h3",{id:"_quoteexactinput"},"_quoteExactInput"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"external function called within the _unlockCallback, to simulate an exact input swap, then revert with the result")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _quoteExactInput(QuoteExactParams calldata params) external selfOnly returns (bytes memory);\n")),(0,r.kt)("h3",{id:"_quoteexactinputsingle"},"_quoteExactInputSingle"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"external function called within the _unlockCallback, to simulate a single-hop exact input swap, then revert with the result")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _quoteExactInputSingle(QuoteExactSingleParams calldata params) external selfOnly returns (bytes memory);\n")),(0,r.kt)("h3",{id:"_quoteexactoutput"},"_quoteExactOutput"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"external function called within the _unlockCallback, to simulate an exact output swap, then revert with the result")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _quoteExactOutput(QuoteExactParams calldata params) external selfOnly returns (bytes memory);\n")),(0,r.kt)("h3",{id:"_quoteexactoutputsingle"},"_quoteExactOutputSingle"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"external function called within the _unlockCallback, to simulate a single-hop exact output swap, then revert with the result")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _quoteExactOutputSingle(QuoteExactSingleParams calldata params) external selfOnly returns (bytes memory);\n")))}c.isMDXComponent=!0},3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>d});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function u(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),i=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},s=function(t){var e=i(t.components);return n.createElement(p.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,s=u(t,["components","mdxType","originalType","parentName"]),m=i(a),d=r,k=m["".concat(p,".").concat(d)]||m[d]||c[d]||l;return a?n.createElement(k,o(o({ref:e},s),{},{components:a})):n.createElement(k,o({ref:e},s))}));function d(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,o=new Array(l);o[0]=m;var u={};for(var p in e)hasOwnProperty.call(e,p)&&(u[p]=e[p]);u.originalType=t,u.mdxType="string"==typeof t?t:r,o[1]=u;for(var i=2;i<l;i++)o[i]=a[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);