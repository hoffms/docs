"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[49463],{99703:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>b,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var r=n(83117),i=(n(67294),n(3905));const o={title:"Subscriber"},s="Context",a={unversionedId:"contracts/v4/quickstart/subscriber",id:"contracts/v4/quickstart/subscriber",title:"Subscriber",description:"For developers looking to support custom liquidity mining, Subscriber contracts can be used to receive notifications about position modifications or transfers.",source:"@site/docs/contracts/v4/quickstart/05-subscriber.mdx",sourceDirName:"contracts/v4/quickstart",slug:"/contracts/v4/quickstart/subscriber",permalink:"/docs/contracts/v4/quickstart/subscriber",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v4/quickstart/05-subscriber.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Subscriber"},sidebar:"contractsSidebar",previous:{title:"AsyncSwap Hooks",permalink:"/docs/contracts/v4/quickstart/hooks/async-swap"},next:{title:"Building Your First Hook",permalink:"/docs/contracts/v4/guides/hooks/your-first-hook"}},c={},u=[{value:"1. Implement the <code>ISubscriber</code> interface",id:"1-implement-the-isubscriber-interface",level:2},{value:"2. A caveat on <code>unsubscribe()</code>",id:"2-a-caveat-on-unsubscribe",level:2},{value:"3. Opt-in to a subscriber contract",id:"3-opt-in-to-a-subscriber-contract",level:2}],l={toc:u};function b(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"context"},"Context"),(0,i.kt)("p",null,"For developers looking to support custom ",(0,i.kt)("em",{parentName:"p"},"liquidity mining"),", Subscriber contracts can be used to receive notifications about position modifications or transfers."),(0,i.kt)("h1",{id:"guide"},"Guide"),(0,i.kt)("h2",{id:"1-implement-the-isubscriber-interface"},"1. Implement the ",(0,i.kt)("a",{parentName:"h2",href:"https://github.com/Uniswap/v4-periphery/blob/main/src/interfaces/ISubscriber.sol"},(0,i.kt)("inlineCode",{parentName:"a"},"ISubscriber"))," interface"),(0,i.kt)("p",null,"Can also refer to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/v4-periphery/blob/main/test/mocks/MockSubscriber.sol"},"MockSubscriber")," for an actual implementation example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'import {ISubscriber} from "v4-periphery/src/interfaces/ISubscriber.sol";\n\ncontract MySubscriber is ISubscriber {\n    uint256 public notifySubscribeCount;\n    uint256 public notifyUnsubscribeCount;\n    uint256 public notifyModifyLiquidityCount;\n    uint256 public notifyBurnCount;\n    // other implementations...\n\n    function notifySubscribe(uint256, bytes memory) external onlyByPosm {\n        notifySubscribeCount++;\n    }\n\n    function notifyUnsubscribe(uint256) external onlyByPosm {\n        notifyUnsubscribeCount++;\n    }\n\n    function notifyModifyLiquidity(uint256, int256, BalanceDelta) external onlyByPosm {\n        notifyModifyLiquidityCount++;\n    }\n\n    function notifyBurn(uint256, address, PositionInfo, uint256, BalanceDelta)\n        external\n        onlyByPosm\n    {\n        notifyBurnCount++;\n    }\n}\n')),(0,i.kt)("h2",{id:"2-a-caveat-on-unsubscribe"},"2. A caveat on ",(0,i.kt)("inlineCode",{parentName:"h2"},"unsubscribe()")),(0,i.kt)("p",null,"To prevent gas griefing during unsubscription, Uniswap v4 sets a fixed variable ",(0,i.kt)("a",{parentName:"p",href:"/contracts/v4/reference/periphery/interfaces/INotifier#unsubscribegaslimit"},(0,i.kt)("inlineCode",{parentName:"a"},"unsubscribeGasLimit"))," when calling a subscriber\u2019s ",(0,i.kt)("inlineCode",{parentName:"p"},"notifyUnsubscribe()")," function."),(0,i.kt)("p",null,"Without this limit, malicious subscribers could prevent liquidity providers from unsubscribing. If ",(0,i.kt)("inlineCode",{parentName:"p"},"notifyUnsubscribe()")," were to consume too much gas, it would cause the unsubscription transaction to revert, thus leading to a denial-of-service"),(0,i.kt)("p",null,"With the gas limit in place, if the subscriber\u2019s notification fails, the unsubscription will still succeed and only the notification to the subscriber is skipped."),(0,i.kt)("p",null,"From ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/v4-periphery/blob/main/src/base/Notifier.sol#L80"},(0,i.kt)("inlineCode",{parentName:"a"},"_unsubscribe()"))," on ",(0,i.kt)("inlineCode",{parentName:"p"},"Notifier"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"if (address(_subscriber).code.length > 0) {\n    // require that the remaining gas is sufficient to notify the subscriber\n    // otherwise, users can select a gas limit where .notifyUnsubscribe hits OutOfGas yet the\n    // transaction/unsubscription can still succee\n    if (gasleft() < unsubscribeGasLimit) GasLimitTooLow.selector.revertWith();\n    try _subscriber.notifyUnsubscribe{gas: unsubscribeGasLimit}(tokenId) {} catch {}\n}\n")),(0,i.kt)("h2",{id:"3-opt-in-to-a-subscriber-contract"},"3. Opt-in to a subscriber contract"),(0,i.kt)("p",null,"To opt-in to a subscriber contract, call ",(0,i.kt)("a",{parentName:"p",href:"/contracts/v4/reference/periphery/interfaces/INotifier#subscribe"},(0,i.kt)("inlineCode",{parentName:"a"},"subscribe()"))," on ",(0,i.kt)("inlineCode",{parentName:"p"},"PositionManager"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'import {IPositionManager} from "v4-periphery/src/interfaces/IPositionManager.sol";\n\nIPositionManager posm = IPositionManager(<address>);\nISubscriber mySubscriber = ISubscriber(<address>);\n\nbytes memory optionalData = ...;\nposm.subscribe(tokenId, mySubscriber, optionalData);\n')))}b.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=u(n),f=i,m=p["".concat(c,".").concat(f)]||p[f]||b[f]||o;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);