"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[58440],{97997:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>d});var i=o(83117),r=(o(67294),o(3905));const n={title:"Liquidity Hooks"},a=void 0,l={unversionedId:"contracts/v4/quickstart/hooks/liquidity",id:"contracts/v4/quickstart/hooks/liquidity",title:"Liquidity Hooks",description:"This guide will walk through on an example of adding and removing liquidity. There are four hook functions available to customize and extend these behavior:",source:"@site/docs/contracts/v4/quickstart/04-hooks/02-liquidity.mdx",sourceDirName:"contracts/v4/quickstart/04-hooks",slug:"/contracts/v4/quickstart/hooks/liquidity",permalink:"/docs/contracts/v4/quickstart/hooks/liquidity",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v4/quickstart/04-hooks/02-liquidity.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Liquidity Hooks"},sidebar:"contractsSidebar",previous:{title:"Swap Hooks",permalink:"/docs/contracts/v4/quickstart/hooks/swap"},next:{title:"AsyncSwap Hooks",permalink:"/docs/contracts/v4/quickstart/hooks/async-swap"}},s={},d=[{value:"Set Up the Contract",id:"set-up-the-contract",level:2},{value:"beforeAddLiquidity",id:"beforeaddliquidity",level:2},{value:"<code>beforeAddLiquidity</code> Parameters",id:"beforeaddliquidity-parameters",level:3},{value:"beforeRemoveLiquidity",id:"beforeremoveliquidity",level:2},{value:"<code>beforeRemoveLiquidity</code> Parameters",id:"beforeremoveliquidity-parameters",level:3},{value:"A Complete Liquidity Hook Contract",id:"a-complete-liquidity-hook-contract",level:2}],u={toc:d};function p(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide will walk through on an example of adding and removing liquidity. There are four hook functions available to customize and extend these behavior:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"beforeAddLiquidity")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"afterAddLiquidity")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"beforeRemoveLiquidity")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"afterRemoveLiquidity"))),(0,r.kt)("p",null,"As the names suggest ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeAddLiquidity"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"afterAddLiquidity")," are functions called before or after liquidity is added to a pool.\nSimilarly ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeRemoveLiquidity"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"afterRemoveLiquidity")," are functions called before or after liquidity is removed from a pool."),(0,r.kt)("p",null,"This guide will go through the parameters and examples specifically for ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeAddLiquidity")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeRemoveLiquidity"),"."),(0,r.kt)("p",null,"Note: The liquidity examples are not production ready code, and are implemented in a simplistic manner for the purpose of learning."),(0,r.kt)("h2",{id:"set-up-the-contract"},"Set Up the Contract"),(0,r.kt)("p",null,"Declare the solidity version used to compile the contract, since transient storage is used the solidity version will be ",(0,r.kt)("inlineCode",{parentName:"p"},">=0.8.24"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n")),(0,r.kt)("p",null,"Import the relevant dependencies from ",(0,r.kt)("inlineCode",{parentName:"p"},"v4-core")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"v4-periphery"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'import {BaseHook} from "v4-periphery/src/utils/BaseHook.sol";\n\nimport {Hooks} from "v4-core/src/libraries/Hooks.sol";\nimport {IPoolManager} from "v4-core/src/interfaces/IPoolManager.sol";\nimport {PoolKey} from "v4-core/src/types/PoolKey.sol";\nimport {PoolId, PoolIdLibrary} from "v4-core/src/types/PoolId.sol";\nimport {BalanceDelta} from "v4-core/src/types/BalanceDelta.sol";\nimport {BeforeSwapDelta, BeforeSwapDeltaLibrary} from "v4-core/src/types/BeforeSwapDelta.sol";\n')),(0,r.kt)("p",null,"Create a contract called LiquidityHook, use ",(0,r.kt)("inlineCode",{parentName:"p"},"PoolIdLibrary")," to attach functions of computing ID of a pool to ",(0,r.kt)("inlineCode",{parentName:"p"},"PoolKey"),". Declare two mappings to act as counters when calling ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeAddLiquidity")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeRemoveLiquidity"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"contract LiquidityHook is BaseHook {\n    using PoolIdLibrary for PoolKey;\n\n    // NOTE: ---------------------------------------------------------\n    // state variables should typically be unique to a pool\n    // a single hook contract should be able to service multiple pools\n    // ---------------------------------------------------------------\n\n    mapping(PoolId => uint256 count) public beforeAddLiquidityCount;\n    mapping(PoolId => uint256 count) public beforeRemoveLiquidityCount;\n\n    constructor(IPoolManager _poolManager) BaseHook(_poolManager) {}\n")),(0,r.kt)("p",null,"Override ",(0,r.kt)("inlineCode",{parentName:"p"},"getHookPermissions")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"BaseHook.sol")," to return a struct of permissions to signal which hook functions are to be implemented.\nIt will also be used at deployment to validate the address correctly represents the expected permissions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getHookPermissions() public pure override returns (Hooks.Permissions memory) {\n    return Hooks.Permissions({\n        beforeInitialize: false,\n        afterInitialize: false,\n        beforeAddLiquidity: true,\n        afterAddLiquidity: false,\n        beforeRemoveLiquidity: true,\n        afterRemoveLiquidity: false,\n        beforeSwap: false,\n        afterSwap: false,\n        beforeDonate: false,\n        afterDonate: false,\n        beforeAddLiquidityReturnDelta: false,\n        afterSwapReturnDelta: false,\n        afterAddLiquidityReturnDelta: false,\n        afterRemoveLiquidityReturnDelta: false\n    });\n}\n")),(0,r.kt)("h2",{id:"beforeaddliquidity"},"beforeAddLiquidity"),(0,r.kt)("p",null,"Here the example shows that every time ",(0,r.kt)("strong",{parentName:"p"},"before")," liquidity is added to a pool, ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeAddLiquidityCount")," for that pool will be incremented by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _beforeAddLiquidity(\n    address,\n    PoolKey calldata key,\n    IPoolManager.ModifyLiquidityParams calldata,\n    bytes calldata\n) internal override returns (bytes4) {\n    beforeAddLiquidityCount[key.toId()]++;\n    return BaseHook.beforeAddLiquidity.selector;\n}\n")),(0,r.kt)("h3",{id:"beforeaddliquidity-parameters"},(0,r.kt)("inlineCode",{parentName:"h3"},"beforeAddLiquidity")," Parameters"),(0,r.kt)("p",null,"When triggering the ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeAddLiquidity")," hook function, there are some parameters we can make use of to customize or extend the behavior of ",(0,r.kt)("inlineCode",{parentName:"p"},"modifyLiquidity"),". These parameters are described in ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeAddLiquidity")," from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/v4-core/blob/main/src/interfaces/IHooks.sol#L47"},(0,r.kt)("inlineCode",{parentName:"a"},"IHooks.sol")),"."),(0,r.kt)("p",null,"A brief overview of the parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sender")," The initial ",(0,r.kt)("inlineCode",{parentName:"li"},"msg.sender")," for the add liquidity call"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," The key for the pool"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params")," The parameters for adding liquidity i.e. ",(0,r.kt)("inlineCode",{parentName:"li"},"ModifyLiquidityParams")," from ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/Uniswap/v4-core/blob/main/src/interfaces/IPoolManager.sol#L125C12-L125C33"},(0,r.kt)("inlineCode",{parentName:"a"},"IPoolManager.sol"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hookData")," Arbitrary data handed into the ",(0,r.kt)("inlineCode",{parentName:"li"},"PoolManager")," by the liquidity provider to be be passed on to the hook")),(0,r.kt)("h2",{id:"beforeremoveliquidity"},"beforeRemoveLiquidity"),(0,r.kt)("p",null,"Similiar as above, every time ",(0,r.kt)("strong",{parentName:"p"},"before")," liquidity is removed from a pool, ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeRemoveLiquidityCount")," for that pool will be incremented by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _beforeRemoveLiquidity(\n    address,\n    PoolKey calldata key,\n    IPoolManager.ModifyLiquidityParams calldata,\n    bytes calldata\n) internal override returns (bytes4) {\n    beforeRemoveLiquidityCount[key.toId()]++;\n    return BaseHook.beforeRemoveLiquidity.selector;\n}\n")),(0,r.kt)("h3",{id:"beforeremoveliquidity-parameters"},(0,r.kt)("inlineCode",{parentName:"h3"},"beforeRemoveLiquidity")," Parameters"),(0,r.kt)("p",null,"When triggering the ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeRemoveLiquidity")," hook function, there are some parameters we can make use of to customize or extend the behavior of ",(0,r.kt)("inlineCode",{parentName:"p"},"modifyLiquidity"),". These parameters are described in ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeRemoveLiquidity")," from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/v4-core/blob/main/src/interfaces/IHooks.sol#L78"},(0,r.kt)("inlineCode",{parentName:"a"},"IHooks.sol")),"."),(0,r.kt)("p",null,"A brief overview of the parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sender")," The initial msg.sender for the remove liquidity call"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," The key for the pool"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params")," The parameters for removing liquidity i.e. ",(0,r.kt)("inlineCode",{parentName:"li"},"ModifyLiquidityParams")," from ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/Uniswap/v4-core/blob/main/src/interfaces/IPoolManager.sol#L125C12-L125C33"},(0,r.kt)("inlineCode",{parentName:"a"},"IPoolManager.sol"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hookData")," Arbitrary data handed into the ",(0,r.kt)("inlineCode",{parentName:"li"},"PoolManager")," by the liquidity provider to be be passed on to the hook\n")),(0,r.kt)("h2",{id:"a-complete-liquidity-hook-contract"},"A Complete Liquidity Hook Contract"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {BaseHook} from "v4-periphery/src/utils/BaseHook.sol";\n\nimport {Hooks} from "v4-core/src/libraries/Hooks.sol";\nimport {IPoolManager} from "v4-core/src/interfaces/IPoolManager.sol";\nimport {PoolKey} from "v4-core/src/types/PoolKey.sol";\nimport {PoolId, PoolIdLibrary} from "v4-core/src/types/PoolId.sol";\nimport {BalanceDelta} from "v4-core/src/types/BalanceDelta.sol";\nimport {BeforeSwapDelta, BeforeSwapDeltaLibrary} from "v4-core/src/types/BeforeSwapDelta.sol";\n\ncontract LiquidityHook is BaseHook {\n    using PoolIdLibrary for PoolKey;\n\n    // NOTE: ---------------------------------------------------------\n    // state variables should typically be unique to a pool\n    // a single hook contract should be able to service multiple pools\n    // ---------------------------------------------------------------\n\n    mapping(PoolId => uint256 count) public beforeAddLiquidityCount;\n    mapping(PoolId => uint256 count) public beforeRemoveLiquidityCount;\n\n    constructor(IPoolManager _poolManager) BaseHook(_poolManager) {}\n\n    function getHookPermissions() public pure override returns (Hooks.Permissions memory) {\n        return Hooks.Permissions({\n            beforeInitialize: false,\n            afterInitialize: false,\n            beforeAddLiquidity: true,\n            afterAddLiquidity: false,\n            beforeRemoveLiquidity: true,\n            afterRemoveLiquidity: false,\n            beforeSwap: false,\n            afterSwap: false,\n            beforeDonate: false,\n            afterDonate: false,\n            beforeAddLiquidityReturnDelta: false,\n            afterSwapReturnDelta: false,\n            afterAddLiquidityReturnDelta: false,\n            afterRemoveLiquidityReturnDelta: false\n        });\n    }\n\n    // -----------------------------------------------\n    // NOTE: see IHooks.sol for function documentation\n    // -----------------------------------------------\n\n    function _beforeAddLiquidity(\n        address,\n        PoolKey calldata key,\n        IPoolManager.ModifyLiquidityParams calldata,\n        bytes calldata\n    ) internal override returns (bytes4) {\n        beforeAddLiquidityCount[key.toId()]++;\n        return BaseHook.beforeAddLiquidity.selector;\n    }\n\n    function _beforeRemoveLiquidity(\n        address,\n        PoolKey calldata key,\n        IPoolManager.ModifyLiquidityParams calldata,\n        bytes calldata\n    ) internal override returns (bytes4) {\n        beforeRemoveLiquidityCount[key.toId()]++;\n        return BaseHook.beforeRemoveLiquidity.selector;\n    }\n}\n')))}p.isMDXComponent=!0},3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>m});var i=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function n(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,i)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?n(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,i,r=function(e,t){if(null==e)return{};var o,i,r={},n=Object.keys(e);for(i=0;i<n.length;i++)o=n[i],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)o=n[i],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=i.createContext({}),d=function(e){var t=i.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},u=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var o=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(o),m=r,f=c["".concat(s,".").concat(m)]||c[m]||p[m]||n;return o?i.createElement(f,a(a({ref:t},u),{},{components:o})):i.createElement(f,a({ref:t},u))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=o.length,a=new Array(n);a[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var d=2;d<n;d++)a[d]=o[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,o)}c.displayName="MDXCreateElement"}}]);