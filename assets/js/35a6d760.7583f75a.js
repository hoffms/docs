"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[71897],{78850:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(83117),a=(n(67294),n(3905));const o={id:"trade",title:"Trade"},u=void 0,i={unversionedId:"sdk/v2/reference/trade",id:"sdk/v2/reference/trade",title:"Trade",description:"The Trade entity represents a fully specified trade along a route. This entity supplies all the information necessary to craft a router transaction.",source:"@site/docs/sdk/v2/reference/04-trade.md",sourceDirName:"sdk/v2/reference",slug:"/sdk/v2/reference/trade",permalink:"/docs/sdk/v2/reference/trade",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/sdk/v2/reference/04-trade.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"trade",title:"Trade"},sidebar:"sdkSidebar",previous:{title:"Route",permalink:"/docs/sdk/v2/reference/route"},next:{title:"Other Exports",permalink:"/docs/sdk/v2/reference/other-exports"}},s={},p=[{value:"route",id:"route",level:2},{value:"tradeType",id:"tradetype",level:2},{value:"inputAmount",id:"inputamount",level:2},{value:"outputAmount",id:"outputamount",level:2},{value:"executionPrice",id:"executionprice",level:2},{value:"priceImpact",id:"priceimpact",level:2},{value:"minimumAmountOut (since 2.0.4)",id:"minimumamountout-since-204",level:2},{value:"maximumAmountIn (since 2.0.4)",id:"maximumamountin-since-204",level:2},{value:"worstExecutionPrice",id:"worstexecutionprice",level:2},{value:"exactIn",id:"exactin",level:2},{value:"exactOut",id:"exactout",level:2},{value:"bestTradeExactIn",id:"besttradeexactin",level:2},{value:"bestTradeExactOut",id:"besttradeexactout",level:2}],c={toc:p};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType)\n")),(0,a.kt)("p",null,"The Trade entity represents a fully specified trade along a route. This entity supplies all the information necessary to craft a router transaction."),(0,a.kt)("h1",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ChainId, Token, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Trade, Route }\n\nconst HOT = new Token(ChainId.MAINNET, '0xc0FFee0000000000000000000000000000000000', 18, 'HOT', 'Caffeine')\nconst NOT = new Token(ChainId.MAINNET, '0xDeCAf00000000000000000000000000000000000', 18, 'NOT', 'Caffeine')\nconst HOT_NOT = new Pair(CurrencyAmount.fromRawAmount(HOT, '2000000000000000000'), CurrencyAmount.fromRawAmount(NOT, '1000000000000000000'))\nconst NOT_TO_HOT = new Route([HOT_NOT], NOT, HOT)\n\nconst trade = new Trade(NOT_TO_HOT, CurrencyAmount.fromRawAmount(NOT, '1000000000000000'), TradeType.EXACT_INPUT)\n")),(0,a.kt)("h1",{id:"properties"},"Properties"),(0,a.kt)("h2",{id:"route"},"route"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"route: Route\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"route#path"},"path")," property of the route should be passed as the path parameter to router functions."),(0,a.kt)("h2",{id:"tradetype"},"tradeType"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"tradeType: TradeType\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"TradeType.EXACT_INPUT")," corresponds to ",(0,a.kt)("inlineCode",{parentName:"p"},"swapExact*For*")," router functions. ",(0,a.kt)("inlineCode",{parentName:"p"},"TradeType.EXACT_OUTPUT")," corresponds to ",(0,a.kt)("inlineCode",{parentName:"p"},"swap*ForExact*")," router functions."),(0,a.kt)("h2",{id:"inputamount"},"inputAmount"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"inputAmount: CurrencyAmount\n")),(0,a.kt)("p",null,"For exact input trades, this value should be passed as amountIn to router functions. For exact output trades, this value should be multiplied by a factor >1, representing slippage tolerance, and passed as amountInMax to router functions."),(0,a.kt)("h2",{id:"outputamount"},"outputAmount"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"outputAmount: CurrencyAmount\n")),(0,a.kt)("p",null,"For exact output trades, this value should be passed as amountOut to router functions. For exact input trades, this value should be multiplied by a factor <1, representing slippage tolerance, and passed as amountOutMin to router functions."),(0,a.kt)("h2",{id:"executionprice"},"executionPrice"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"executionPrice: Price\n")),(0,a.kt)("p",null,"The average price that the trade would execute at."),(0,a.kt)("h2",{id:"priceimpact"},"priceImpact"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"priceImpact: Percent\n")),(0,a.kt)("p",null,"The percent difference between the mid price before the trade and the trade execution price."),(0,a.kt)("h1",{id:"methods"},"Methods"),(0,a.kt)("p",null,"In the context of the following two methods, slippage refers to the percent difference between the actual price and the trade ",(0,a.kt)("inlineCode",{parentName:"p"},"executionPrice"),"."),(0,a.kt)("h2",{id:"minimumamountout-since-204"},"minimumAmountOut (since 2.0.4)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"minimumAmountOut(slippageTolerance: Percent): CurrencyAmount\n")),(0,a.kt)("p",null,"Returns the minimum amount of the output token that should be received from a trade, given the slippage tolerance."),(0,a.kt)("p",null,"Useful when constructing a transaction for a trade of type ",(0,a.kt)("inlineCode",{parentName:"p"},"EXACT_INPUT"),"."),(0,a.kt)("h2",{id:"maximumamountin-since-204"},"maximumAmountIn (since 2.0.4)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"maximumAmountIn(slippageTolerance: Percent): CurrencyAmount\n")),(0,a.kt)("p",null,"Returns the maximum amount of the input token that should be spent on the trade, given the slippage tolerance."),(0,a.kt)("p",null,"Useful when constructing a transaction for a trade of type ",(0,a.kt)("inlineCode",{parentName:"p"},"EXACT_OUTPUT"),"."),(0,a.kt)("h2",{id:"worstexecutionprice"},"worstExecutionPrice"),(0,a.kt)("p",null,"Return the execution price after accounting for slippage tolerance"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"worstExecutionPrice(slippageTolerance: Percent): Price\n")),(0,a.kt)("h1",{id:"static-methods"},"Static methods"),(0,a.kt)("p",null,"These static methods provide ways to construct ideal trades from lists of pairs.\nNote these methods do not perform any aggregation across routes, as routes are linear.\nIt's possible that a better price can be had by combining multiple trades across\ndifferent routes."),(0,a.kt)("h2",{id:"exactin"},"exactIn"),(0,a.kt)("p",null,"Constructs an exact in trade with the given amount in and route."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Trade.exactIn(route: Route, amountIn: CurrencyAmount): Trade\n")),(0,a.kt)("h2",{id:"exactout"},"exactOut"),(0,a.kt)("p",null,"Constructs an exact out trade with the given amount out and route"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Trade.exactOut(route: Route, amountOut: CurrencyAmount): Trade\n")),(0,a.kt)("h2",{id:"besttradeexactin"},"bestTradeExactIn"),(0,a.kt)("p",null,"Given a list of pairs, and a fixed amount in, returns the top ",(0,a.kt)("inlineCode",{parentName:"p"},"maxNumResults")," trades that go from an input token\namount to an output token, making at most ",(0,a.kt)("inlineCode",{parentName:"p"},"maxHops")," hops.\nNote this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\nthe amount in among multiple routes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Trade.bestTradeExactIn(\n    pairs: Pair[],\n    nextAmountIn: CurrencyAmount,\n    currencyOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {}): Trade[]\n")),(0,a.kt)("h2",{id:"besttradeexactout"},"bestTradeExactOut"),(0,a.kt)("p",null,"Similar to the above method but instead targets a fixed output amount given a list of pairs,\nand a fixed amount out, returns the top ",(0,a.kt)("inlineCode",{parentName:"p"},"maxNumResults")," trades that go from an input token to an output token amount,\nmaking at most ",(0,a.kt)("inlineCode",{parentName:"p"},"maxHops")," hops. Note this does not consider aggregation, as routes are linear.\nIt is possible a better route exists by splitting the amountIn among multiple routes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Trade.bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Token,\n    nextAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {}): Trade[]\n")))}l.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||l[m]||o;return n?r.createElement(f,u(u({ref:t},c),{},{components:n})):r.createElement(f,u({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,u=new Array(o);u[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,u[1]=i;for(var p=2;p<o;p++)u[p]=n[p];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);