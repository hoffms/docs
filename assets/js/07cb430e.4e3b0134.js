"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[3447],{247:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var i=n(3117),o=(n(7294),n(3905));const a={id:"nested-action-flows",sidebar_position:4,title:"Nested Action Flows"},r="Nested Action Flows (`ActionFlow`)",l={unversionedId:"api/Actions/nested-action-flows",id:"api/Actions/nested-action-flows",title:"Nested Action Flows",description:"ActionFlow allows you to create interactive, multi-step experiences, guiding the user through a process that can include different action types, decisions, and conditional logic.",source:"@site/docs/api/Actions/nested-action-flows.md",sourceDirName:"api/Actions",slug:"/api/Actions/nested-action-flows",permalink:"/docs/api/Actions/nested-action-flows",editUrl:"https://github.com/hoffms/docs/tree/main/docs/api/Actions/nested-action-flows.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"nested-action-flows",sidebar_position:4,title:"Nested Action Flows"},sidebar:"apiSidebar",previous:{title:"Transfer Actions",permalink:"/docs/api/Actions/transfer-actions"},next:{title:"HTTP Actions",permalink:"/docs/api/Actions/http-actions"}},c={},s=[{value:"<code>ActionFlow</code> Interface",id:"actionflow-interface",level:2},{value:"Nested Actions (<code>NestedAction</code>)",id:"nested-actions-nestedaction",level:2},{value:"Navigation and Conditions (<code>nextActions</code>)",id:"navigation-and-conditions-nextactions",level:2}],p={toc:s};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nested-action-flows-actionflow"},"Nested Action Flows (",(0,o.kt)("inlineCode",{parentName:"h1"},"ActionFlow"),")"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ActionFlow")," allows you to create interactive, multi-step experiences, guiding the user through a process that can include different action types, decisions, and conditional logic."),(0,o.kt)("h2",{id:"actionflow-interface"},(0,o.kt)("inlineCode",{parentName:"h2"},"ActionFlow")," Interface"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/interface/actions/flowAction.ts\nexport interface ActionFlow {\n  type: 'flow'; // Action type identifier\n  label: string; // Main label for the flow (e.g., \"Advanced Swap\")\n  initialActionId: string; // ID of the first action to execute in the flow\n  actions: NestedAction[]; // Array containing all actions that make up the flow\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"type"),": Always ",(0,o.kt)("inlineCode",{parentName:"li"},"'flow'"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"label"),": General label for the flow."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"initialActionId"),": The ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," of the ",(0,o.kt)("inlineCode",{parentName:"li"},"NestedAction")," within the ",(0,o.kt)("inlineCode",{parentName:"li"},"actions")," array that will start the flow."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"actions"),": An array containing all the individual actions that are part of the flow.")),(0,o.kt)("h2",{id:"nested-actions-nestedaction"},"Nested Actions (",(0,o.kt)("inlineCode",{parentName:"h2"},"NestedAction"),")"),(0,o.kt)("p",null,"Each step within an ",(0,o.kt)("inlineCode",{parentName:"p"},"ActionFlow")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"NestedAction"),". There are several types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/interface/actions/flowAction.ts\n\n// Base for all nested actions\nexport interface NestedActionBase {\n  id: string; // Unique identifier WITHIN the flow\n  label: string; // Label for this specific step\n  nextActions?: NextActionDefinition[]; // Defines which action(s) follow\n}\n\n// Blockchain Action within a flow\nexport interface NestedBlockchainAction\n  extends Omit<BlockchainActionMetadata, 'label' | 'description'>,\n    NestedActionBase {\n  type: 'blockchain';\n}\n\n// Transfer Action within a flow\nexport interface NestedTransferAction extends Omit<TransferAction, 'label'>, NestedActionBase {\n  type: 'transfer';\n}\n\n// HTTP Action within a flow\nexport interface NestedHttpAction extends Omit<HttpAction, 'label'>, NestedActionBase {\n  type: 'http';\n}\n\n// Decision Action (user chooses a path)\nexport interface DecisionAction extends NestedActionBase {\n  type: 'decision';\n  title: string;\n  description?: string;\n  options: {\n    label: string;\n    value: string; // Value associated with the chosen option\n    nextActionId: string; // ID of the next action for this option\n  }[];\n}\n\n// Completion Action (end of a flow path)\nexport interface CompletionAction extends NestedActionBase {\n  type: 'completion';\n  message: string;\n  status: 'success' | 'error' | 'info';\n  // Does not have nextActions\n}\n\n// Union type for any nested action\nexport type NestedAction =\n  | NestedBlockchainAction\n  | NestedTransferAction\n  | NestedHttpAction\n  | CompletionAction\n  | DecisionAction;\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Key Properties of ",(0,o.kt)("inlineCode",{parentName:"strong"},"NestedActionBase"),":")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"id"),": A ",(0,o.kt)("strong",{parentName:"li"},"unique")," identifier for this action ",(0,o.kt)("em",{parentName:"li"},"within the flow"),". Used for navigation (",(0,o.kt)("inlineCode",{parentName:"li"},"initialActionId"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"nextActionId"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"label"),": Specific label for this step of the flow."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nextActions"),": An array defining which action(s) should execute next after this one completes successfully.")),(0,o.kt)("h2",{id:"navigation-and-conditions-nextactions"},"Navigation and Conditions (",(0,o.kt)("inlineCode",{parentName:"h2"},"nextActions"),")"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"nextActions")," property controls the flow."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/interface/actions/flowAction.ts\nexport interface NextActionDefinition {\n  actionId: string; // ID of the next action to execute\n  conditions?: ActionCondition[]; // Optional conditions (all must be met)\n}\n\nexport interface ActionCondition {\n  field: string; // Field in the context to evaluate (e.g., 'lastResult.status', 'userInput.amount')\n  operator: 'eq' | 'ne' | 'gt' | 'lt' | 'gte' | 'lte' | 'contains'; // Comparison operator\n  value: any; // Value to compare against\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If a ",(0,o.kt)("inlineCode",{parentName:"li"},"NestedAction")," (except ",(0,o.kt)("inlineCode",{parentName:"li"},"CompletionAction"),") has a ",(0,o.kt)("inlineCode",{parentName:"li"},"nextActions")," array:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If there's only one ",(0,o.kt)("inlineCode",{parentName:"li"},"NextActionDefinition")," without ",(0,o.kt)("inlineCode",{parentName:"li"},"conditions"),", navigate to that ",(0,o.kt)("inlineCode",{parentName:"li"},"actionId")," upon success."),(0,o.kt)("li",{parentName:"ul"},"If there are multiple ",(0,o.kt)("inlineCode",{parentName:"li"},"NextActionDefinition"),"s, evaluate the ",(0,o.kt)("inlineCode",{parentName:"li"},"conditions")," of each one in order. The first one whose conditions are met determines the next ",(0,o.kt)("inlineCode",{parentName:"li"},"actionId"),"."),(0,o.kt)("li",{parentName:"ul"},"If no conditions are met (and there's no condition-less definition at the end), the flow might end or be considered in an invalid state (depends on the executor implementation)."))),(0,o.kt)("li",{parentName:"ul"},"`")))}d.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=s(n),u=o,m=f["".concat(c,".").concat(u)]||f[u]||d[u]||a;return n?i.createElement(m,r(r({ref:t},p),{},{components:n})):i.createElement(m,r({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<a;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"}}]);