"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[14638],{72896:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=n(83117),r=(n(67294),n(3905));const l={},i="DeltaResolver",p={unversionedId:"contracts/v4/reference/periphery/base/DeltaResolver",id:"contracts/v4/reference/periphery/base/DeltaResolver",title:"DeltaResolver",description:"Git Source - Generated with forge doc",source:"@site/docs/contracts/v4/reference/periphery/base/DeltaResolver.md",sourceDirName:"contracts/v4/reference/periphery/base",slug:"/contracts/v4/reference/periphery/base/DeltaResolver",permalink:"/docs/contracts/v4/reference/periphery/base/DeltaResolver",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v4/reference/periphery/base/DeltaResolver.md",tags:[],version:"current",frontMatter:{},sidebar:"contractsSidebar",previous:{title:"BaseV4Quoter",permalink:"/docs/contracts/v4/reference/periphery/base/BaseV4Quoter"},next:{title:"EIP712_v4",permalink:"/docs/contracts/v4/reference/periphery/base/EIP712_v4"}},o={},u=[{value:"Functions",id:"functions",level:2},{value:"_take",id:"_take",level:3},{value:"_settle",id:"_settle",level:3},{value:"_pay",id:"_pay",level:3},{value:"_getFullDebt",id:"_getfulldebt",level:3},{value:"_getFullCredit",id:"_getfullcredit",level:3},{value:"_mapSettleAmount",id:"_mapsettleamount",level:3},{value:"_mapTakeAmount",id:"_maptakeamount",level:3},{value:"_mapWrapUnwrapAmount",id:"_mapwrapunwrapamount",level:3},{value:"Errors",id:"errors",level:2},{value:"DeltaNotPositive",id:"deltanotpositive",level:3},{value:"DeltaNotNegative",id:"deltanotnegative",level:3},{value:"InsufficientBalance",id:"insufficientbalance",level:3}],m={toc:u};function d(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deltaresolver"},"DeltaResolver"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/uniswap/v4-periphery/blob/ea2bf2e1ba6863bb809fc2ff791744f308c4a26d/src/base/DeltaResolver.sol"},"Git Source")," - Generated with ",(0,r.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/reference/forge/forge-doc"},"forge doc")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Inherits:"),"\n",(0,r.kt)("a",{parentName:"p",href:"/docs/contracts/v4/reference/periphery/base/ImmutableState"},"ImmutableState")),(0,r.kt)("p",null,"Abstract contract used to sync, send, and settle funds to the pool manager"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note that sync() is called before any erc-20 transfer in ",(0,r.kt)("inlineCode",{parentName:"em"},"settle"),".")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"_take"},"_take"),(0,r.kt)("p",null,"Take an amount of currency out of the PoolManager"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Returns early if the amount is 0")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _take(Currency currency, address recipient, uint256 amount) internal;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"currency")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Currency")),(0,r.kt)("td",{parentName:"tr",align:null},"Currency to take")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"recipient")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address to receive the currency")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount to take")))),(0,r.kt)("h3",{id:"_settle"},"_settle"),(0,r.kt)("p",null,"Pay and settle a currency to the PoolManager"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"The implementing contract must ensure that the ",(0,r.kt)("inlineCode",{parentName:"em"},"payer")," is a secure address")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Returns early if the amount is 0")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _settle(Currency currency, address payer, uint256 amount) internal;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"currency")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Currency")),(0,r.kt)("td",{parentName:"tr",align:null},"Currency to settle")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"payer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the payer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount to send")))),(0,r.kt)("h3",{id:"_pay"},"_pay"),(0,r.kt)("p",null,"Abstract function for contracts to implement paying tokens to the poolManager"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"The recipient of the payment should be the poolManager")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _pay(Currency token, address payer, uint256 amount) internal virtual;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"token")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Currency")),(0,r.kt)("td",{parentName:"tr",align:null},"The token to settle. This is known not to be the native currency")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"payer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"address")),(0,r.kt)("td",{parentName:"tr",align:null},"The address who should pay tokens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The number of tokens to send")))),(0,r.kt)("h3",{id:"_getfulldebt"},"_getFullDebt"),(0,r.kt)("p",null,"Obtain the full amount owed by this contract (negative delta)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _getFullDebt(Currency currency) internal view returns (uint256 amount);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"currency")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Currency")),(0,r.kt)("td",{parentName:"tr",align:null},"Currency to get the delta for")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The amount owed by this contract as a uint256")))),(0,r.kt)("h3",{id:"_getfullcredit"},"_getFullCredit"),(0,r.kt)("p",null,"Obtain the full credit owed to this contract (positive delta)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _getFullCredit(Currency currency) internal view returns (uint256 amount);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"currency")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Currency")),(0,r.kt)("td",{parentName:"tr",align:null},"Currency to get the delta for")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The amount owed to this contract as a uint256")))),(0,r.kt)("h3",{id:"_mapsettleamount"},"_mapSettleAmount"),(0,r.kt)("p",null,"Calculates the amount for a settle action"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _mapSettleAmount(uint256 amount, Currency currency) internal view returns (uint256);\n")),(0,r.kt)("h3",{id:"_maptakeamount"},"_mapTakeAmount"),(0,r.kt)("p",null,"Calculates the amount for a take action"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _mapTakeAmount(uint256 amount, Currency currency) internal view returns (uint256);\n")),(0,r.kt)("h3",{id:"_mapwrapunwrapamount"},"_mapWrapUnwrapAmount"),(0,r.kt)("p",null,"Calculates the sanitized amount before wrapping/unwrapping."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function _mapWrapUnwrapAmount(Currency inputCurrency, uint256 amount, Currency outputCurrency)\n    internal\n    view\n    returns (uint256);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"inputCurrency")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Currency")),(0,r.kt)("td",{parentName:"tr",align:null},"The currency, either native or wrapped native, that this contract holds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"uint256")),(0,r.kt)("td",{parentName:"tr",align:null},"The amount to wrap or unwrap. Can be CONTRACT_BALANCE, OPEN_DELTA or a specific amount")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"outputCurrency")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Currency")),(0,r.kt)("td",{parentName:"tr",align:null},"The currency after the wrap/unwrap that the user may owe a balance in on the poolManager")))),(0,r.kt)("h2",{id:"errors"},"Errors"),(0,r.kt)("h3",{id:"deltanotpositive"},"DeltaNotPositive"),(0,r.kt)("p",null,"Emitted trying to settle a positive delta."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"error DeltaNotPositive(Currency currency);\n")),(0,r.kt)("h3",{id:"deltanotnegative"},"DeltaNotNegative"),(0,r.kt)("p",null,"Emitted trying to take a negative delta."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"error DeltaNotNegative(Currency currency);\n")),(0,r.kt)("h3",{id:"insufficientbalance"},"InsufficientBalance"),(0,r.kt)("p",null,"Emitted when the contract does not have enough balance to wrap or unwrap."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"error InsufficientBalance();\n")))}d.isMDXComponent=!0},3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>k});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),u=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=u(t.components);return a.createElement(o.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,m=p(t,["components","mdxType","originalType","parentName"]),c=u(n),k=r,s=c["".concat(o,".").concat(k)]||c[k]||d[k]||l;return n?a.createElement(s,i(i({ref:e},m),{},{components:n})):a.createElement(s,i({ref:e},m))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=c;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p.mdxType="string"==typeof t?t:r,i[1]=p;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);