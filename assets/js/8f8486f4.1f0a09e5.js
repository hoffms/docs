"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[15726],{16860:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=n(83117),i=(n(67294),n(3905));const o={id:"connectors",title:"Supported Connectors"},r=void 0,c={unversionedId:"sdk/web3-react/guides/connectors",id:"sdk/web3-react/guides/connectors",title:"Supported Connectors",description:"Introduction",source:"@site/docs/sdk/web3-react/guides/02-connectors.md",sourceDirName:"sdk/web3-react/guides",slug:"/sdk/web3-react/guides/connectors",permalink:"/docs/sdk/web3-react/guides/connectors",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/sdk/web3-react/guides/02-connectors.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"connectors",title:"Supported Connectors"},sidebar:"sdkSidebar",previous:{title:"Connecting to Wallets",permalink:"/docs/sdk/web3-react/guides/connect-wallet"},next:{title:"Switching Chains",permalink:"/docs/sdk/web3-react/guides/switch-chains"}},l={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Building a Coinbase Wallet connector",id:"building-a-coinbase-wallet-connector",level:2},{value:"Building a WalletConnect Wallet connector",id:"building-a-walletconnect-wallet-connector",level:2},{value:"Building a Network connector",id:"building-a-network-connector",level:2},{value:"Building a Gnosis Safe connector",id:"building-a-gnosis-safe-connector",level:2},{value:"Next steps",id:"next-steps",level:2}],p={toc:s};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"This guide will cover how to connect our dApp to all the different connectors that ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," supports. It is based on the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/tree/main/web3-react"},(0,i.kt)("inlineCode",{parentName:"a"},"web3-react")," example"),", found in the Uniswap code examples ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples"},"repository"),". To run this example, check out the examples's ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/main/web3-react/README.md"},"README")," and follow the setup instructions."),(0,i.kt)("p",null,"In this example we will cover connecting our dApp to the following connectors:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Coinbase wallet"),(0,i.kt)("li",{parentName:"ul"},"WalletConnect wallet"),(0,i.kt)("li",{parentName:"ul"},"Network"),(0,i.kt)("li",{parentName:"ul"},"Gnosis safe")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For help on setting up ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," and interacting with a MetaMask wallet, please visit our ",(0,i.kt)("a",{parentName:"p",href:"/docs/sdk/web3-react/guides/connect-wallet"},"connecting to wallets")," page!"))),(0,i.kt)("p",null,"The input parameters to this guide are the chains that we want our dApp to be able to connect to and their RPC URLs."),(0,i.kt)("p",null,"The guide will ",(0,i.kt)("strong",{parentName:"p"},"cover"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Building a Coinbase Wallet connector"),(0,i.kt)("li",{parentName:"ol"},"Building a WalletConnect Wallet connector"),(0,i.kt)("li",{parentName:"ol"},"Building a Network connector"),(0,i.kt)("li",{parentName:"ol"},"Building a Gnosis Safe connector")),(0,i.kt)("p",null,"At the end of the guide, we should be able to connect and disconnect the application to the different connectors listed above."),(0,i.kt)("p",null,"For this guide, the following ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," packages are used:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@web3-react/core"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/core"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@web3-react/types"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/types"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@web3-react/coinbase-wallet"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/coinbase-wallet"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@web3-react/walletconnect"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/walletconnect"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@web3-react/network"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/network"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@web3-react/gnosis-safe"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/gnosis-safe")))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This guide uses ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," version 8, which is a beta version."))),(0,i.kt)("p",null,"The core code of this guide can be found in the top level of our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/tree/main/web3-react"},"examples repository"),", under each connectors' name. For example, the code for the Coinbase Wallet connector can be found in the the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/main/web3-react/src/libs/coinbase.ts"},"coinbase file"),"."),(0,i.kt)("h2",{id:"building-a-coinbase-wallet-connector"},"Building a Coinbase Wallet connector"),(0,i.kt)("p",null,"The second connector in the list of prioritized connectors that ",(0,i.kt)("a",{parentName:"p",href:"/docs/sdk/web3-react/guides/connect-wallet/#building-an-injected-connector"},"we provided")," as a parameter to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/feat/web3-react/web3-react/src/libs/components/Web3ContextProvider.tsx"},(0,i.kt)("inlineCode",{parentName:"a"},"Web3ReactProvider"))," is the ",(0,i.kt)("em",{parentName:"p"},"Coinbase Wallet")," connector:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Creating the prioritized Connectors list" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Creating',the:!0,prioritized:!0,Connectors:!0,'list"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/connections.ts#L33-L39\n")),(0,i.kt)("p",null,"To connect to a ",(0,i.kt)("em",{parentName:"p"},"Coinbase Wallet")," connector, we first need to install ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@web3-react/coinbase-wallet"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/coinbase-wallet")),", as well as ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/coinbase/coinbase-wallet-sdk"},(0,i.kt)("inlineCode",{parentName:"a"},"@coinbase/wallet-sdk")),". Having installed the packages, we can import the ",(0,i.kt)("inlineCode",{parentName:"p"},"CoinbaseWallet")," class from ",(0,i.kt)("inlineCode",{parentName:"p"},"@web3-react/coinbase-wallet"),", as well as the ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeConnector")," function from the ",(0,i.kt)("inlineCode",{parentName:"p"},"@web3-react/core")," package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Importing the Coinbase Wallet connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Importing',the:!0,Coinbase:!0,Wallet:!0,'connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/coinbase.ts#L1-L2\n")),(0,i.kt)("p",null,"We can now build our connector, supplying the required arguments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Initializing the Coinbase Wallet Connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Initializing',the:!0,Coinbase:!0,Wallet:!0,'Connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/coinbase.ts#L8-L19\n")),(0,i.kt)("p",null,"We pass ",(0,i.kt)("inlineCode",{parentName:"p"},"CoinbaseWallet")," as the type argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeConnector"),"'s templated parameter. Similar to the case of the ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectedConnector"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"CoinbaseWallet")," class is a class that extends the ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractConnector")," class, which is part of the ",(0,i.kt)("inlineCode",{parentName:"p"},"@web3-react/core")," package. The parameter provided to ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeConnector")," is a function that receives an ",(0,i.kt)("inlineCode",{parentName:"p"},"actions")," object, and expects an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"CoinbaseWallet")," (to match the type argument) to be returned."),(0,i.kt)("p",null,"We build the new ",(0,i.kt)("inlineCode",{parentName:"p"},"CoinbaseWallet")," instance by passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"actions")," object, an ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," object, and  an ",(0,i.kt)("inlineCode",{parentName:"p"},"onError")," callback. ",(0,i.kt)("inlineCode",{parentName:"p"},"onError")," handles errors that occur during interaction with the connector, and ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," is used to configure the connector. In our case, we pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"url"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"appName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"reloadOnDisconnect")," options: ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," is the ",(0,i.kt)("em",{parentName:"p"},"RPC URL")," to connect to that was provided as an argument to the example application, ",(0,i.kt)("inlineCode",{parentName:"p"},"appName")," is the name of our application, and ",(0,i.kt)("inlineCode",{parentName:"p"},"reloadOnDisconnect")," is a ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," that indicates whether the application should reload when the user disconnects from the wallet."),(0,i.kt)("p",null,"After building the connector, we use its two return types, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Connector")," and it's respective hooks, and build a ",(0,i.kt)("inlineCode",{parentName:"p"},"Connection")," object by setting the connection's type as the Coinbase wallet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Building the Coinbase Wallet Connection" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Building',the:!0,Coinbase:!0,Wallet:!0,'Connection"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/coinbase.ts#L20-L24\n")),(0,i.kt)("p",null,"Having built the connector, all that remains is to build the user interface and supply it to our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/feat/web3-react/web3-react/src/libs/components/ConnectionOptions.tsx"},(0,i.kt)("inlineCode",{parentName:"a"},"ConnectionOptions"))," component, just as we did with the ",(0,i.kt)("inlineCode",{parentName:"p"},"InjectedConnector"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Building the Coinbase Wallet component" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Building',the:!0,Coinbase:!0,Wallet:!0,'component"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/81ec93e97b0afded621e177fe5f34fc9f98f80b0/web3-react/src/libs/components/ConnectionOptions.tsx#L39-L46\n")),(0,i.kt)("h2",{id:"building-a-walletconnect-wallet-connector"},"Building a WalletConnect Wallet connector"),(0,i.kt)("p",null,"The third connector in the list of prioritized connectors that we provided to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/feat/web3-react/web3-react/src/libs/components/Web3ContextProvider.tsx"},(0,i.kt)("inlineCode",{parentName:"a"},"Web3ReactProvider"))," is the WalletConnect Wallet connector."),(0,i.kt)("p",null,"To connect to a WalletConnect Wallet connector, we first need to install ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@web3-react/walletconnect"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/walletconnect")),", as well as ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@walletconnect/ethereum-provider"},(0,i.kt)("inlineCode",{parentName:"a"},"@walletconnect/ethereum-provider")),". Having installed the packages, we can import the ",(0,i.kt)("inlineCode",{parentName:"p"},"WalletConnect")," class from ",(0,i.kt)("inlineCode",{parentName:"p"},"@web3-react/walletconnect"),", as well as the ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeConnector")," function from",(0,i.kt)("inlineCode",{parentName:"p"},"@web3-react/core")," package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Importing the WalletConnect Wallet Connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Importing',the:!0,WalletConnect:!0,Wallet:!0,'Connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/wallet-connect.ts#L1-L2\n")),(0,i.kt)("p",null,"We can now build our connector, supplying the required arguments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Initializing the WalletConnect Wallet Connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Initializing',the:!0,WalletConnect:!0,Wallet:!0,'Connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/wallet-connect.ts#L8-L17\n")),(0,i.kt)("p",null,"The main difference from the Coinbase Wallet connector lies in the arguments that the ",(0,i.kt)("inlineCode",{parentName:"p"},"WalletConnect")," class requires to be instantiated. ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," knows about this difference, as we passed the type argument ",(0,i.kt)("inlineCode",{parentName:"p"},"WalletConnect")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeConnector"),", thus specializing the type of ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractConnector"),". In this case, the class receives three arguments, including ",(0,i.kt)("inlineCode",{parentName:"p"},"actions")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"onError"),", identical to those supplied in the Coinbase Wallet connector case. "),(0,i.kt)("p",null,"The difference lies in the second argument, which is an ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," object. In this case, we are passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"rpc")," parameter, which is an object that maps the chain ID to the RPC URL to connect to. We have already created this ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/constants.ts#L11"},"map")," in our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/feat/web3-react/web3-react/src/libs/constants.ts"},(0,i.kt)("inlineCode",{parentName:"a"},"constants"))," file using our example's parameters. The other option that we are passing is the ",(0,i.kt)("inlineCode",{parentName:"p"},"qrcode"),", which is a ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," that indicates whether the QR code should be displayed in the browser. In our case, we are passing ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," as we want to show the QR code."),(0,i.kt)("p",null,"Having built the connector, we just need to build the user interface to enable user interaction with the connector, and supply it to our ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionOptions"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Building the WalletConnect Wallet component" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Building',the:!0,WalletConnect:!0,Wallet:!0,'component"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/81ec93e97b0afded621e177fe5f34fc9f98f80b0/web3-react/src/libs/components/ConnectionOptions.tsx#L49-L56\n")),(0,i.kt)("h2",{id:"building-a-network-connector"},"Building a Network connector"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"Network connector"),", alongside the ",(0,i.kt)("em",{parentName:"p"},"Gnosis Safe connector"),", are two of the connectors that we do not surface through our user interface, but instead we connect to them programmatically. In contrast to the previous ",(0,i.kt)("em",{parentName:"p"},"Connectors"),", these do not come with any pre-built user interface for the user to interact with. We attempt to connect to them ",(0,i.kt)("strong",{parentName:"p"},"eagerly")," in our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/feat/web3-react/web3-react/src/libs/components/Web3ContextProvider.tsx"},(0,i.kt)("inlineCode",{parentName:"a"},"Web3ContextProvider"))," component through a hook:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Hook to connect eagerly" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Hook',to:!0,connect:!0,'eagerly"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/81ec93e97b0afded621e177fe5f34fc9f98f80b0/web3-react/src/libs/components/Web3ContextProvider.tsx#L9-L13\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"useEagerlyConnect")," hook is called in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Web3ContextProvider")," component and attempts to connect to the Network Connector and the Gnosis Safe Connector. The hook is named ",(0,i.kt)("strong",{parentName:"p"},"eagerly")," as it is called in the component's body as ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-effect.html"},"React effect")," when the component is first rendered. In the hook implementation we attempt to call ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"connectEagerly")," function if it exists on the connector, otherwise we call ",(0,i.kt)("inlineCode",{parentName:"p"},"activate")," otherwise. The ",(0,i.kt)("inlineCode",{parentName:"p"},"connectEagerly")," function attempts to connect our application to the connector, and ",(0,i.kt)("strong",{parentName:"p"},"fails silently")," if it does not succeed: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Connecting eagerly" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Connecting','eagerly"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/hooks.ts#L15-L19\n")),(0,i.kt)("p",null,"Before eagerly connecting, we first need to initialize the connectors. We start by building the Network connector, and we first need to install ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@web3-react/network"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/network")),", and import the ",(0,i.kt)("inlineCode",{parentName:"p"},"Network")," class from it. Note how this Connect does not require any package besides its ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," package to function. We also need to import the ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeConnector")," function from ",(0,i.kt)("inlineCode",{parentName:"p"},"@web3-react/core"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Importing the Network Connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Importing',the:!0,Network:!0,'Connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/network.ts#L1-L2\n")),(0,i.kt)("p",null,"We can now build our connector, supplying the required arguments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Initializing the Network Connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Initializing',the:!0,Network:!0,'Connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/network.ts#L8-L15\n")),(0,i.kt)("p",null,"The main difference from the other connectors lies in the arguments that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Network")," class requires to be instantiated. ",(0,i.kt)("inlineCode",{parentName:"p"},"web3-react")," knows about this difference, as we passed the type argument ",(0,i.kt)("inlineCode",{parentName:"p"},"Network")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeConnector"),", thus specializing the type of ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractConnector"),". In this case, the class receives ",(0,i.kt)("inlineCode",{parentName:"p"},"actions"),", which is identical to that supplied in the rest of the connectors; ",(0,i.kt)("inlineCode",{parentName:"p"},"urlMap"),", which is an object that maps the chain ID to the RPC URL to connect to, which we have already created in our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/examples/blob/feat/web3-react/web3-react/src/libs/constants.ts"},(0,i.kt)("inlineCode",{parentName:"a"},"constants"))," file; and ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultChainId")," which is the chain ID to connect to by default."),(0,i.kt)("p",null,"After building, the connector, we can create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Connection")," instance by supplying it the return value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeConnector")," function, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Network")," class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Creating a Network connection" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Creating',a:!0,Network:!0,'connection"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/network.ts#L16-L20\n")),(0,i.kt)("p",null,"All that remains is to return the constructed ",(0,i.kt)("inlineCode",{parentName:"p"},"Connection")," instance."),(0,i.kt)("h2",{id:"building-a-gnosis-safe-connector"},"Building a Gnosis Safe connector"),(0,i.kt)("p",null,"Similar to the Network connector, we build the Gnosis Safe connector. We start by first installing ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@web3-react/gnosis-safe"},(0,i.kt)("inlineCode",{parentName:"a"},"@web3-react/gnosis-safe")),", and import the ",(0,i.kt)("inlineCode",{parentName:"p"},"GnosisSafe")," class from it. We also need to import the ",(0,i.kt)("inlineCode",{parentName:"p"},"initializeConnector")," function from ",(0,i.kt)("inlineCode",{parentName:"p"},"@web3-react/core"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Importing the Gnosis Safe connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Importing',the:!0,Gnosis:!0,Safe:!0,'connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/gnosis.tsx#L1-L2\n")),(0,i.kt)("p",null,"The Gnosis Safe connector is the simplest of them all, as it does not require any additional parameterization other than ",(0,i.kt)("inlineCode",{parentName:"p"},"actions"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Initializing a Gnosis Safe Connector" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Initializing',a:!0,Gnosis:!0,Safe:!0,'Connector"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/gnosis.tsx#L6-L9\n")),(0,i.kt)("p",null,"Having initialized the connector, we can now build the ",(0,i.kt)("inlineCode",{parentName:"p"},"Connection")," instance and return it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'reference title="Creating a Gnosis Safe Connection" referenceLinkText="View on GitHub" customStyling',reference:!0,title:'"Creating',a:!0,Gnosis:!0,Safe:!0,'Connection"':!0,referenceLinkText:'"View',on:!0,'GitHub"':!0,customStyling:!0},"https://github.com/Uniswap/examples/blob/8c0e36ca8d2ba4718af944094191f39da62a9c5c/web3-react/src/libs/gnosis.tsx#L10-L14\n")),(0,i.kt)("h2",{id:"next-steps"},"Next steps"),(0,i.kt)("p",null,"Now that we have gone through building all of the different types of supported connectors, we will learn how to ",(0,i.kt)("a",{parentName:"p",href:"/docs/sdk/web3-react/guides/switch-chains"},"switch chains"),"."))}m.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),u=i,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,r[1]=c;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);