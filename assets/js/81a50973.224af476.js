"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[656],{29533:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(83117),i=(n(67294),n(3905));const a={title:"v4 vs v3"},o=void 0,s={unversionedId:"contracts/v4/concepts/v4-vs-v3",id:"contracts/v4/concepts/v4-vs-v3",title:"v4 vs v3",description:"While Uniswap v4's underlying concentrated liquidity is the same as Uniswap v3,",source:"@site/docs/contracts/v4/concepts/01-v4-vs-v3.mdx",sourceDirName:"contracts/v4/concepts",slug:"/contracts/v4/concepts/v4-vs-v3",permalink:"/docs/contracts/v4/concepts/v4-vs-v3",editUrl:"https://github.com/hoffms/docs/tree/main/docs/contracts/v4/concepts/01-v4-vs-v3.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"v4 vs v3"},sidebar:"contractsSidebar",previous:{title:"Deployments",permalink:"/docs/contracts/v4/deployments"},next:{title:"Flash Accounting",permalink:"/docs/contracts/v4/concepts/flash-accounting"}},c={},l=[{value:"Pool Creation",id:"pool-creation",level:3},{value:"Flash Accounting",id:"flash-accounting",level:3}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"While Uniswap v4's underlying concentrated liquidity is the same as Uniswap v3,\nthere are some key differences in the architecture and accounting."),(0,i.kt)("h1",{id:"singleton-design"},"Singleton Design"),(0,i.kt)("h3",{id:"pool-creation"},"Pool Creation"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"v4"),": The singleton contract facilitates the creation of a pool and\nalso stores its state. This pattern reduces costs when creating a pool\nand doing multi-hop swaps. Because pools are ",(0,i.kt)("em",{parentName:"p"},"contract state")," and not entirely new ",(0,i.kt)("em",{parentName:"p"},"contracts")," themselves, pool creation is significantly cheaper."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"v3"),": A factory contract is responsible for pool creation. The pool is\na separate contract instance that manages its own state. Pool initialization\nis costly because contract creation is gas-intensive"),(0,i.kt)("h3",{id:"flash-accounting"},"Flash Accounting"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"v4"),": The singleton uses ",(0,i.kt)("em",{parentName:"p"},"flash accounting"),", meaning a caller that unlocks the PoolManager\nis allowed to cause balance-changing operations (multiple swaps, multiple liquidity modifications, etc)\nand only needs to perform token transfers at the very end of the sequence."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"v3"),": Because flash accounting is missing from v3, it is the responsibility\nof the integrating contract to perform token transfers, after each individual call, to each individual pool contract"),(0,i.kt)("h1",{id:"liquidity-fee-accounting"},"Liquidity Fee Accounting"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"v4"),": Accrued fees act like a credit when modifying liquidity.\nIncreasing liquidity will convert the fee revenue to liquidity\ninside the position while decreasing liquidity will automatically\nrequire the withdrawal of unclaimed fee revenue."),(0,i.kt)("p",null,"An additional parameter ",(0,i.kt)("em",{parentName:"p"},"salt")," can be provided when creating liquidity. The\n",(0,i.kt)("em",{parentName:"p"},"salt")," is used to distinguish positions of the same range on the same pool.\nThis separation may be preferred to simplify fee accounting. If two users share the same\nrange and state in ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolManager"),", integrating contracts must be careful in managing\nfees"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"v3"),": Liquidity positions of the same range and pool will share the same state. While believed to\nbe more gas efficient at the time, integrating contracts will need to handle fee management since\nthe state is shared on the core pool contract"),(0,i.kt)("h1",{id:"native-eth"},"Native ETH"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"v4"),": Pool pairs support native tokens, in doing so ETH swappers and\nliquidity providers benefit from gas cost reductions from cheaper\ntransfers and removal of additional wrapping costs."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"v3"),": ETH needs to be wrapped first before being paired with other tokens.\nThis results in higher gas costs because of wrapping and transferring\na wrapped native token."),(0,i.kt)("h1",{id:"subscribers"},"Subscribers"),(0,i.kt)("p",null,"Only v4: Owners can now set a subscriber for their positions.\nA subscriber contract will get notified every time the position's liquidity\nor owner changes. Subscribers enable staking / liquidity-mining, but users do not need\nto transfer their ERC-721 token."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"v3"),": Staking in v3 requires users to transfer their ERC-721 token to a contract, putting the underlying assets at risk for malicious behavior."))}u.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=i,v=d["".concat(c,".").concat(f)]||d[f]||u[f]||a;return n?r.createElement(v,o(o({ref:t},p),{},{components:n})):r.createElement(v,o({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);