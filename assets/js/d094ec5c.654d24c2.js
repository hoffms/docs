"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[90332],{16653:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>k,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var n=r(83117),a=(r(67294),r(3905));const i={},l="TickMath",c={unversionedId:"contracts/v4/reference/core/libraries/TickMath",id:"contracts/v4/reference/core/libraries/TickMath",title:"TickMath",description:"Git Source - Generated with forge doc",source:"@site/docs/contracts/v4/reference/core/libraries/TickMath.md",sourceDirName:"contracts/v4/reference/core/libraries",slug:"/contracts/v4/reference/core/libraries/TickMath",permalink:"/docs/contracts/v4/reference/core/libraries/TickMath",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/docs/contracts/v4/reference/core/libraries/TickMath.md",tags:[],version:"current",frontMatter:{},sidebar:"contractsSidebar",previous:{title:"TickBitmap",permalink:"/docs/contracts/v4/reference/core/libraries/TickBitmap"},next:{title:"TransientStateLibrary",permalink:"/docs/contracts/v4/reference/core/libraries/TransientStateLibrary"}},p={},o=[{value:"State Variables",id:"state-variables",level:2},{value:"MIN_TICK",id:"min_tick",level:3},{value:"MAX_TICK",id:"max_tick",level:3},{value:"MIN_TICK_SPACING",id:"min_tick_spacing",level:3},{value:"MAX_TICK_SPACING",id:"max_tick_spacing",level:3},{value:"MIN_SQRT_PRICE",id:"min_sqrt_price",level:3},{value:"MAX_SQRT_PRICE",id:"max_sqrt_price",level:3},{value:"MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE",id:"max_sqrt_price_minus_min_sqrt_price_minus_one",level:3},{value:"Functions",id:"functions",level:2},{value:"maxUsableTick",id:"maxusabletick",level:3},{value:"minUsableTick",id:"minusabletick",level:3},{value:"getSqrtPriceAtTick",id:"getsqrtpriceattick",level:3},{value:"getTickAtSqrtPrice",id:"gettickatsqrtprice",level:3},{value:"Errors",id:"errors",level:2},{value:"InvalidTick",id:"invalidtick",level:3},{value:"InvalidSqrtPrice",id:"invalidsqrtprice",level:3}],s={toc:o};function k(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tickmath"},"TickMath"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/uniswap/v4-core/blob/80311e34080fee64b6fc6c916e9a51a437d0e482/src/libraries/TickMath.sol"},"Git Source")," - Generated with ",(0,a.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/reference/forge/forge-doc"},"forge doc")),(0,a.kt)("p",null,"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\nprices between 2",(0,a.kt)("strong",{parentName:"p"},"-128 and 2"),"128"),(0,a.kt)("h2",{id:"state-variables"},"State Variables"),(0,a.kt)("h3",{id:"min_tick"},"MIN_TICK"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"The minimum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**-128")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"int24 internal constant MIN_TICK = -887272;\n")),(0,a.kt)("h3",{id:"max_tick"},"MAX_TICK"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"The maximum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**128")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"int24 internal constant MAX_TICK = 887272;\n")),(0,a.kt)("h3",{id:"min_tick_spacing"},"MIN_TICK_SPACING"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"The minimum tick spacing value drawn from the range of type int16 that is greater than 0, i.e. min from the range ","[1, 32767]")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"int24 internal constant MIN_TICK_SPACING = 1;\n")),(0,a.kt)("h3",{id:"max_tick_spacing"},"MAX_TICK_SPACING"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"The maximum tick spacing value drawn from the range of type int16, i.e. max from the range ","[1, 32767]")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"int24 internal constant MAX_TICK_SPACING = type(int16).max;\n")),(0,a.kt)("h3",{id:"min_sqrt_price"},"MIN_SQRT_PRICE"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"The minimum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MIN_TICK)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"uint160 internal constant MIN_SQRT_PRICE = 4295128739;\n")),(0,a.kt)("h3",{id:"max_sqrt_price"},"MAX_SQRT_PRICE"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"The maximum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MAX_TICK)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"uint160 internal constant MAX_SQRT_PRICE = 1461446703485210103287273052203988822378723970342;\n")),(0,a.kt)("h3",{id:"max_sqrt_price_minus_min_sqrt_price_minus_one"},"MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"A threshold used for optimized bounds check, equals ",(0,a.kt)("inlineCode",{parentName:"em"},"MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"uint160 internal constant MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE =\n    1461446703485210103287273052203988822378723970342 - 4295128739 - 1;\n")),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"maxusabletick"},"maxUsableTick"),(0,a.kt)("p",null,"Given a tickSpacing, compute the maximum usable tick"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function maxUsableTick(int24 tickSpacing) internal pure returns (int24);\n")),(0,a.kt)("h3",{id:"minusabletick"},"minUsableTick"),(0,a.kt)("p",null,"Given a tickSpacing, compute the minimum usable tick"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function minUsableTick(int24 tickSpacing) internal pure returns (int24);\n")),(0,a.kt)("h3",{id:"getsqrtpriceattick"},"getSqrtPriceAtTick"),(0,a.kt)("p",null,"Calculates sqrt(1.0001^tick) * 2^96"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Throws if |tick| > max tick")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function getSqrtPriceAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"tick")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"int24")),(0,a.kt)("td",{parentName:"tr",align:null},"The input tick for the above formula")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"sqrtPriceX96")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint160")),(0,a.kt)("td",{parentName:"tr",align:null},"A Fixed point Q64.96 number representing the sqrt of the price of the two assets (currency1/currency0) at the given tick")))),(0,a.kt)("h3",{id:"gettickatsqrtprice"},"getTickAtSqrtPrice"),(0,a.kt)("p",null,"Calculates the greatest tick value such that getSqrtPriceAtTick(tick) <= sqrtPriceX96"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Throws in case sqrtPriceX96 < MIN_SQRT_PRICE, as MIN_SQRT_PRICE is the lowest value getSqrtPriceAtTick may\never return.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function getTickAtSqrtPrice(uint160 sqrtPriceX96) internal pure returns (int24 tick);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"sqrtPriceX96")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"uint160")),(0,a.kt)("td",{parentName:"tr",align:null},"The sqrt price for which to compute the tick as a Q64.96")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"tick")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"int24")),(0,a.kt)("td",{parentName:"tr",align:null},"The greatest tick for which the getSqrtPriceAtTick(tick) is less than or equal to the input sqrtPriceX96")))),(0,a.kt)("h2",{id:"errors"},"Errors"),(0,a.kt)("h3",{id:"invalidtick"},"InvalidTick"),(0,a.kt)("p",null,"Thrown when the tick passed to #getSqrtPriceAtTick is not between MIN_TICK and MAX_TICK"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"error InvalidTick(int24 tick);\n")),(0,a.kt)("h3",{id:"invalidsqrtprice"},"InvalidSqrtPrice"),(0,a.kt)("p",null,"Thrown when the price passed to #getTickAtSqrtPrice does not correspond to a price between MIN_TICK and MAX_TICK"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"error InvalidSqrtPrice(uint160 sqrtPriceX96);\n")))}k.isMDXComponent=!0},3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),o=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=o(r),m=a,d=u["".concat(p,".").concat(m)]||u[m]||k[m]||i;return r?n.createElement(d,l(l({ref:t},s),{},{components:r})):n.createElement(d,l({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var o=2;o<i;o++)l[o]=r[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);