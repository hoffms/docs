"use strict";(self.webpackChunk_uniswap_docs=self.webpackChunk_uniswap_docs||[]).push([[6346],{6402:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=n(3117),r=(n(7294),n(3905));const s={},i="Quick Start",o={unversionedId:"sdk/trigger-sdk/quickstart",id:"sdk/trigger-sdk/quickstart",title:"Quick Start",description:"First Steps! \ud83d\ude80",source:"@site/docs/sdk/trigger-sdk/quickstart.md",sourceDirName:"sdk/trigger-sdk",slug:"/sdk/trigger-sdk/quickstart",permalink:"/docs/sdk/trigger-sdk/quickstart",editUrl:"https://github.com/hoffms/docs/tree/main/docs/sdk/trigger-sdk/quickstart.md",tags:[],version:"current",frontMatter:{},sidebar:"sdkSidebar",previous:{title:"Advanced Examples",permalink:"/docs/sdk/trigger-sdk/examples/advanced-examples"}},c={},l=[{value:"First Steps! \ud83d\ude80",id:"first-steps-",level:2},{value:"Basic Mini-App",id:"basic-mini-app",level:2},{value:"Completion states",id:"completion-states",level:2},{value:"Add to Metadata",id:"add-to-metadata",level:2}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quick-start"},"Quick Start"),(0,r.kt)("h2",{id:"first-steps-"},"First Steps! \ud83d\ude80"),(0,r.kt)("p",null,"This section will help you get up and running with the Sherry SDK in minutes.",(0,r.kt)("br",{parentName:"p"}),"\n","You\u2019ll learn how to install the SDK, create your first mini-app, and validate your setup to start building interactive Web3 experiences inside social media posts."),(0,r.kt)("h2",{id:"basic-mini-app"},"Basic Mini-App"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createMetadata, Metadata } from '@sherrylinks/sdk';\n\n// Create a simple token transfer metadata\nconst metadata: Metadata = {\n  url: 'https://myapp.example',\n  icon: 'https://example.com/icon.png',\n  title: 'Send AVAX',\n  description: 'Quick AVAX transfer',\n  actions: [\n    {\n      label: 'Send 0.1 AVAX',\n      description: 'Transfer 0.1 AVAX to recipient',\n      to: '0x1234567890123456789012345678901234567890',\n      amount: 0.1,\n      chains: { source: 'avalanche' },\n    },\n  ],\n};\n\n// Validate and process metadata\nconst validatedMetadata = createMetadata(metadata);\n\n import { createMetadata, Metadata, ActionFlow } from '@sherrylinks/sdk';\n// Create a flow with multiple steps and decision points\n const swapFlow: ActionFlow = {\n type: 'flow',\n label: 'Token Swap',\n initialActionId: 'select-tokens',\n actions: [\n   // Step 1: Select tokens and amount\n {\n id: 'select-tokens',\n type: 'http',\n label: 'Select Tokens',\n path: 'https://api.example.com/quote',\n params: [\n // Token selection parameters...\n ],\n nextActions: [{ actionId: 'review-quote' }],\n },\n// Step 2: Review and decide\n{\n  id: 'review-quote',\n  type: 'decision',\n  label: 'Review Quote',\n  title: 'Review Your Swap',\n  options: [\n    { label: 'Confirm', value: 'confirm', nextActionId: 'execute-swap' },\n    { label: 'Cancel', value: 'cancel', nextActionId: 'cancelled' },\n  ],\n},\n\n// Step 3: Execute swap\n{\n  id: 'execute-swap',\n  type: 'blockchain',\n  label: 'Swap Tokens',\n  address: '0xRouterAddress',\n  // ... other blockchain action properties\n  nextActions: [\n    {\n      actionId: 'success',\n      conditions: [{ field: 'lastResult.status', operator: 'eq', value: 'success' }],\n    },\n    {\n      actionId: 'failed',\n      conditions: [{ field: 'lastResult.status', operator: 'eq', value: 'error' }],\n    },\n  ],\n},\n\n\n")),(0,r.kt)("h2",{id:"completion-states"},"Completion states"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  id: 'success',\n  type: 'completion',\n  label: 'Swap Complete',\n  message: 'Your swap was successful!',\n  status: 'success',\n},\n\n{\n  id: 'failed',\n  type: 'completion',\n  label: 'Swap Failed',\n  message: 'Your swap failed. Please try again.',\n  status: 'error',\n},\n{\n  id: 'cancelled',\n  type: 'completion',\n  label: 'Swap Cancelled',\n  message: 'You cancelled the swap.',\n  status: 'info',\n},\n\n],\n };\n")),(0,r.kt)("h2",{id:"add-to-metadata"},"Add to Metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const flowMetadata: Metadata = {\n  url: 'https://swap.example',\n  icon: 'https://example.com/swap-icon.png',\n  title: 'Advanced Token Swap',\n  description: 'Swap tokens with our guided flow',\n  actions: [swapFlow],\n};\n")))}d.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||s;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);